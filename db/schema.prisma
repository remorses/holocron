generator client {
  provider = "prisma-client"
  output   = "src/generated"

  moduleFormat = "esm"
  engineType   = "client"

  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id
  name             String      @db.Text
  email            String
  emailVerified    Boolean
  image            String?     @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  orgs             OrgsUsers[]
  chats            Chat[]
  cliLoginSessions CliLoginSession[]
  apikeys           ApiKey[]
  signupReason String?

  @@unique([email])
  @@unique([username])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model TwoFactor {
  id          String @id
  secret      String @db.Text
  backupCodes String @db.Text
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

enum PaymentProvider {
  stripe
}

enum SubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model OrgsUsers {
  userId String
  orgId  String
  role   UserRole @default(MEMBER)
  // guestSiteIds String[]
  org    Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model OrgInviteLink {
  createdAt DateTime @default(now())
  key       String   @id
  orgId     String
  forSiteId String?
  forPageId String?
  org       Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  @@index([orgId])
}

model Org {
  orgId            String   @id @default(ulid())
  name             String   @default("")
  image            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  stripeCustomerId String?

  invitationLinks OrgInviteLink[]
  users           OrgsUsers[]

  subscriptions       Subscription[]
  sites               Site[]
  githubInstallations OrgGithubInstallation[]
}

model Subscription {
  subscriptionId String
  orderId        String?
  variantId      String
  productId      String
  variantName    String?
  createdAt      DateTime           @default(now())
  status         SubscriptionStatus
  endsAt         DateTime?
  email          String?            @db.VarChar(255)
  orgId          String
  provider       PaymentProvider    @default(stripe)
  itemId         String?            @unique
  quantity       Int                @default(1)
  org            Org                @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  @@id([subscriptionId, variantId])
  @@index([orgId])
}

model Site {
  siteId String  @id @default(ulid())
  name   String?
  orgId  String


  defaultLocale String @default("en")

  org Org @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  createdAt DateTime @default(now())

  branches SiteBranch[]
  /// should never start with / and if it is the base it should be '' and not '.'
  githubFolder String @default("")
  githubOwner String?
  githubRepo  String?
  githubRepoId  Int @default(0)

  visibility  SiteVisibility @default(private)

  locales     SiteEnabledLocale[]

  githubInstallations SiteGithubInstallation[]

  @@index([createdAt])
  @@index([orgId])
}

enum SiteVisibility {
 private
 public
}

// model PreviewDataForSite {
//   id String @id
//   branchId String
//   branch SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

//   docsJson Json @default("{}")
//   filesInDraft Json @default("{}")
//   chatId String?
//   chat Chat? @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
//   createdAt DateTime @default(now())
// }

model SiteBranch {
  branchId     String @id @default(ulid())
  site         Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  siteId       String
  title        String
  githubBranch String @default("main")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // trieveDatasetId  String?
  // trieveReadApiKey String?
  docsJson         Json     @default("{}")
  docsJsonComments         Json     @default("{}")
  cssStyles        String   @default("")
  domains          Domain[]

  lastGithubSyncAt DateTime?
  lastGithubSyncCommit String?
  pages       MarkdownPage[]
  mediaAssets MediaAsset[]
  metaFiles   MetaFile[]

  chats    Chat[]
  feedback PageFeedback[]

  @@index([siteId])
}

model MarkdownBlob {
  githubSha            String   @id           // git blob SHA – immutable
  markdown       String   @db.Text
  structuredData Json     @default("{}")
  mdast Json     @default("{}")


  createdAt      DateTime @default(now())

  pages MarkdownPage[]    // back-reference
}

model MarkdownPage {
  pageId       String     @id @default(ulid())
  slug         String

  branchId     String
  branch       SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  content      MarkdownBlob? @relation(fields: [githubSha], references: [githubSha], onDelete: SetNull)
  createdAt    DateTime   @default(now())

  lastEditedAt DateTime?  @updatedAt

  /// [FrontmatterJson]
  frontmatter Json?


  githubSha      String?
  githubPath     String
  syncErrors MarkdownPageSyncError[]
  mediaAssets PageMediaAsset[]

  @@unique([branchId, slug])
  @@index([branchId])
  @@index([slug])
  @@index([githubSha])
}

enum MarkdownExtension {
  mdx
  md
}

model MediaAsset {

  branchId   String
  slug       String
  branch     SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  githubSha  String
  pages PageMediaAsset[]
  githubPath String
  width      Int?
  height     Int?
  bytes Int @default(0)

  @@id([slug, branchId])
}


model PageMediaAsset {
  pageId    String
  assetSlug String
  branchId  String

  page   MarkdownPage @relation(fields: [pageId], references: [pageId], onDelete: Cascade)
  asset  MediaAsset   @relation(fields: [assetSlug, branchId], references: [slug, branchId], onDelete: Cascade)

  @@id([pageId, assetSlug, branchId])
  @@index([assetSlug, branchId])
  @@index([pageId])
}


model MetaFile {
  githubPath String
  branchId   String
  jsonData   Json
  githubSha  String

  branch SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  @@id([githubPath, branchId])
  @@index([branchId])
}

enum DomainType {
  customDomain
  internalDomain
}

model Domain {
  id   String @id @default(ulid())
  host String @unique

  domainType DomainType

  // isVercelVerified Boolean?
  // lastCheck        DateTime?
  branch   SiteBranch? @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  branchId String?

  @@index([branchId])
}

model SiteGithubInstallation {
  installationId Int
  appId          String
  siteId         String
  site           Site               @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  github         GithubInstallation @relation(fields: [installationId, appId], references: [installationId, appId], onDelete: Cascade)

  @@id([installationId, appId, siteId])
}

model OrgGithubInstallation {
  installationId Int
  appId          String
  orgId          String
  org            Org                @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
  github         GithubInstallation @relation(fields: [installationId, appId], references: [installationId, appId], onDelete: Cascade)

  @@id([installationId, appId, orgId])
}

model GithubInstallation {
  installationId   Int
  accountLogin     String   @default("")
  appId            String
  accountAvatarUrl String   @default("")
  createdAt        DateTime @default(now())

  oauthToken   String?
  status       String            @default("active")
  memberLogins String[]          @default([])
  accountType  GithubAccountType @default(USER)

  sites SiteGithubInstallation[]
  orgs  OrgGithubInstallation[]

  @@id([installationId, appId])
}

enum GithubAccountType {
  USER
  ORGANIZATION
}

model SiteEnabledLocale {
  locale String
  siteId String
  site   Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@id([locale, siteId])
}

// ─── ENUMS ─────────────────────────────────────────────────────────────

enum ChatMessageRole {
  system
  user
  assistant
}


// ─── MODELS ────────────────────────────────────────────────────────────

model Chat {
  chatId          String        @id @default(ulid())
  title           String?
  description     String?
  messages        ChatMessage[]

  // a chat is different for each user, this is to prevent the case where 2 users are updating the same chat, causing data loos and override. instead each user sees a different set of chats so they cannot possibly override each other chats.
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())

  currentSlug     String?
  filesInDraft    Json          @default("{}")
  todos    Json          @default("[]")
  lastPushedFiles Json          @default("{}")
  prNumber        Int?
  branchId        String
  branch          SiteBranch    @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  modelId String?
  modelProvider String?

  @@index([userId])
  @@index([branchId])
}

model ChatMessage {
  id        String            @id @default(ulid())

  chat      Chat              @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId    String
  role      ChatMessageRole

  index     Int @default(0)
  textParts       ChatPartText[]
  reasoningParts  ChatPartReasoning[]
  toolParts       ChatPartTool[]
  sourceUrlParts  ChatPartSourceUrl[]
  fileParts       ChatPartFile[]
  // dataParts       DataPart[]

  createdAt DateTime          @default(now())

  @@index([chatId])
}

model ChatPartText {
  type       String   @default("text")
  messageId  String
  index      Int
  text       String   @db.Text
  state      String?

  chatMessage ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@id([messageId, index])
}

model ChatPartReasoning {
  type             String @default("reasoning")
  messageId        String
  index            Int
  text             String   @db.Text
  state            String?
  providerMetadata Json?

  chatMessage      ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@id([messageId, index])
}

model ChatPartTool {
  messageId   String
  type        String
  index       Int
  toolCallId  String
  input       Json?
  output      Json?
  state       String @default("output-available")
  errorText   String? @db.Text

  chatMessage ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@id([messageId, index])
}

model ChatPartSourceUrl {
  type             String @default("source-url")
  messageId        String
  index            Int
  sourceId         String
  url              String
  title            String?
  providerMetadata Json?

  chatMessage      ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@id([messageId, index])
}

model ChatPartFile {
  type       String @default("file")
  messageId  String
  index      Int
  mediaType  String
  filename   String?
  url        String

  chatMessage ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@id([messageId, index])
}

// model DataPart {
//   messageId   String
//   index       Int
//   data        Json

//   chatMessage ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
//   @@id([messageId, index])
// }


enum PageOpinion {
  good
  bad
}

model PageFeedback {
  id            String      @id @default(ulid())
  // siteId        String
  // site          Site        @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  url           String      @db.Text
  opinion       PageOpinion @default(good)
  message       String?     @db.Text
  discussionUrl String
  branchId      String
  branch    SiteBranch  @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  ipHash    String   @default("")
  createdAt DateTime @default(now())

  @@index([branchId])
}


model CliLoginSession {
  secret String @id
  userId String
  apiKey String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model ApiKey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@index([userId])
}

enum MarkdownPageSyncErrorType {
   render
   mdxParse
   mdParse
}


model MarkdownPageSyncError {

  pageId String
  line Int
  errorMessage String
  page MarkdownPage @relation(fields: [pageId], references: [pageId], onDelete: Cascade)
  errorType MarkdownPageSyncErrorType

  @@id([pageId, line])

}
