// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/h8ioHyt4BUxuvVCE1Q10/aTM6mEMGlM19JjX8exDe/AvoidLayoutJumping_Prod.js
import { jsx as _jsx } from 'react/jsx-runtime'
import { addPropertyControls, ControlType, RenderTarget } from 'unframer'
import { useEffect, useRef } from 'react'
function AvoidLayoutJumping({ direction, style }) {
  const isCanvas = RenderTarget.current() === RenderTarget.canvas
  const ref = useRef(null)
  const rafId = useRef()
  const vertical = direction === 'vertical' || direction === 'both'
  const horizontal = direction === 'horizontal' || direction === 'both'
  useEffect(() => {
    if (isCanvas) return
    const parent = ref.current?.parentElement?.parentElement
    if (!parent) return
    const container = parent.parentElement
    if (!container) return
    const updateSize = () => {
      const rect = parent.getBoundingClientRect()
      if (horizontal) {
        container.style.width = `${rect.width}px`
      }
      if (vertical) {
        container.style.height = `${rect.height}px`
      }
      rafId.current = requestAnimationFrame(updateSize)
    }
    rafId.current = requestAnimationFrame(updateSize)
    return () => {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current)
      }
      if (container) {
        if (horizontal) {
          container.style.width = ''
        }
        if (vertical) {
          container.style.height = ''
        }
      }
    }
  }, [direction])
  return /* @__PURE__ */ _jsx('div', { ref, style: { ...style } })
}
AvoidLayoutJumping.displayName = 'Layout Jump Preventer'
addPropertyControls(AvoidLayoutJumping, {
  direction: {
    type: ControlType.Enum,
    defaultValue: 'vertical',
    options: ['vertical', 'horizontal', 'both'],
    optionTitles: ['Vertical', 'Horizontal', 'Both'],
    displaySegmentedControl: true,
    segmentedControlDirection: 'vertical',
    // @ts-ignore
    optionIcons: [
      'direction-vertical',
      'direction-horizontal',
      'direction-all',
    ],
    description:
      'More components at [Framer University](https://frameruni.link/cc).',
  },
})

// /:https://framerusercontent.com/modules/pdBKDKoqm14kvHVBJbPp/vXMSnKnLT3x4gH3shABz/ho_VhF6QI.js
import { jsx as _jsx2 } from 'react/jsx-runtime'
import {
  addPropertyControls as addPropertyControls2,
  ControlType as ControlType2,
  cx,
  motion,
  withCSS,
} from 'unframer'
import * as React from 'react'
import { forwardRef as forwardRef2 } from 'react'
var SVG = /* @__PURE__ */ forwardRef2((props, ref) => {
  const { animated, layoutId, children, ...rest } = props
  return animated
    ? /* @__PURE__ */ _jsx2(motion.div, { ...rest, layoutId, ref })
    : /* @__PURE__ */ _jsx2('div', { ...rest, ref })
})
var getProps = ({ color, height, id, width, ...props }) => {
  return {
    ...props,
    HN7TZix3o: color ?? props.HN7TZix3o ?? 'rgb(255, 255, 255)',
  }
}
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const { style, className, layoutId, variant, HN7TZix3o, ...restProps } =
    getProps(props)
  return /* @__PURE__ */ _jsx2(SVG, {
    ...restProps,
    className: cx('framer-Lvnjs', className),
    layoutId,
    ref,
    style: { '--13bnw74': HN7TZix3o, ...style },
  })
})
var css = [
  `.framer-Lvnjs { aspect-ratio: 1; background-color: var(--13bnw74); mask-image: url('data:image/svg+xml,<svg display="block" role="presentation" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M 0 0 L 0 12.5" fill="transparent" height="12.5px" id="NaIfqRgGS" stroke-dasharray="0" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" stroke="var(--13bnw74, rgb(255, 255, 255))" transform="translate(12 6)" width="1px"/><path d="M 0 0 L 12.5 0" fill="transparent" height="1px" id="uFe8JI3Rq" stroke-dasharray="0" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" stroke="var(--13bnw74, rgb(255, 255, 255))" transform="translate(5.5 12)" width="12.5px"/></svg>'); mask-position: center; mask-repeat: no-repeat; width: 24px; }`,
]
var Icon = withCSS(Component, css, 'framer-Lvnjs')
var stdin_default = Icon
addPropertyControls2(Icon, {
  HN7TZix3o: {
    defaultValue: 'rgb(255, 255, 255)',
    hidden: false,
    title: 'Color',
    type: ControlType2.Color,
  },
})

export { AvoidLayoutJumping, stdin_default }
