// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/68ZL9LCxtjilYrv52eBl/7OILITIhzFYpTJqux8Kf/BjvKQJNV8.js
import {
  addPropertyControls as e4,
  ControlType as t3,
  QueryCache as l2,
  QueryEngine as i2,
} from 'unframer'

// /:https://framerusercontent.com/modules/68ZL9LCxtjilYrv52eBl/7OILITIhzFYpTJqux8Kf/BjvKQJNV8-0.js
import { ControlType as v } from 'unframer'
import { ControlType as x } from 'unframer'
var t
var e = Object.create
var r = Object.defineProperty
var n = Object.getOwnPropertyDescriptor
var i = Object.getOwnPropertyNames
var s = Object.getPrototypeOf
var a = Object.prototype.hasOwnProperty
var o = (t32, e42, n22) =>
  e42 in t32
    ? r(t32, e42, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: n22,
      })
    : (t32[e42] = n22)
var u = (t32, e42) =>
  function () {
    return (
      e42 || (0, t32[i(t32)[0]])((e42 = { exports: {} }).exports, e42),
      e42.exports
    )
  }
var l = (t32, e42, s22, o22) => {
  if ((e42 && 'object' == typeof e42) || 'function' == typeof e42)
    for (let u22 of i(e42))
      a.call(t32, u22) ||
        u22 === s22 ||
        r(t32, u22, {
          get: () => e42[u22],
          enumerable: !(o22 = n(e42, u22)) || o22.enumerable,
        })
  return t32
}
var h = (t32, n22, i22) => (
  (i22 = null != t32 ? e(s(t32)) : {}),
  l(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    !n22 && t32 && t32.__esModule
      ? i22
      : r(i22, 'default', { value: t32, enumerable: true }),
    t32,
  )
)
var c = (t32, e42, r2) => o(t32, 'symbol' != typeof e42 ? e42 + '' : e42, r2)
var f = u({
  '../../../node_modules/dataloader/index.js'(t32, e42) {
    var r2,
      n22 = /* @__PURE__ */ (function () {
        function t4(t5, e6) {
          if ('function' != typeof t5)
            throw TypeError(
              'DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but got: ' +
                t5 +
                '.',
            )
          ;(this._batchLoadFn = t5),
            (this._maxBatchSize = (function (t6) {
              if (!(!t6 || false !== t6.batch)) return 1
              var e7 = t6 && t6.maxBatchSize
              if (void 0 === e7) return 1 / 0
              if ('number' != typeof e7 || e7 < 1)
                throw TypeError('maxBatchSize must be a positive number: ' + e7)
              return e7
            })(e6)),
            (this._batchScheduleFn = (function (t6) {
              var e7 = t6 && t6.batchScheduleFn
              if (void 0 === e7) return i22
              if ('function' != typeof e7)
                throw TypeError('batchScheduleFn must be a function: ' + e7)
              return e7
            })(e6)),
            (this._cacheKeyFn = (function (t6) {
              var e7 = t6 && t6.cacheKeyFn
              if (void 0 === e7)
                return function (t7) {
                  return t7
                }
              if ('function' != typeof e7)
                throw TypeError('cacheKeyFn must be a function: ' + e7)
              return e7
            })(e6)),
            (this._cacheMap = (function (t6) {
              if (!(!t6 || false !== t6.cache)) return null
              var e7 = t6 && t6.cacheMap
              if (void 0 === e7) return /* @__PURE__ */ new Map()
              if (null !== e7) {
                var r3 = ['get', 'set', 'delete', 'clear'].filter(
                  function (t7) {
                    return e7 && 'function' != typeof e7[t7]
                  },
                )
                if (0 !== r3.length)
                  throw TypeError(
                    'Custom cacheMap missing methods: ' + r3.join(', '),
                  )
              }
              return e7
            })(e6)),
            (this._batch = null),
            (this.name = e6 && e6.name ? e6.name : null)
        }
        var e5 = t4.prototype
        return (
          (e5.load = function (t5) {
            if (null == t5)
              throw TypeError(
                'The loader.load() function must be called with a value, but got: ' +
                  String(t5) +
                  '.',
              )
            var e6 = (function (t6) {
                var e7 = t6._batch
                if (
                  null !== e7 &&
                  !e7.hasDispatched &&
                  e7.keys.length < t6._maxBatchSize
                )
                  return e7
                var r4 = {
                  hasDispatched: false,
                  keys: [],
                  callbacks: [],
                }
                return (
                  (t6._batch = r4),
                  t6._batchScheduleFn(function () {
                    ;(function (t7, e8) {
                      var r5
                      if (((e8.hasDispatched = true), 0 === e8.keys.length)) {
                        a2(e8)
                        return
                      }
                      try {
                        r5 = t7._batchLoadFn(e8.keys)
                      } catch (r6) {
                        return s22(
                          t7,
                          e8,
                          TypeError(
                            'DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function errored synchronously: ' +
                              String(r6) +
                              '.',
                          ),
                        )
                      }
                      if (!r5 || 'function' != typeof r5.then)
                        return s22(
                          t7,
                          e8,
                          TypeError(
                            'DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise: ' +
                              String(r5) +
                              '.',
                          ),
                        )
                      r5.then(function (t8) {
                        if (!o22(t8))
                          throw TypeError(
                            'DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array: ' +
                              String(t8) +
                              '.',
                          )
                        if (t8.length !== e8.keys.length)
                          throw TypeError(
                            'DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys.\n\nKeys:\n' +
                              String(e8.keys) +
                              '\n\nValues:\n' +
                              String(t8),
                          )
                        a2(e8)
                        for (var r6 = 0; r6 < e8.callbacks.length; r6++) {
                          var n4 = t8[r6]
                          n4 instanceof Error
                            ? e8.callbacks[r6].reject(n4)
                            : e8.callbacks[r6].resolve(n4)
                        }
                      }).catch(function (r6) {
                        s22(t7, e8, r6)
                      })
                    })(t6, r4)
                  }),
                  r4
                )
              })(this),
              r3 = this._cacheMap,
              n3 = this._cacheKeyFn(t5)
            if (r3) {
              var i3 = r3.get(n3)
              if (i3) {
                var u22 = e6.cacheHits || (e6.cacheHits = [])
                return new Promise(function (t6) {
                  u22.push(function () {
                    t6(i3)
                  })
                })
              }
            }
            e6.keys.push(t5)
            var l22 = new Promise(function (t6, r4) {
              e6.callbacks.push({ resolve: t6, reject: r4 })
            })
            return r3 && r3.set(n3, l22), l22
          }),
          (e5.loadMany = function (t5) {
            if (!o22(t5))
              throw TypeError(
                'The loader.loadMany() function must be called with Array<key> but got: ' +
                  t5 +
                  '.',
              )
            for (var e6 = [], r3 = 0; r3 < t5.length; r3++)
              e6.push(
                this.load(t5[r3]).catch(function (t6) {
                  return t6
                }),
              )
            return Promise.all(e6)
          }),
          (e5.clear = function (t5) {
            var e6 = this._cacheMap
            if (e6) {
              var r3 = this._cacheKeyFn(t5)
              e6.delete(r3)
            }
            return this
          }),
          (e5.clearAll = function () {
            var t5 = this._cacheMap
            return t5 && t5.clear(), this
          }),
          (e5.prime = function (t5, e6) {
            var r3 = this._cacheMap
            if (r3) {
              var n3,
                i3 = this._cacheKeyFn(t5)
              void 0 === r3.get(i3) &&
                (e6 instanceof Error
                  ? (n3 = Promise.reject(e6)).catch(function () {})
                  : (n3 = Promise.resolve(e6)),
                r3.set(i3, n3))
            }
            return this
          }),
          t4
        )
      })(),
      i22 =
        'object' == typeof process && 'function' == typeof process.nextTick
          ? function (t4) {
              r2 || (r2 = Promise.resolve()),
                r2.then(function () {
                  process.nextTick(t4)
                })
            }
          : 'function' == typeof setImmediate
            ? function (t4) {
                setImmediate(t4)
              }
            : function (t4) {
                setTimeout(t4)
              }
    function s22(t4, e5, r3) {
      a2(e5)
      for (var n3 = 0; n3 < e5.keys.length; n3++)
        t4.clear(e5.keys[n3]), e5.callbacks[n3].reject(r3)
    }
    function a2(t4) {
      if (t4.cacheHits)
        for (var e5 = 0; e5 < t4.cacheHits.length; e5++) t4.cacheHits[e5]()
    }
    function o22(t4) {
      return (
        'object' == typeof t4 &&
        null !== t4 &&
        'number' == typeof t4.length &&
        (0 === t4.length ||
          (t4.length > 0 &&
            Object.prototype.hasOwnProperty.call(t4, t4.length - 1)))
      )
    }
    e42.exports = n22
  },
})
var g = h(f())
var d = {
  Uint8: 1,
  Uint16: 2,
  Uint32: 4,
  BigUint64: 8,
  Int8: 1,
  Int16: 2,
  Int32: 4,
  BigInt64: 8,
  Float32: 4,
  Float64: 8,
}
var y = class {
  getOffset() {
    return this.offset
  }
  ensureLength(t32) {
    let e42 = this.bytes.length
    if (!(this.offset + t32 <= e42)) throw Error('Reading out of bounds')
  }
  readUint8() {
    let t32 = d.Uint8
    this.ensureLength(t32)
    let e42 = this.view.getUint8(this.offset)
    return (this.offset += t32), e42
  }
  readUint16() {
    let t32 = d.Uint16
    this.ensureLength(t32)
    let e42 = this.view.getUint16(this.offset)
    return (this.offset += t32), e42
  }
  readUint32() {
    let t32 = d.Uint32
    this.ensureLength(t32)
    let e42 = this.view.getUint32(this.offset)
    return (this.offset += t32), e42
  }
  readUint64() {
    let t32 = this.readBigUint64()
    return Number(t32)
  }
  readBigUint64() {
    let t32 = d.BigUint64
    this.ensureLength(t32)
    let e42 = this.view.getBigUint64(this.offset)
    return (this.offset += t32), e42
  }
  readInt8() {
    let t32 = d.Int8
    this.ensureLength(t32)
    let e42 = this.view.getInt8(this.offset)
    return (this.offset += t32), e42
  }
  readInt16() {
    let t32 = d.Int16
    this.ensureLength(t32)
    let e42 = this.view.getInt16(this.offset)
    return (this.offset += t32), e42
  }
  readInt32() {
    let t32 = d.Int32
    this.ensureLength(t32)
    let e42 = this.view.getInt32(this.offset)
    return (this.offset += t32), e42
  }
  readInt64() {
    let t32 = this.readBigInt64()
    return Number(t32)
  }
  readBigInt64() {
    let t32 = d.BigInt64
    this.ensureLength(t32)
    let e42 = this.view.getBigInt64(this.offset)
    return (this.offset += t32), e42
  }
  readFloat32() {
    let t32 = d.Float32
    this.ensureLength(t32)
    let e42 = this.view.getFloat32(this.offset)
    return (this.offset += t32), e42
  }
  readFloat64() {
    let t32 = d.Float64
    this.ensureLength(t32)
    let e42 = this.view.getFloat64(this.offset)
    return (this.offset += t32), e42
  }
  readBytes(t32) {
    let e42 = this.offset,
      r2 = e42 + t32,
      n22 = this.bytes.subarray(e42, r2)
    return (this.offset = r2), n22
  }
  readString() {
    let t32 = this.readUint32(),
      e42 = this.readBytes(t32)
    return this.decoder.decode(e42)
  }
  readJson() {
    let t32 = this.readString()
    return JSON.parse(t32)
  }
  constructor(t32) {
    ;(this.bytes = t32),
      c(this, 'offset', 0),
      c(this, 'view'),
      c(this, 'decoder', new TextDecoder()),
      (this.view = p(this.bytes))
  }
}
function p(t32) {
  return new DataView(t32.buffer, t32.byteOffset, t32.byteLength)
}
var m = 'undefined' != typeof window
var w = m && 'function' == typeof window.requestIdleCallback
function I(t32, ...e42) {
  if (!t32)
    throw Error(
      'Assertion Error' + (e42.length > 0 ? ': ' + e42.join(' ') : ''),
    )
}
function b(t32) {
  throw Error(`Unexpected value: ${t32}`)
}
var k = (t32) => 2 ** t32 - 1
var L = (t32) => -(2 ** (t32 - 1))
var B = (t32) => 2 ** (t32 - 1) - 1
var E = {
  Uint8: 0,
  Uint16: 0,
  Uint32: 0,
  Uint64: 0,
  BigUint64: 0,
  Int8: L(8),
  Int16: L(16),
  Int32: L(32),
  Int64: Number.MIN_SAFE_INTEGER,
  BigInt64: -(BigInt(2) ** BigInt(63)),
}
var M = {
  Uint8: k(8),
  Uint16: k(16),
  Uint32: k(32),
  Uint64: Number.MAX_SAFE_INTEGER,
  BigUint64: BigInt(2) ** BigInt(64) - BigInt(1),
  Int8: B(8),
  Int16: B(16),
  Int32: B(32),
  Int64: Number.MAX_SAFE_INTEGER,
  BigInt64: BigInt(2) ** BigInt(63) - BigInt(1),
}
function N(t32) {
  return Number.isFinite(t32)
}
function A(t32) {
  return null === t32
}
var O = class t2 {
  static fromString(e42) {
    let [r2, n22, i22] = e42.split('/').map(Number)
    return (
      I(N(r2), 'Invalid chunkId'),
      I(N(n22), 'Invalid offset'),
      I(N(i22), 'Invalid length'),
      new t2(r2, n22, i22)
    )
  }
  toString() {
    return `${this.chunkId}/${this.offset}/${this.length}`
  }
  static read(e42) {
    let r2 = e42.readUint16(),
      n22 = e42.readUint32(),
      i22 = e42.readUint32()
    return new t2(r2, n22, i22)
  }
  write(t32) {
    t32.writeUint16(this.chunkId),
      t32.writeUint32(this.offset),
      t32.writeUint32(this.length)
  }
  compare(t32) {
    return this.chunkId < t32.chunkId
      ? -1
      : this.chunkId > t32.chunkId
        ? 1
        : this.offset < t32.offset
          ? -1
          : this.offset > t32.offset
            ? 1
            : (I(this.length === t32.length), 0)
  }
  constructor(t32, e42, r2) {
    ;(this.chunkId = t32), (this.offset = e42), (this.length = r2)
  }
}
function P(t32) {
  if (A(t32)) return 0
  switch (t32.type) {
    case x.Array:
      return 1
    case x.Boolean:
      return 2
    case x.Color:
      return 3
    case x.Date:
      return 4
    case x.Enum:
      return 5
    case x.File:
      return 6
    case x.ResponsiveImage:
      return 10
    case x.Link:
      return 7
    case x.Number:
      return 8
    case x.Object:
      return 9
    case x.RichText:
      return 11
    case x.String:
      return 12
    case x.VectorSetItem:
      return 13
    default:
      b(t32)
  }
}
function R(e42) {
  let r2 = e42.readUint16(),
    n22 = []
  for (let i22 = 0; i22 < r2; i22++) {
    let r3 = t.read(e42)
    n22.push(r3)
  }
  return { type: x.Array, value: n22 }
}
function q(e42, r2) {
  for (let n22 of (e42.writeUint16(r2.value.length), r2.value))
    t.write(e42, n22)
}
function _(e42, r2, n22) {
  let i22 = e42.value.length,
    s22 = r2.value.length
  if (i22 < s22) return -1
  if (i22 > s22) return 1
  for (let s3 = 0; s3 < i22; s3++) {
    let i3 = e42.value[s3],
      a2 = r2.value[s3],
      o22 = t.compare(i3, a2, n22)
    if (0 !== o22) return o22
  }
  return 0
}
function D(t32) {
  return { type: x.Boolean, value: 0 !== t32.readUint8() }
}
function j(t32, e42) {
  t32.writeUint8(e42.value ? 1 : 0)
}
function C(t32, e42) {
  return t32.value < e42.value ? -1 : t32.value > e42.value ? 1 : 0
}
function J(t32) {
  return { type: x.Color, value: t32.readString() }
}
function V(t32, e42) {
  t32.writeString(e42.value)
}
function W(t32, e42) {
  return t32.value < e42.value ? -1 : t32.value > e42.value ? 1 : 0
}
function $(t32) {
  let e42 = t32.readInt64(),
    r2 = new Date(e42)
  return { type: x.Date, value: r2.toISOString() }
}
function z(t32, e42) {
  let r2 = new Date(e42.value),
    n22 = r2.getTime()
  t32.writeInt64(n22)
}
function G(t32, e42) {
  let r2 = new Date(t32.value),
    n22 = new Date(e42.value)
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0
}
function K(t32) {
  return { type: x.Enum, value: t32.readString() }
}
function H(t32, e42) {
  t32.writeString(e42.value)
}
function X(t32, e42) {
  return t32.value < e42.value ? -1 : t32.value > e42.value ? 1 : 0
}
function Q(t32) {
  return { type: x.File, value: t32.readString() }
}
function Y(t32, e42) {
  t32.writeString(e42.value)
}
function Z(t32, e42) {
  return t32.value < e42.value ? -1 : t32.value > e42.value ? 1 : 0
}
function tt(t32) {
  return { type: x.Link, value: t32.readJson() }
}
function te(t32, e42) {
  t32.writeJson(e42.value)
}
function tr(t32, e42) {
  let r2 = JSON.stringify(t32.value),
    n22 = JSON.stringify(e42.value)
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0
}
function tn(t32) {
  return { type: x.Number, value: t32.readFloat64() }
}
function ti(t32, e42) {
  t32.writeFloat64(e42.value)
}
function ts(t32, e42) {
  return t32.value < e42.value ? -1 : t32.value > e42.value ? 1 : 0
}
function ta(e42) {
  let r2 = e42.readUint16(),
    n22 = {}
  for (let i22 = 0; i22 < r2; i22++) {
    let r3 = e42.readString()
    n22[r3] = t.read(e42)
  }
  return { type: x.Object, value: n22 }
}
function to(e42, r2) {
  let n22 = Object.entries(r2.value)
  for (let [r3, i22] of (e42.writeUint16(n22.length), n22))
    e42.writeString(r3), t.write(e42, i22)
}
function tu(e42, r2, n22) {
  let i22 = Object.keys(e42.value).sort(),
    s22 = Object.keys(r2.value).sort()
  if (i22.length < s22.length) return -1
  if (i22.length > s22.length) return 1
  for (let a2 = 0; a2 < i22.length; a2++) {
    let o22 = i22[a2],
      u22 = s22[a2]
    if (o22 < u22) return -1
    if (o22 > u22) return 1
    let l22 = e42.value[o22] ?? null,
      h2 = r2.value[u22] ?? null,
      c2 = t.compare(l22, h2, n22)
    if (0 !== c2) return c2
  }
  return 0
}
function tl(t32) {
  return { type: x.ResponsiveImage, value: t32.readJson() }
}
function th(t32, e42) {
  t32.writeJson(e42.value)
}
function tc(t32, e42) {
  let r2 = JSON.stringify(t32.value),
    n22 = JSON.stringify(e42.value)
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0
}
function tf(t32) {
  return { type: x.RichText, value: t32.readUint32() }
}
function tg(t32, e42) {
  t32.writeUint32(e42.value)
}
function td(t32, e42) {
  let r2 = t32.value,
    n22 = e42.value
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0
}
function ty(t32) {
  return { type: x.String, value: t32.readString() }
}
function tp(t32, e42) {
  t32.writeString(e42.value)
}
function tv(t32, e42, r2) {
  let n22 = t32.value,
    i22 = e42.value
  return (0 === r2.type &&
    ((n22 = t32.value.toLowerCase()), (i22 = e42.value.toLowerCase())),
  n22 < i22)
    ? -1
    : n22 > i22
      ? 1
      : 0
}
function tm(t32) {
  return { type: x.VectorSetItem, value: t32.readUint32() }
}
function tw(t32, e42) {
  t32.writeUint32(e42.value)
}
function tI(t32, e42) {
  let r2 = t32.value,
    n22 = e42.value
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0
}
;((t32) => {
  ;(t32.read = function (t4) {
    let e42 = t4.readUint8()
    switch (e42) {
      case 0:
        return null
      case 1:
        return R(t4)
      case 2:
        return D(t4)
      case 3:
        return J(t4)
      case 4:
        return $(t4)
      case 5:
        return K(t4)
      case 6:
        return Q(t4)
      case 7:
        return tt(t4)
      case 8:
        return tn(t4)
      case 9:
        return ta(t4)
      case 10:
        return tl(t4)
      case 11:
        return tf(t4)
      case 12:
        return ty(t4)
      case 13:
        return tm(t4)
      default:
        b(e42)
    }
  }),
    (t32.write = function (t4, e42) {
      let r2 = P(e42)
      if ((t4.writeUint8(r2), !A(e42)))
        switch (e42.type) {
          case x.Array:
            return q(t4, e42)
          case x.Boolean:
            return j(t4, e42)
          case x.Color:
            return V(t4, e42)
          case x.Date:
            return z(t4, e42)
          case x.Enum:
            return H(t4, e42)
          case x.File:
            return Y(t4, e42)
          case x.Link:
            return te(t4, e42)
          case x.Number:
            return ti(t4, e42)
          case x.Object:
            return to(t4, e42)
          case x.ResponsiveImage:
            return th(t4, e42)
          case x.RichText:
            return tg(t4, e42)
          case x.VectorSetItem:
            return tw(t4, e42)
          case x.String:
            return tp(t4, e42)
          default:
            b(e42)
        }
    }),
    (t32.compare = function (t4, e42, r2) {
      let n22 = P(t4),
        i22 = P(e42)
      if (n22 < i22) return -1
      if (n22 > i22) return 1
      if (A(t4) || A(e42)) return 0
      switch (t4.type) {
        case x.Array:
          return I(e42.type === x.Array), _(t4, e42, r2)
        case x.Boolean:
          return I(e42.type === x.Boolean), C(t4, e42)
        case x.Color:
          return I(e42.type === x.Color), W(t4, e42)
        case x.Date:
          return I(e42.type === x.Date), G(t4, e42)
        case x.Enum:
          return I(e42.type === x.Enum), X(t4, e42)
        case x.File:
          return I(e42.type === x.File), Z(t4, e42)
        case x.Link:
          return I(e42.type === x.Link), tr(t4, e42)
        case x.Number:
          return I(e42.type === x.Number), ts(t4, e42)
        case x.Object:
          return I(e42.type === x.Object), tu(t4, e42, r2)
        case x.ResponsiveImage:
          return I(e42.type === x.ResponsiveImage), tc(t4, e42)
        case x.RichText:
          return I(e42.type === x.RichText), td(t4, e42)
        case x.VectorSetItem:
          return I(e42.type === x.VectorSetItem), tI(t4, e42)
        case x.String:
          return I(e42.type === x.String), tv(t4, e42, r2)
        default:
          b(t4)
      }
    })
})(t || (t = {}))
var tU = 3
var tS = 250
var tk = [
  408,
  // Request Timeout
  429,
  // Too Many Requests
  500,
  // Internal Server Error
  502,
  // Bad Gateway
  503,
  // Service Unavailable
  504,
]
var tL = async (t32, e42) => {
  let r2 = 0
  for (;;) {
    try {
      let n22 = await fetch(t32, e42)
      if (!tk.includes(n22.status) || ++r2 > tU) return n22
    } catch (t4) {
      if (e42?.signal?.aborted || ++r2 > tU) throw t4
    }
    await tB(r2)
  }
}
async function tB(t32) {
  let e42 = Math.floor(tS * (Math.random() + 1) * 2 ** (t32 - 1))
  await new Promise((t4) => {
    setTimeout(t4, e42)
  })
}
async function tE(t32, e42) {
  let r2 = tF(e42),
    n22 = [],
    i22 = 0
  for (let t4 of r2)
    n22.push(`${t4.from}-${t4.to - 1}`), (i22 += t4.to - t4.from)
  let s22 = new URL(t32),
    a2 = n22.join(',')
  s22.searchParams.set('range', a2)
  let o22 = await tL(s22)
  if (200 !== o22.status)
    throw Error(`Request failed: ${o22.status} ${o22.statusText}`)
  let u22 = await o22.arrayBuffer(),
    l22 = new Uint8Array(u22)
  if (l22.length !== i22)
    throw Error('Request failed: Unexpected response length')
  let h2 = new tM(),
    c2 = 0
  for (let t4 of r2) {
    let e5 = t4.to - t4.from,
      r3 = c2 + e5,
      n3 = l22.subarray(c2, r3)
    h2.write(t4.from, n3), (c2 = r3)
  }
  return e42.map((t4) => h2.read(t4.from, t4.to - t4.from))
}
var tM = class {
  read(t32, e42) {
    for (let r2 of this.chunks) {
      if (t32 < r2.start) break
      if (t32 > r2.end) continue
      if (t32 + e42 > r2.end) break
      let n22 = t32 - r2.start,
        i22 = n22 + e42
      return r2.data.slice(n22, i22)
    }
    throw Error('Missing data')
  }
  write(t32, e42) {
    let r2 = t32,
      n22 = r2 + e42.length,
      i22 = 0,
      s22 = this.chunks.length
    for (; i22 < s22; i22++) {
      let t4 = this.chunks[i22]
      if ((I(t4, 'Missing chunk'), !(r2 > t4.end))) {
        if (r2 > t4.start) {
          let n3 = r2 - t4.start,
            i3 = t4.data.subarray(0, n3)
          ;(e42 = tT(i3, e42)), (r2 = t4.start)
        }
        break
      }
    }
    for (; s22 > i22; s22--) {
      let t4 = this.chunks[s22 - 1]
      if ((I(t4, 'Missing chunk'), !(n22 < t4.start))) {
        if (n22 < t4.end) {
          let r3 = n22 - t4.start,
            i3 = t4.data.subarray(r3)
          ;(e42 = tT(e42, i3)), (n22 = t4.end)
        }
        break
      }
    }
    let a2 = { start: r2, end: n22, data: e42 },
      o22 = s22 - i22
    this.chunks.splice(i22, o22, a2)
  }
  constructor() {
    c(this, 'chunks', [])
  }
}
function tT(t32, e42) {
  let r2 = t32.length + e42.length,
    n22 = new Uint8Array(r2)
  return n22.set(t32, 0), n22.set(e42, t32.length), n22
}
function tF(t32) {
  I(t32.length > 0, 'Must have at least one range')
  let e42 = [...t32].sort((t4, e5) => t4.from - e5.from),
    r2 = []
  for (let t4 of e42) {
    let e5 = r2.length - 1,
      n22 = r2[e5]
    n22 && t4.from <= n22.to
      ? (r2[e5] = { from: n22.from, to: Math.max(n22.to, t4.to) })
      : r2.push(t4)
  }
  return r2
}
var tA = class e3 {
  static read(r2) {
    let n22 = new e3(),
      i22 = r2.readUint16()
    for (let e42 = 0; e42 < i22; e42++) {
      let e5 = r2.readString(),
        i3 = t.read(r2)
      n22.setField(e5, i3)
    }
    return n22
  }
  write(e42) {
    for (let [r2, n22] of (e42.writeUint16(this.fields.size), this.fields))
      e42.writeString(r2), t.write(e42, n22)
  }
  getData() {
    let t32 = {}
    for (let [e42, r2] of this.fields) t32[e42] = r2
    return t32
  }
  setField(t32, e42) {
    this.fields.set(t32, e42)
  }
  getField(t32) {
    return this.fields.get(t32)
  }
  constructor() {
    c(this, 'fields', /* @__PURE__ */ new Map())
  }
}
var tO = class {
  scanItems() {
    return (
      (this.itemsPromise ??= tL(this.url).then(async (t32) => {
        if (!t32.ok)
          throw Error(`Request failed: ${t32.status} ${t32.statusText}`)
        let e42 = await t32.arrayBuffer(),
          r2 = new Uint8Array(e42),
          n22 = new y(r2),
          i22 = [],
          s22 = n22.readUint32()
        for (let t4 = 0; t4 < s22; t4++) {
          let t5 = n22.getOffset(),
            e5 = tA.read(n22),
            r3 = n22.getOffset() - t5,
            s3 = new O(this.id, t5, r3),
            a2 = s3.toString(),
            o22 = { pointer: a2, data: e5.getData() }
          this.itemLoader.prime(a2, o22), i22.push(o22)
        }
        return i22
      })),
      this.itemsPromise
    )
  }
  resolveItem(t32) {
    return this.itemLoader.load(t32)
  }
  constructor(t32, e42) {
    ;(this.id = t32),
      (this.url = e42),
      c(this, 'itemsPromise'),
      c(
        this,
        'itemLoader',
        new g.default(async (t4) => {
          let e5 = t4.map((t5) => {
              let e6 = O.fromString(t5)
              return {
                from: e6.offset,
                to: e6.offset + e6.length,
              }
            }),
            r2 = await tE(this.url, e5)
          return r2.map((e6, r3) => {
            let n22 = new y(e6),
              i22 = tA.read(n22),
              s22 = t4[r3]
            return (
              I(s22, 'Missing pointer'), { pointer: s22, data: i22.getData() }
            )
          })
        }),
      )
  }
}
var tx = class {
  async scanItems() {
    let t32 = await Promise.all(this.chunks.map(async (t4) => t4.scanItems()))
    return t32.flat()
  }
  async resolveItems(t32) {
    return Promise.all(
      t32.map((t4) => {
        let e42 = O.fromString(t4),
          r2 = this.chunks[e42.chunkId]
        return I(r2, 'Missing chunk'), r2.resolveItem(t4)
      }),
    )
  }
  compareItems(t32, e42) {
    let r2 = O.fromString(t32.pointer),
      n22 = O.fromString(e42.pointer)
    return r2.compare(n22)
  }
  compareValues(e42, r2, n22) {
    return t.compare(e42, r2, n22)
  }
  constructor(t32) {
    ;(this.options = t32),
      c(this, 'schema'),
      c(this, 'indexes'),
      c(this, 'resolveRichText'),
      c(this, 'resolveVectorSetItem'),
      c(this, 'chunks'),
      (this.chunks = this.options.chunks.map((t4, e42) => new tO(e42, t4))),
      (this.schema = t32.schema),
      (this.indexes = t32.indexes),
      (this.resolveRichText = t32.resolveRichText),
      (this.resolveVectorSetItem = t32.resolveVectorSetItem)
  }
}

// /:https://framerusercontent.com/modules/68ZL9LCxtjilYrv52eBl/7OILITIhzFYpTJqux8Kf/BjvKQJNV8-1.js
var e2 = []
async function resolveRichText(t4) {
  let i3 = e2[t4]
  if (i3) return await i3()
}

// /:https://framerusercontent.com/modules/68ZL9LCxtjilYrv52eBl/7OILITIhzFYpTJqux8Kf/BjvKQJNV8.js
var n2 = {
  eQ710bws0: { isNullable: true, type: t3.String },
  id: { isNullable: false, type: t3.String },
  nextItemId: { isNullable: true, type: t3.String },
  PfZk8Jfkg: { isNullable: true, type: t3.String },
  previousItemId: { isNullable: true, type: t3.String },
}
var o2 = []
var u2 = (e22) => {
  let t22 = o2[e22]
  if (t22) return t22().then((e32) => e32.default)
}
var p2 = new i2()
var d2 = new l2(p2)
var s2 = {
  collectionByLocaleId: {
    default: new tx({
      chunks: [
        new URL(
          './BjvKQJNV8-chunk-default-0.framercms',
          'https://framerusercontent.com/modules/68ZL9LCxtjilYrv52eBl/7OILITIhzFYpTJqux8Kf/BjvKQJNV8.js',
        ).href.replace('/modules/', '/cms/'),
      ],
      indexes: [],
      resolveRichText,
      resolveVectorSetItem: u2,
      schema: n2,
    }),
  },
  displayName: 'Categories',
}
var stdin_default = s2
e4(s2, {
  PfZk8Jfkg: { defaultValue: '', title: 'Title', type: t3.String },
  eQ710bws0: { title: 'Slug', type: t3.String },
  previousItemId: {
    dataIdentifier: 'local-module:collection/BjvKQJNV8:default',
    title: 'Previous',
    type: t3.CollectionReference,
  },
  nextItemId: {
    dataIdentifier: 'local-module:collection/BjvKQJNV8:default',
    title: 'Next',
    type: t3.CollectionReference,
  },
})

export { stdin_default }
