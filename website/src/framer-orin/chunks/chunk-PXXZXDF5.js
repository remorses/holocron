// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/TS5bPiMUGtjrWMUlvKp9/AciUHRnNOn8057WveTGJ/TextShimmer_Prod.js
import { jsx as _jsx, jsxs as _jsxs } from 'react/jsx-runtime'
import { useRef, useEffect } from 'react'
import { addPropertyControls, ControlType } from 'unframer'
function getUniqueClassName() {
  return 'text-shimmer-' + Math.random().toString(36).substr(2, 9)
}
function TextShimmer({ font, content, color, shimmer, size, speed, userSelect, rotation, delay, tag, direction }) {
  const classNameRef = useRef(getUniqueClassName())
  const Tag = tag
  const backgroundSize = `200% 200%`
  const speedFormatted = 11 - speed
  const gradientFirst = 50 - (size * (50 - 20)) / 100
  const gradientLast = 50 + (size * (80 - 50)) / 100
  const animationDuration = speedFormatted + delay
  const startPos = direction === 'left' ? '-100%' : '200%'
  const endPos = direction === 'left' ? '200%' : '-100%'
  const keyframes = `
        @keyframes shimmer-${classNameRef.current} {
            0%, ${(delay / animationDuration) * 100}% {
                background-position: ${startPos};
            }
            100% {
                background-position: ${endPos};
            }
        }
    `
  useEffect(() => {
    const styleId = `shimmer-style-${classNameRef.current}`
    let styleEl = document.getElementById(styleId)
    if (!styleEl) {
      styleEl = document.createElement('style')
      styleEl.id = styleId
      document.head.appendChild(styleEl)
    }
    styleEl.innerHTML = `
            ${keyframes}
            .${classNameRef.current} {
                background: linear-gradient(
                    ${rotation}deg,
                    transparent 0%,
                    transparent ${gradientFirst}%,
                    ${shimmer} 50%,
                    transparent ${gradientLast}%,
                    transparent 100%
                );
                -webkit-background-size: ${backgroundSize};
                -moz-background-size: ${backgroundSize};
                background-size: ${backgroundSize};
                -webkit-background-clip: text;
                -moz-background-clip: text;
                background-clip: text;
                background-repeat: no-repeat;
                animation: shimmer-${classNameRef.current} ${animationDuration}s linear infinite;
            }
        `
    return () => {
      if (styleEl && styleEl.parentNode) {
        styleEl.parentNode.removeChild(styleEl)
      }
    }
  }, [shimmer, rotation, gradientFirst, gradientLast, backgroundSize, animationDuration, delay, direction, keyframes])
  return /* @__PURE__ */ _jsxs('div', {
    style: {
      userSelect: userSelect ? 'auto' : 'none',
      position: 'relative',
    },
    children: [
      /* @__PURE__ */ _jsx(Tag, {
        style: {
          ...font,
          color,
          marginBlockStart: '0px',
          marginBlockEnd: '0px',
        },
        children: content,
      }),
      /* @__PURE__ */ _jsx(Tag, {
        'aria-hidden': 'true',
        className: classNameRef.current,
        style: {
          ...font,
          color: 'transparent',
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          zIndex: 1,
          marginBlockStart: '0px',
          marginBlockEnd: '0px',
          pointerEvents: 'none',
        },
        children: content,
      }),
    ],
  })
}
TextShimmer.displayName = 'Text Shimmer'
addPropertyControls(TextShimmer, {
  font: {
    type: ControlType.Font,
    title: 'Font',
    defaultValue: 'Inter',
    controls: 'extended',
  },
  content: {
    type: ControlType.String,
    title: 'Content',
    defaultValue: 'Learn Framer With Framer University',
  },
  color: {
    type: ControlType.Color,
    title: 'Color',
    defaultValue: '#FFFFFF1A',
  },
  shimmer: {
    type: ControlType.Color,
    title: 'Shimmer',
    defaultValue: '#ffffff',
  },
  size: {
    type: ControlType.Number,
    title: 'Size',
    defaultValue: 30,
    step: 1,
    max: 100,
    min: 1,
  },
  speed: {
    type: ControlType.Number,
    title: 'Speed',
    defaultValue: 5,
    max: 10,
    min: 1,
    step: 1,
  },
  direction: {
    type: ControlType.Enum,
    title: 'Direction',
    defaultValue: 'left',
    options: ['left', 'right'],
    optionTitles: ['Left', 'Right'],
    displaySegmentedControl: true,
    segmentedControlDirection: 'horizontal',
    optionIcons: ['direction-left', 'direction-right'],
  },
  userSelect: {
    title: 'User Select',
    type: ControlType.Boolean,
    defaultValue: false,
  },
  rotation: {
    type: ControlType.Number,
    title: 'Rotation',
    defaultValue: 90,
    min: 45,
    unit: '\xB0',
    max: 135,
    step: 1,
  },
  delay: {
    type: ControlType.Number,
    title: 'Delay',
    defaultValue: 0,
    min: 0,
    max: 10,
    step: 0.1,
  },
  tag: {
    type: ControlType.Enum,
    title: 'Tag',
    defaultValue: 'p',
    displaySegmentedControl: true,
    segmentedControlDirection: 'horizontal',
    options: ['h1', 'h2', 'h3', 'p'],
    optionTitles: ['H1', 'H2', 'H3', 'P'],
    description: 'More components at [Framer University](https://frameruni.link/cc).',
  },
})

export { TextShimmer }
