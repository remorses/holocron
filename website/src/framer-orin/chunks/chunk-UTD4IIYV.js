// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/EefyPMUDLuwV7JJELrdL/RnbEDbmn1Oq9o5jub5nE/AspectRatioLogo.js
import { jsx as _jsx } from 'react/jsx-runtime'
import { useRef, useState, useEffect, startTransition } from 'react'
import { addPropertyControls, ControlType } from 'unframer'
function AspectRatioLogo(props) {
  const {
    logoFile = 'https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg',
    fixedHeight = 80,
    invertColors = false,
    noColor = false,
    style,
  } = props
  const [aspectRatio, setAspectRatio] = useState(1)
  const [isSVG, setIsSVG] = useState(false)
  const [svgSize, setSvgSize] = useState({ width: 1, height: 1 })
  const imgRef = useRef(null)
  const [isLoading, setIsLoading] = useState(true)
  useEffect(() => {
    if (!logoFile) {
      startTransition(() => {
        setAspectRatio(1)
        setIsSVG(false)
        setIsLoading(false)
      })
      return
    }
    const isSvgFile = logoFile.endsWith('.svg')
    startTransition(() => {
      setIsLoading(true)
      setIsSVG(isSvgFile)
    })
    if (isSvgFile) {
      fetch(logoFile)
        .then((res) => res.text())
        .then((svgText) => {
          const parser = new DOMParser()
          const doc = parser.parseFromString(svgText, 'image/svg+xml')
          const svg = doc.querySelector('svg')
          let newAspectRatio = 1
          if (svg) {
            let width2 = parseFloat(svg.getAttribute('width') || '0')
            let height2 = parseFloat(svg.getAttribute('height') || '0')
            if (!width2 || !height2) {
              const viewBox = svg.getAttribute('viewBox')
              if (viewBox) {
                const parts = viewBox.split(' ').map(Number)
                if (parts.length === 4) {
                  width2 = parts[2]
                  height2 = parts[3]
                }
              }
            }
            if (width2 && height2) {
              setSvgSize({ width: width2, height: height2 })
              newAspectRatio = width2 / height2
            }
          }
          startTransition(() => {
            setAspectRatio(newAspectRatio)
            setIsLoading(false)
          })
        })
        .catch(() => {
          startTransition(() => {
            setAspectRatio(1)
            setIsLoading(false)
          })
        })
    }
  }, [logoFile])
  useEffect(() => {
    if (isSVG || !logoFile) {
      return
    }
    const img = imgRef.current
    if (img) {
      const handleLoad = () => {
        if (img.naturalWidth && img.naturalHeight) {
          startTransition(() => {
            setAspectRatio(img.naturalWidth / img.naturalHeight)
            setIsLoading(false)
          })
        } else {
          startTransition(() => {
            setAspectRatio(1)
            setIsLoading(false)
          })
        }
      }
      const handleError = () => {
        startTransition(() => {
          setAspectRatio(1)
          setIsLoading(false)
        })
      }
      img.addEventListener('load', handleLoad)
      img.addEventListener('error', handleError)
      if (img.complete) {
        img.removeEventListener('load', handleLoad)
        img.removeEventListener('error', handleError)
        if (img.naturalWidth && img.naturalHeight) {
          handleLoad()
        } else {
          handleError()
        }
      }
      return () => {
        img.removeEventListener('load', handleLoad)
        img.removeEventListener('error', handleError)
      }
    }
  }, [isSVG, logoFile])
  const width = Math.round(fixedHeight * aspectRatio)
  const height = fixedHeight
  const containerStyle = {
    ...style,
    width: style && style.width === '100%' ? '100%' : width,
    height: style && style.height === '100%' ? '100%' : height,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    background: 'transparent',
    position: 'relative',
    userSelect: 'none',
    WebkitUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none',
    pointerEvents: 'auto',
    opacity: isLoading ? 0 : 1,
    visibility: isLoading ? 'hidden' : 'visible',
    transition: 'opacity 0.2s ease-in-out',
  }
  const imageStyle = {
    width: '100%',
    height: '100%',
    objectFit: 'contain',
    pointerEvents: 'none',
    userSelect: 'none',
    WebkitUserDrag: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none',
    display: 'block',
  }
  const filterStyle = {
    filter: noColor
      ? `contrast(600%) grayscale(100%) ${invertColors ? 'invert(1)' : ''}`
      : invertColors
        ? 'invert(1) hue-rotate(180deg)'
        : '',
  }
  return /* @__PURE__ */ _jsx('div', {
    style: containerStyle,
    'aria-label': 'Logo Container',
    children: isSVG
      ? /* @__PURE__ */ _jsx('img', {
          src: logoFile,
          alt: 'Logo',
          style: { ...imageStyle, ...filterStyle },
          draggable: false,
          'aria-label': 'Logo',
        })
      : /* @__PURE__ */ _jsx('img', {
          ref: imgRef,
          src: logoFile,
          alt: 'Logo',
          style: { ...imageStyle, ...filterStyle },
          draggable: false,
          'aria-label': 'Logo',
        }),
  })
}
addPropertyControls(AspectRatioLogo, {
  logoFile: {
    type: ControlType.File,
    allowedFileTypes: ['svg', 'jpg', 'jpeg', 'png', 'gif', 'webp'],
    title: 'Logo',
  },
  fixedHeight: {
    type: ControlType.Number,
    title: 'Height',
    defaultValue: 80,
    min: 1,
    max: 512,
    step: 1,
    unit: 'px',
    displayStepper: true,
  },
  noColor: {
    type: ControlType.Boolean,
    title: 'No Color',
    description: 'Makes the logo black and white.',
    defaultValue: false,
    enabledTitle: 'Yes',
    disabledTitle: 'No',
  },
  invertColors: {
    type: ControlType.Boolean,
    title: 'Invert',
    description: 'Use this to invert the colors.',
    defaultValue: false,
    enabledTitle: 'Yes',
    disabledTitle: 'No',
  },
})
AspectRatioLogo.displayName = 'Aspect Ratio Logo'

export { AspectRatioLogo }
