// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
import { DashedBorderFrame } from './chunk-R527CHIA.js'

// /:https://framerusercontent.com/modules/TPu1pAAYhsPAU5luoJni/Lx5v1caCvba8vQABIP18/ywmXeNfxF.js
import { jsx as _jsx } from 'react/jsx-runtime'
import {
  addFonts,
  addPropertyControls,
  ComponentViewportProvider,
  ControlType,
  cx,
  getFonts,
  SmartComponentScopedContainer,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS,
} from 'unframer'
import { LayoutGroup, motion, MotionConfigContext } from 'unframer'
import * as React from 'react'
import { useRef } from 'react'
var AnimatedDashedBorderFonts = getFonts(DashedBorderFrame)
var cycleOrder = [
  'dNbszlCS9',
  'yzIFdYlxZ',
  'tETbP_pro',
  'oSdwqWnmP',
  'NmV6whLcj',
  'PsAciZ2BM',
  'CLljGfTtP',
  'dmlAwRaBe',
  'HWEDASjkO',
  'yQxqYG67k',
]
var serializationHash = 'framer-X1mxQ'
var variantClassNames = {
  CLljGfTtP: 'framer-v-1mlrwuf',
  dmlAwRaBe: 'framer-v-yl5zu4',
  dNbszlCS9: 'framer-v-z8k7b0',
  HWEDASjkO: 'framer-v-8evypz',
  NmV6whLcj: 'framer-v-1nqlqan',
  oSdwqWnmP: 'framer-v-1qeerv',
  PsAciZ2BM: 'framer-v-guq2e5',
  tETbP_pro: 'framer-v-p1jozm',
  yQxqYG67k: 'framer-v-1ffme69',
  yzIFdYlxZ: 'framer-v-1arqcmi',
}
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {}
  variants?.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]))
  return nextOverrides
}
var transition1 = { bounce: 0, delay: 0, duration: 0.4, type: 'spring' }
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext)
  const transition = value ?? config.transition
  const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
  return /* @__PURE__ */ _jsx(MotionConfigContext.Provider, {
    value: contextValue,
    children,
  })
}
var Variants = motion.create(React.Fragment)
var humanReadableVariantMap = {
  'Left Right': 'yQxqYG67k',
  'Right Bottom': 'yzIFdYlxZ',
  'Top Bottom': 'HWEDASjkO',
  'Top Left': 'dNbszlCS9',
  All: 'CLljGfTtP',
  Bottom: 'oSdwqWnmP',
  Left: 'tETbP_pro',
  Right: 'NmV6whLcj',
  Top: 'PsAciZ2BM',
}
var getProps = ({ height, id, width, ...props }) => {
  return {
    ...props,
    variant: humanReadableVariantMap[props.variant] ?? props.variant ?? 'dNbszlCS9',
  }
}
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join('-') + props.layoutDependency
  return variants.join('-')
}
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const fallbackRef = useRef(null)
  const refBinding = ref ?? fallbackRef
  const defaultLayoutId = React.useId()
  const { activeLocale, setLocale } = useLocaleInfo()
  const componentViewport = useComponentViewport()
  const { style, className, layoutId, variant, ...restProps } = getProps(props)
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: 'dNbszlCS9',
    ref: refBinding,
    variant,
    variantClassNames,
  })
  const layoutDependency = createLayoutDependency(props, variants)
  const sharedStyleClassNames = []
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)
  return /* @__PURE__ */ _jsx(LayoutGroup, {
    id: layoutId ?? defaultLayoutId,
    children: /* @__PURE__ */ _jsx(Variants, {
      animate: variants,
      initial: false,
      children: /* @__PURE__ */ _jsx(Transition, {
        value: transition1,
        children: /* @__PURE__ */ _jsx(motion.div, {
          ...restProps,
          ...gestureHandlers,
          className: cx(scopingClassNames, 'framer-z8k7b0', className, classNames),
          'data-framer-name': 'Top Left',
          layoutDependency,
          layoutId: 'dNbszlCS9',
          ref: refBinding,
          style: { ...style },
          ...addPropertyOverrides(
            {
              CLljGfTtP: { 'data-framer-name': 'All' },
              dmlAwRaBe: { 'data-framer-name': 'Left Right' },
              HWEDASjkO: { 'data-framer-name': 'Top Bottom' },
              NmV6whLcj: { 'data-framer-name': 'Right' },
              oSdwqWnmP: { 'data-framer-name': 'Bottom' },
              PsAciZ2BM: { 'data-framer-name': 'Top' },
              tETbP_pro: { 'data-framer-name': 'Left' },
              yQxqYG67k: { 'data-framer-name': 'Left Right' },
              yzIFdYlxZ: { 'data-framer-name': 'Right Bottom' },
            },
            baseVariant,
            gestureVariant,
          ),
          children: /* @__PURE__ */ _jsx(ComponentViewportProvider, {
            children: /* @__PURE__ */ _jsx(SmartComponentScopedContainer, {
              className: 'framer-ugmoae-container',
              isAuthoredByUser: true,
              isModuleExternal: true,
              layoutDependency,
              layoutId: 'EHPmwsEKd-container',
              nodeId: 'EHPmwsEKd',
              rendersWithMotion: true,
              scopeId: 'ywmXeNfxF',
              children: /* @__PURE__ */ _jsx(DashedBorderFrame, {
                animation: {
                  animated: true,
                  direction: 'clockwise',
                  speed: 2,
                },
                borderColor: 'var(--token-ab91763a-bd8d-4b8f-92c1-f89e2462855c, rgb(28, 28, 28))',
                borderRadius: 0,
                borderWidth: 1,
                bottom: false,
                dashLength: 12,
                gapLength: 6,
                height: '100%',
                id: 'EHPmwsEKd',
                layoutId: 'EHPmwsEKd',
                left: true,
                right: false,
                style: {
                  height: '100%',
                  width: '100%',
                },
                top: true,
                width: '100%',
                ...addPropertyOverrides(
                  {
                    CLljGfTtP: {
                      bottom: true,
                      right: true,
                    },
                    dmlAwRaBe: {
                      right: true,
                      top: false,
                    },
                    HWEDASjkO: {
                      bottom: true,
                      left: false,
                    },
                    NmV6whLcj: {
                      left: false,
                      right: true,
                      top: false,
                    },
                    oSdwqWnmP: {
                      bottom: true,
                      left: false,
                      top: false,
                    },
                    PsAciZ2BM: { left: false },
                    tETbP_pro: { top: false },
                    yQxqYG67k: {
                      right: true,
                      top: false,
                    },
                    yzIFdYlxZ: {
                      bottom: true,
                      left: false,
                      right: true,
                      top: false,
                    },
                  },
                  baseVariant,
                  gestureVariant,
                ),
              }),
            }),
          }),
        }),
      }),
    }),
  })
})
var css = [
  '@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }',
  '.framer-X1mxQ.framer-6eel1k, .framer-X1mxQ .framer-6eel1k { display: block; }',
  '.framer-X1mxQ.framer-z8k7b0 { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 360px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 499px; }',
  '.framer-X1mxQ .framer-ugmoae-container { flex: 1 0 0px; height: 100%; pointer-events: none; position: relative; width: 1px; }',
]
var FramerywmXeNfxF = withCSS(Component, css, 'framer-X1mxQ')
var stdin_default = FramerywmXeNfxF
FramerywmXeNfxF.displayName = 'Main Site Grid Border'
FramerywmXeNfxF.defaultProps = { height: 360, width: 499 }
addPropertyControls(FramerywmXeNfxF, {
  variant: {
    options: [
      'dNbszlCS9',
      'yzIFdYlxZ',
      'tETbP_pro',
      'oSdwqWnmP',
      'NmV6whLcj',
      'PsAciZ2BM',
      'CLljGfTtP',
      'dmlAwRaBe',
      'HWEDASjkO',
      'yQxqYG67k',
    ],
    optionTitles: [
      'Top Left',
      'Right Bottom',
      'Left',
      'Bottom',
      'Right',
      'Top',
      'All',
      'Left Right',
      'Top Bottom',
      'Left Right',
    ],
    title: 'Variant',
    type: ControlType.Enum,
  },
})
addFonts(FramerywmXeNfxF, [{ explicitInter: true, fonts: [] }, ...AnimatedDashedBorderFonts], {
  supportsExplicitInterCodegen: true,
})

export { stdin_default }
