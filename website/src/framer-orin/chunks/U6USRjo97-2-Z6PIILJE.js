// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project dfa04aa1c5bdec07 "Jet - SaaS Template (copy)", do not edit manually */
import { css, html, javascript } from './chunk-KXMOTYPB.js'
import { closeBrackets, closeBracketsKeymap } from './chunk-3JRLFNWB.js'
import {
  Annotation,
  ChangeDesc,
  ChangeSet,
  Decoration,
  Direction,
  EditorSelection,
  EditorState,
  EditorView,
  Facet,
  HighlightStyle,
  IndentContext,
  LanguageSupport,
  NodeProp,
  StateEffect,
  StateField,
  StreamLanguage,
  Text,
  Transaction,
  ViewPlugin,
  bracketMatching,
  combineConfig,
  countColumn,
  findClusterBreak,
  getIndentUnit,
  getIndentation,
  highlightActiveLine,
  highlightSpecialChars,
  highlightTree,
  indentString,
  indentUnit,
  keymap,
  lineNumbers,
  matchBrackets,
  syntaxHighlighting,
  syntaxTree,
  tags,
} from './chunk-GDAQQM7H.js'

// /:https://framerusercontent.com/modules/jyf9CHwKjeFqcEaDuO4g/wQHwKQ0C4mIQM5sy0tx7/U6USRjo97-2.js
import { jsx as e, jsxs as i2 } from 'react/jsx-runtime'
import { ComponentPresetsConsumer as r2 } from 'unframer'
import * as t2 from 'react'

// /:https://framerusercontent.com/modules/pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js
import {
  jsx as _jsx,
  jsxs as _jsxs,
  Fragment as _Fragment,
} from 'react/jsx-runtime'
import { motion } from 'unframer'

// /:https://framerusercontent.com/modules/SWAtenub3goqbKHfvwGg/1dCB1yMDMTFvIuREJ6ud/codesandbox_sandpack_react.js
import { jsxs, jsx, Fragment } from 'react/jsx-runtime'
import * as React3 from 'react'
import {
  createContext as createContext2,
  useContext as useContext2,
  useState as useState3,
  useId,
  useRef as useRef2,
  useCallback as useCallback2,
  useEffect as useEffect3,
  createElement as createElement2,
  forwardRef as forwardRef2,
} from 'react'

// /:https://framerusercontent.com/modules/aYGJCvSFoantRUzfEvdJ/tG3poD3JG0A2FUJhBjua/codesandbox_nodebox.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError(
      'Cannot initialize the same private elements twice on an object',
    )
  }
}
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver)
  }
  return descriptor.value
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value)
  } else {
    if (!descriptor.writable) {
      throw new TypeError('attempted to set read only private field')
    }
    descriptor.value = value
  }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError(
      'attempted to ' + action + ' private field on non-instance',
    )
  }
  return privateMap.get(receiver)
}
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, 'get')
  return _class_apply_descriptor_get(receiver, descriptor)
}
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap)
  privateMap.set(obj, value)
}
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, 'set')
  _class_apply_descriptor_set(receiver, descriptor, value)
  return value
}
function _class_private_method_get(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError('attempted to get private field on non-instance')
  }
  return fn
}
function _class_private_method_init(obj, privateSet) {
  _check_private_redeclaration(obj, privateSet)
  privateSet.add(obj)
}
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true,
    })
  } else {
    obj[key] = value
  }
  return obj
}
var __create = Object.create
var __defProp = Object.defineProperty
var __getOwnPropDesc = Object.getOwnPropertyDescriptor
var __getOwnPropNames = Object.getOwnPropertyNames
var __getProtoOf = Object.getPrototypeOf
var __hasOwnProp = Object.prototype.hasOwnProperty
var __defNormalProp = (obj, key, value) =>
  key in obj
    ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value,
      })
    : (obj[key] = value)
var __commonJS = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
      mod.exports
    )
  }
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        })
  }
  return to
}
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
)
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== 'symbol' ? key + '' : key, value)
  return value
}
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj)) throw TypeError('Cannot ' + msg)
}
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, 'read from private field')
  return getter ? getter.call(obj) : member.get(obj)
}
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError('Cannot add the same private member more than once')
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value)
}
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, 'write to private field')
  setter ? setter.call(obj, value) : member.set(obj, value)
  return value
}
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, 'access private method')
  return method
}
var require_pad = __commonJS({
  '../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js'(
    exports,
    module,
  ) {
    module.exports = function pad(num, size) {
      var s2 = '000000000' + num
      return s2.substr(s2.length - size)
    }
  },
})
var require_fingerprint_browser = __commonJS({
  '../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js'(
    exports,
    module,
  ) {
    module.exports = function fingerprint() {
      return Math.random().toString(16).slice(2)
    }
  },
})
var require_getRandomValue_browser = __commonJS({
  '../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js'(
    exports,
    module,
  ) {
    var getRandomValue
    var crypto2 =
      (typeof window !== 'undefined' && (window.crypto || window.msCrypto)) ||
      (typeof self !== 'undefined' && self.crypto)
    if (crypto2) {
      lim = Math.pow(2, 32) - 1
      getRandomValue = function () {
        return Math.abs(crypto2.getRandomValues(new Uint32Array(1))[0] / lim)
      }
    } else {
      getRandomValue = Math.random
    }
    var lim
    module.exports = getRandomValue
  },
})
var require_cuid = __commonJS({
  '../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js'(
    exports,
    module,
  ) {
    var fingerprint = require_fingerprint_browser()
    var pad = require_pad()
    var getRandomValue = require_getRandomValue_browser()
    var c3 = 0
    var blockSize = 4
    var base = 36
    var discreteValues = Math.pow(base, blockSize)
    function randomBlock() {
      return pad(
        ((getRandomValue() * discreteValues) << 0).toString(base),
        blockSize,
      )
    }
    function safeCounter() {
      c3 = c3 < discreteValues ? c3 : 0
      c3++
      return c3 - 1
    }
    function cuid3() {
      var letter = 'c',
        timestamp = /* @__PURE__ */ /* @__PURE__ */ new Date()
          .getTime()
          .toString(base),
        counter2 = pad(safeCounter().toString(base), blockSize),
        print = fingerprint(),
        random = randomBlock() + randomBlock()
      return letter + timestamp + counter2 + print + random
    }
    cuid3.slug = function slug() {
      var date = /* @__PURE__ */ /* @__PURE__ */ new Date()
          .getTime()
          .toString(36),
        counter2 = safeCounter().toString(36).slice(-4),
        print = fingerprint().slice(0, 1) + fingerprint().slice(-1),
        random = randomBlock().slice(-2)
      return date.slice(-2) + counter2 + print + random
    }
    cuid3.isCuid = function isCuid(stringToCheck) {
      if (typeof stringToCheck !== 'string') return false
      if (stringToCheck.startsWith('c')) return true
      return false
    }
    cuid3.isSlug = function isSlug(stringToCheck) {
      if (typeof stringToCheck !== 'string') return false
      var stringLength = stringToCheck.length
      if (stringLength >= 7 && stringLength <= 10) return true
      return false
    }
    cuid3.fingerprint = fingerprint
    module.exports = cuid3
  },
})
var require_createDeferredExecutor = __commonJS({
  '../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js'(
    exports,
  ) {
    'use strict'
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.createDeferredExecutor = void 0
    function createDeferredExecutor() {
      const executor = (resolve, reject) => {
        executor.state = 'pending'
        executor.resolve = (data) => {
          if (executor.state !== 'pending') {
            return
          }
          executor.result = data
          const onFulfilled = (value) => {
            executor.state = 'fulfilled'
            return value
          }
          return resolve(
            data instanceof Promise
              ? data
              : Promise.resolve(data).then(onFulfilled),
          )
        }
        executor.reject = (reason) => {
          if (executor.state !== 'pending') {
            return
          }
          queueMicrotask(() => {
            executor.state = 'rejected'
          })
          return reject((executor.rejectionReason = reason))
        }
      }
      return executor
    }
    exports.createDeferredExecutor = createDeferredExecutor
  },
})
var require_DeferredPromise = __commonJS({
  '../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js'(
    exports,
  ) {
    'use strict'
    var _executor, _decorate, _class
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.DeferredPromise = void 0
    var createDeferredExecutor_1 = require_createDeferredExecutor()
    var DeferredPromise4 =
      ((_executor = /* @__PURE__ */ new WeakMap()),
      (_decorate = /* @__PURE__ */ new WeakSet()),
      (_class = class extends Promise {
        get state() {
          return _class_private_field_get(this, _executor).state
        }
        get rejectionReason() {
          return _class_private_field_get(this, _executor).rejectionReason
        }
        then(onFulfilled, onRejected) {
          return _class_private_method_get(this, _decorate, decorate).call(
            this,
            super.then(onFulfilled, onRejected),
          )
        }
        catch(onRejected) {
          return _class_private_method_get(this, _decorate, decorate).call(
            this,
            super.catch(onRejected),
          )
        }
        finally(onfinally) {
          return _class_private_method_get(this, _decorate, decorate).call(
            this,
            super.finally(onfinally),
          )
        }
        constructor(executor = null) {
          const deferredExecutor = (0,
          createDeferredExecutor_1.createDeferredExecutor)()
          super((originalResolve, originalReject) => {
            deferredExecutor(originalResolve, originalReject)
            executor === null || executor === void 0
              ? void 0
              : executor(deferredExecutor.resolve, deferredExecutor.reject)
          })
          _class_private_method_init(this, _decorate)
          _class_private_field_init(this, _executor, {
            writable: true,
            value: void 0,
          })
          _define_property(this, 'resolve', void 0)
          _define_property(this, 'reject', void 0)
          _class_private_field_set(this, _executor, deferredExecutor)
          this.resolve = _class_private_field_get(this, _executor).resolve
          this.reject = _class_private_field_get(this, _executor).reject
        }
      }),
      _class)
    exports.DeferredPromise = DeferredPromise4
    function decorate(promise) {
      return Object.defineProperties(promise, {
        resolve: { configurable: true, value: this.resolve },
        reject: { configurable: true, value: this.reject },
      })
    }
  },
})
var require_build = __commonJS({
  '../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js'(
    exports,
  ) {
    'use strict'
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o2, m2, k2, k22) {
            if (k22 === void 0) k22 = k2
            var desc = Object.getOwnPropertyDescriptor(m2, k2)
            if (
              !desc ||
              ('get' in desc
                ? !m2.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m2[k2]
                },
              }
            }
            Object.defineProperty(o2, k22, desc)
          }
        : function (o2, m2, k2, k22) {
            if (k22 === void 0) k22 = k2
            o2[k22] = m2[k2]
          })
    var __exportStar =
      (exports && exports.__exportStar) ||
      function (m2, exports2) {
        for (var p2 in m2)
          if (
            p2 !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports2, p2)
          )
            __createBinding(exports2, m2, p2)
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    __exportStar(require_createDeferredExecutor(), exports)
    __exportStar(require_DeferredPromise(), exports)
  },
})
var require_MemoryLeakError = __commonJS({
  '../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js'(
    exports,
  ) {
    'use strict'
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.MemoryLeakError = void 0
    var MemoryLeakError = class extends Error {
      constructor(emitter, type, count) {
        super(
          `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`,
        )
        _define_property(this, 'emitter', void 0)
        _define_property(this, 'type', void 0)
        _define_property(this, 'count', void 0)
        this.emitter = emitter
        this.type = type
        this.count = count
        this.name = 'MaxListenersExceededWarning'
      }
    }
    exports.MemoryLeakError = MemoryLeakError
  },
})
var require_Emitter = __commonJS({
  '../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js'(
    exports,
  ) {
    'use strict'
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.Emitter = void 0
    var MemoryLeakError_1 = require_MemoryLeakError()
    var _events,
      _maxListeners,
      _hasWarnedAboutPotentialMemortyLeak,
      _getListeners,
      getListeners_fn,
      _removeListener,
      removeListener_fn,
      _wrapOnceListener,
      wrapOnceListener_fn,
      _internalEmit,
      internalEmit_fn
    var _Emitter = class {
      static listenerCount(emitter, eventName) {
        return emitter.listenerCount(eventName)
      }
      setMaxListeners(maxListeners) {
        __privateSet(this, _maxListeners, maxListeners)
        return this
      }
      getMaxListeners() {
        return __privateGet(this, _maxListeners)
      }
      eventNames() {
        return Array.from(__privateGet(this, _events).keys())
      }
      emit(eventName, ...data) {
        const listeners = __privateMethod(
          this,
          _getListeners,
          getListeners_fn,
        ).call(this, eventName)
        listeners.forEach((listener) => {
          listener.apply(this, data)
        })
        return listeners.length > 0
      }
      addListener(eventName, listener) {
        __privateMethod(this, _internalEmit, internalEmit_fn).call(
          this,
          'newListener',
          eventName,
          listener,
        )
        const nextListeners = __privateMethod(
          this,
          _getListeners,
          getListeners_fn,
        )
          .call(this, eventName)
          .concat(listener)
        __privateGet(this, _events).set(eventName, nextListeners)
        if (
          __privateGet(this, _maxListeners) > 0 &&
          this.listenerCount(eventName) > __privateGet(this, _maxListeners) &&
          !__privateGet(this, _hasWarnedAboutPotentialMemortyLeak)
        ) {
          __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, true)
          const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(
            this,
            eventName,
            this.listenerCount(eventName),
          )
          console.warn(memoryLeakWarning)
        }
        return this
      }
      on(eventName, listener) {
        return this.addListener(eventName, listener)
      }
      once(eventName, listener) {
        return this.addListener(
          eventName,
          __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(
            this,
            eventName,
            listener,
          ),
        )
      }
      prependListener(eventName, listener) {
        const listeners = __privateMethod(
          this,
          _getListeners,
          getListeners_fn,
        ).call(this, eventName)
        if (listeners.length > 0) {
          const nextListeners = [listener].concat(listeners)
          __privateGet(this, _events).set(eventName, nextListeners)
        } else {
          __privateGet(this, _events).set(eventName, listeners.concat(listener))
        }
        return this
      }
      prependOnceListener(eventName, listener) {
        return this.prependListener(
          eventName,
          __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(
            this,
            eventName,
            listener,
          ),
        )
      }
      removeListener(eventName, listener) {
        const listeners = __privateMethod(
          this,
          _getListeners,
          getListeners_fn,
        ).call(this, eventName)
        if (listeners.length > 0) {
          __privateMethod(this, _removeListener, removeListener_fn).call(
            this,
            listeners,
            listener,
          )
          __privateGet(this, _events).set(eventName, listeners)
          __privateMethod(this, _internalEmit, internalEmit_fn).call(
            this,
            'removeListener',
            eventName,
            listener,
          )
        }
        return this
      }
      off(eventName, listener) {
        return this.removeListener(eventName, listener)
      }
      removeAllListeners(eventName) {
        if (eventName) {
          __privateGet(this, _events).delete(eventName)
        } else {
          __privateGet(this, _events).clear()
        }
        return this
      }
      listeners(eventName) {
        return Array.from(
          __privateMethod(this, _getListeners, getListeners_fn).call(
            this,
            eventName,
          ),
        )
      }
      listenerCount(eventName) {
        return __privateMethod(this, _getListeners, getListeners_fn).call(
          this,
          eventName,
        ).length
      }
      rawListeners(eventName) {
        return this.listeners(eventName)
      }
      constructor() {
        __privateAdd(this, _getListeners)
        __privateAdd(this, _removeListener)
        __privateAdd(this, _wrapOnceListener)
        __privateAdd(this, _internalEmit)
        __privateAdd(this, _events, void 0)
        __privateAdd(this, _maxListeners, void 0)
        __privateAdd(this, _hasWarnedAboutPotentialMemortyLeak, void 0)
        __privateSet(this, _events, /* @__PURE__ */ new Map())
        __privateSet(this, _maxListeners, _Emitter.defaultMaxListeners)
        __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, false)
      }
    }
    var Emitter2 = _Emitter
    _events = /* @__PURE__ */ new WeakMap()
    _maxListeners = /* @__PURE__ */ new WeakMap()
    _hasWarnedAboutPotentialMemortyLeak = /* @__PURE__ */ new WeakMap()
    _getListeners = /* @__PURE__ */ new WeakSet()
    getListeners_fn = function (eventName) {
      return __privateGet(this, _events).get(eventName) || []
    }
    _removeListener = /* @__PURE__ */ new WeakSet()
    removeListener_fn = function (listeners, listener) {
      const index = listeners.indexOf(listener)
      if (index > -1) {
        listeners.splice(index, 1)
      }
      return []
    }
    _wrapOnceListener = /* @__PURE__ */ new WeakSet()
    wrapOnceListener_fn = function (eventName, listener) {
      const onceListener = (...data) => {
        this.removeListener(eventName, onceListener)
        listener.apply(this, data)
      }
      return onceListener
    }
    _internalEmit = /* @__PURE__ */ new WeakSet()
    internalEmit_fn = function (internalEventName, eventName, listener) {
      this.emit(internalEventName, ...[eventName, listener])
    }
    __publicField(Emitter2, 'defaultMaxListeners', 10)
    exports.Emitter = Emitter2
  },
})
var require_lib = __commonJS({
  '../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js'(
    exports,
  ) {
    'use strict'
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o2, m2, k2, k22) {
            if (k22 === void 0) k22 = k2
            var desc = Object.getOwnPropertyDescriptor(m2, k2)
            if (
              !desc ||
              ('get' in desc
                ? !m2.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m2[k2]
                },
              }
            }
            Object.defineProperty(o2, k22, desc)
          }
        : function (o2, m2, k2, k22) {
            if (k22 === void 0) k22 = k2
            o2[k22] = m2[k2]
          })
    var __exportStar =
      (exports && exports.__exportStar) ||
      function (m2, exports2) {
        for (var p2 in m2)
          if (
            p2 !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports2, p2)
          )
            __createBinding(exports2, m2, p2)
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    __exportStar(require_Emitter(), exports)
    __exportStar(require_MemoryLeakError(), exports)
  },
})
var import_cuid = __toESM(require_cuid())
var POSITIONALS_EXP = /(%?)(%([sdjo]))/g
function serializePositional(positional, flag) {
  switch (flag) {
    case 's':
      return positional
    case 'd':
    case 'i':
      return Number(positional)
    case 'j':
      return JSON.stringify(positional)
    case 'o': {
      if (typeof positional === 'string') {
        return positional
      }
      const json = JSON.stringify(positional)
      if (json === '{}' || json === '[]' || /^\[object .+?\]$/.test(json)) {
        return positional
      }
      return json
    }
  }
}
function format(message, ...positionals) {
  if (positionals.length === 0) {
    return message
  }
  let positionalIndex = 0
  let formattedMessage = message.replace(
    POSITIONALS_EXP,
    (match, isEscaped, _, flag) => {
      const positional = positionals[positionalIndex]
      const value = serializePositional(positional, flag)
      if (!isEscaped) {
        positionalIndex++
        return value
      }
      return match
    },
  )
  if (positionalIndex < positionals.length) {
    formattedMessage += ` ${positionals.slice(positionalIndex).join(' ')}`
  }
  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%')
  return formattedMessage
}
var STACK_FRAMES_TO_IGNORE = 2
function cleanErrorStack(error) {
  if (!error.stack) {
    return
  }
  const nextStack = error.stack.split('\n')
  nextStack.splice(1, STACK_FRAMES_TO_IGNORE)
  error.stack = nextStack.join('\n')
}
var InvariantError = class extends Error {
  constructor(message, ...positionals) {
    super(message)
    this.message = message
    this.name = 'Invariant Violation'
    this.message = format(message, ...positionals)
    cleanErrorStack(this)
  }
}
var invariant = (predicate, message, ...positionals) => {
  if (!predicate) {
    throw new InvariantError(message, ...positionals)
  }
}
invariant.as = (ErrorConstructor, predicate, message, ...positionals) => {
  if (!predicate) {
    const isConstructor = ErrorConstructor.prototype.name != null
    const error = isConstructor
      ? new ErrorConstructor(format(message, positionals))
      : ErrorConstructor(format(message, positionals))
    throw error
  }
}
var import_deferred_promise = __toESM(require_build())
var FLAG = void 0
var DEFAULT = '\x1B[0m'
var GREEN = '\x1B[32;1m'
var RED = '\x1B[31m'
var BLUE = '\x1B[34m'
var YELLOW = '\x1B[33;1m'
var MAGENTA = '\x1B[35;1m'
var CYAN = '\x1B[36;1m'
var COLOR_SCOPE = {
  preview: YELLOW,
  emulator: MAGENTA,
  runtime: CYAN,
  bridge: BLUE,
  'runtime:worker': CYAN,
}
function createDebug(scope) {
  return function debug3(message, ...data) {
    if (FLAG === 'true') {
      const direction = () => {
        if (message.includes('sender')) return `${GREEN}sender`
        if (message.includes('receiver')) return `${RED}receiver`
        return ''
      }
      const cleanMessage = message.replace(/\[.+\]:/, '')
      console.debug(
        `${COLOR_SCOPE[scope]}${scope}:${direction()}${DEFAULT}:${cleanMessage}`,
        ...data,
      )
    }
  }
}
var debug = createDebug('emulator')
var MessageSender = class {
  async handshake() {
    const handshakePromise = new import_deferred_promise.DeferredPromise()
    await this.receiverReadyPromise
    debug('[message-sender]: sending handshake')
    this.target.postMessage({ type: 'internal/handshake' }, '*', [
      this.channel.port2,
    ])
    this.on('internal/handshake/done', () => {
      handshakePromise.resolve()
      clearTimeout(rejectionTimeout)
    })
    const rejectionTimeout = setTimeout(() => {
      handshakePromise.reject(new Error('MessageSender: Handshake timeout'))
    }, 5e3)
    return handshakePromise
  }
  on(event, listener, options) {
    debug('[message-sender]: add listener "%s"', event)
    this.emitter.addEventListener(
      event,
      (message) => {
        if (message instanceof MessageEvent) {
          listener(message)
        }
      },
      options,
    )
  }
  off(event, listener, options) {
    this.emitter.removeEventListener(event, listener, options)
  }
  async send(event, ...data) {
    const operationPromise = new import_deferred_promise.DeferredPromise()
    const operationId = (0, import_cuid.default)()
    const payload = data[0] || {}
    debug('[message-sender]: send "%s" (%s)', event, operationId, payload)
    this.receiverPort.postMessage({
      type: event,
      payload: { operationId, payload },
    })
    debug(
      '[message-sender]: adding done listener for "%s" (%s)',
      event,
      operationId,
    )
    const handleOperationDone = (doneEvent) => {
      const { data: data2 } = doneEvent
      if (data2.operationId === operationId) {
        const listenerPayload = data2.listenerPayload || {}
        debug(
          '[message-sender]: resolving "%s (%s) promise!',
          event,
          operationId,
        )
        operationPromise.resolve({
          ...listenerPayload,
          operationId: data2.operationId,
        })
      }
    }
    const handleOperationFailed = (failEvent) => {
      const { data: data2 } = failEvent
      if (data2.operationId === operationId) {
        debug(
          '[message-sender]: rejecting "%s (%s) promise!',
          event,
          operationId,
        )
        operationPromise.reject(data2.error)
      }
    }
    this.on('internal/operation/done', handleOperationDone)
    this.on('internal/operation/failed', handleOperationFailed)
    return operationPromise.finally(() => {
      this.emitter.removeEventListener(
        'internal/operation/done',
        handleOperationDone,
      )
      this.emitter.removeEventListener(
        'internal/operation/failed',
        handleOperationFailed,
      )
    })
  }
  constructor(target) {
    _define_property(this, 'emitter', void 0)
    _define_property(this, 'channel', void 0)
    _define_property(this, 'receiverPort', void 0)
    _define_property(this, 'receiverReadyPromise', void 0)
    this.target = target
    this.emitter = new EventTarget()
    this.channel = new MessageChannel()
    this.receiverPort = this.channel.port1
    const receiverReadyPromise = new import_deferred_promise.DeferredPromise()
    const handshakeListener = (message) => {
      if (message.data.type === 'internal/ready') {
        debug('[message-sender]: runtime is ready')
        receiverReadyPromise.resolve()
      }
    }
    window.addEventListener('message', handshakeListener)
    receiverReadyPromise.then(() => {
      window.removeEventListener('message', handshakeListener)
    })
    this.receiverReadyPromise = receiverReadyPromise
    this.receiverPort.onmessage = (evt) => {
      const data = evt.data
      if (data.type != null) {
        debug(
          '[message-sender]: emitting "%s" event...',
          data.type,
          data.payload,
        )
        this.emitter.dispatchEvent(
          new MessageEvent(data.type, { data: data.payload }),
        )
      }
    }
  }
}
var import_deferred_promise3 = __toESM(require_build())
var import_cuid2 = __toESM(require_cuid())
var FileSystemApi = class {
  async init(files) {
    await this.channel.send('fs/init', { files })
  }
  async readFile(path, encoding) {
    const response = await this.channel
      .send('fs/readFile', { path, encoding })
      .catch((error) => {
        throw new Error(format('Failed to read file at path "%s"', path), {
          cause: error,
        })
      })
    if (!response) {
      throw new Error('File not found')
    }
    return response.data
  }
  async writeFile(path, content, options) {
    let encoding = void 0
    let recursive = false
    if (typeof options === 'object') {
      encoding = options.encoding
      recursive = !!options.recursive
    } else if (typeof options === 'string') {
      encoding = options
    }
    await this.channel
      .send('fs/writeFile', { path, content, encoding, recursive })
      .catch((error) => {
        throw new Error(format('Failed to write file at path "%s"', path), {
          cause: error,
        })
      })
  }
  async readdir(path) {
    const response = await this.channel
      .send('fs/readdir', { path })
      .catch((error) => {
        throw new Error(format('Failed to read directory at path "%s"', path), {
          cause: error,
        })
      })
    if (!response) {
      throw new Error('Directory not found')
    }
    return response.data
  }
  async mkdir(path, options) {
    const recursive = !!(options === null || options === void 0
      ? void 0
      : options.recursive)
    await this.channel.send('fs/mkdir', { path, recursive }).catch((error) => {
      throw new Error(format('Failed to make directory at path "%s"', path), {
        cause: error,
      })
    })
  }
  async stat(path) {
    const response = await this.channel
      .send('fs/stat', { path })
      .catch((error) => {
        throw new Error(format('Failed to stat file at path "%s"', path), {
          cause: error,
        })
      })
    if (!response) {
      throw new Error('File not found')
    }
    return response.data
  }
  async rm(path, options) {
    const { force, recursive } = options || {}
    await this.channel
      .send('fs/rm', { path, force, recursive })
      .catch((error) => {
        throw new Error(format('Failed to remove file at path "%s"', path), {
          cause: error,
        })
      })
  }
  async watch(includes, excludes, listener) {
    const watcherId = (0, import_cuid2.default)()
    await this.channel.send('fs/watch', { watcherId, includes, excludes })
    this.channel.on('fs/watch-event', ({ data }) => {
      if (data.watcherId === watcherId && listener) {
        const evt = { ...data }
        delete evt.watcherId
        listener(evt)
      }
    })
    return { dispose: () => this.channel.send('fs/unwatch', { watcherId }) }
  }
  constructor(channel) {
    this.channel = channel
  }
}
var import_strict_event_emitter = __toESM(require_lib())
var ShellApi = class {
  create() {
    return new ShellProcess(this.channel)
  }
  constructor(channel) {
    this.channel = channel
  }
}
var ShellProcess = class {
  forwardStdEvents() {
    this.channel.on('worker/tty', (message) => {
      const { data } = message
      if (data.workerId !== this.id) {
        return
      }
      switch (data.payload.type) {
        case 'out': {
          this.stdout.emit('data', data.payload.data)
          break
        }
        case 'err': {
          this.stderr.emit('data', data.payload.data)
          break
        }
      }
    })
  }
  async runCommand(command2, args, options = {}) {
    invariant(
      !this.id,
      'Failed to run "runCommand" on a ShellProcess: there is already a process running.',
    )
    const shellInfo = await this.channel.send('shell/runCommand', {
      command: command2,
      args,
      options,
    })
    invariant(
      shellInfo,
      'Failed to run "runCommand" on a ShellProcess: was not able to retrieve a running process.',
    )
    this.id = shellInfo.id
    this.state = 'running'
    return shellInfo
  }
  async on(message, listener) {
    switch (message) {
      case 'progress': {
        this.channel.on('worker/progress', ({ data }) => {
          listener(data.status)
        })
        return
      }
      case 'exit': {
        this.channel.on('worker/exit', ({ data }) => {
          if (data.workerId === this.id) {
            listener(data.exitCode, data.error)
          }
        })
        return
      }
    }
  }
  async kill() {
    invariant(
      this.id,
      'Failed to run "kill" on a ShellProcess: there is no process running. Did you forget to run it?',
    )
    this.state = 'idle'
    await this.channel.send('shell/exit', { id: this.id }).catch((error) => {
      throw new Error(format('Failed to kill shell with ID "%s"', this.id), {
        cause: error,
      })
    })
    this.id = void 0
  }
  constructor(channel) {
    _define_property(this, 'id', void 0)
    _define_property(this, 'state', void 0)
    _define_property(this, 'stdout', void 0)
    _define_property(this, 'stderr', void 0)
    _define_property(this, 'stdin', void 0)
    this.channel = channel
    this.state = 'running'
    this.stdout = new import_strict_event_emitter.Emitter()
    this.stderr = new import_strict_event_emitter.Emitter()
    this.stdin = {
      write: (data) => {
        if (!this.id) {
          throw new Error(
            'Failed to write to stdin, no process is currently running',
          )
        }
        return this.channel.send('shell/stdin', {
          data,
          workerId: this.id,
        })
      },
    }
    this.forwardStdEvents()
  }
}
var import_deferred_promise2 = __toESM(require_build())
var TIMEOUT = 2e4
var PreviewApi = class {
  async waitFor(payload, predicate, timeout = TIMEOUT) {
    const readyPromise = new import_deferred_promise2.DeferredPromise()
    const rejectTimeout = setTimeout(() => {
      readyPromise.reject()
    }, timeout)
    const previewInformation = await this.channel
      .send('preview/get/info', payload)
      .catch((error) => {
        readyPromise.reject(
          new Error(
            format(
              'Failed to look up preview information for shell ID "%s" (port: %d)',
              payload.sourceShellId,
              payload.port,
            ),
          ),
        )
      })
    const foundPreview = previewInformation && predicate(previewInformation)
    if (foundPreview) {
      readyPromise.resolve({
        url: previewInformation.url,
        port: previewInformation.port,
        sourceShellId: previewInformation.sourceShellId,
      })
    }
    this.channel.on('preview/port/ready', ({ data }) => {
      if (!foundPreview && predicate(data)) {
        readyPromise.resolve({
          url: data.url,
          port: data.port,
          sourceShellId: data.sourceShellId,
        })
      }
    })
    return readyPromise.finally(() => {
      clearTimeout(rejectTimeout)
    })
  }
  async getByShellId(sourceShellId, timeout) {
    return this.waitFor(
      { sourceShellId },
      (data) => data.sourceShellId === sourceShellId,
      timeout,
    ).catch((error) => {
      throw new Error(format('Failed to get shell by ID "%s"', sourceShellId), {
        cause: error,
      })
    })
  }
  async waitForPort(port, timeout) {
    return this.waitFor({ port }, (data) => data.port === port, timeout).catch(
      (error) => {
        throw new Error(format('Failed to await port %d', port), {
          cause: error,
        })
      },
    )
  }
  constructor(channel) {
    this.channel = channel
  }
}
var DEFAULT_RUNTIME_URL = 'https://nodebox-runtime.codesandbox.io'
var debug2 = createDebug('emulator')
var Nodebox = class {
  async connect() {
    const { iframe, cdnUrl } = this.options
    debug2('[message-sender]: Connecting to node emulator...')
    const connectionPromise = new import_deferred_promise3.DeferredPromise()
    if (!this.url) {
      connectionPromise.reject(
        new Error(
          'Nodebox URL is missing. Did you forget to provide it when creating this Nodebox instance?',
        ),
      )
    }
    invariant(
      iframe.contentWindow,
      'Failed to create a MessageChannel with the Nodebox iframe: no content window found',
    )
    this.channel = new MessageSender(iframe.contentWindow)
    const frameLoadPromise = new import_deferred_promise3.DeferredPromise()
    iframe.setAttribute('src', this.url)
    iframe.addEventListener(
      'load',
      () => {
        frameLoadPromise.resolve()
      },
      { once: true },
    )
    iframe.addEventListener(
      'error',
      (event) => {
        frameLoadPromise.reject(event.error)
      },
      { once: true },
    )
    await frameLoadPromise
    debug2('[message-sender]: IFrame loaded...')
    await this.channel.handshake()
    debug2('[message-sender]: Handshake completed...')
    this.channel.send('connect', { cdnUrl })
    this.channel.on('runtime/ready', () => {
      connectionPromise.resolve()
    })
    return connectionPromise.then(() => {
      debug2('[message-sender]: Connected to runtime...')
      this.isConnected = true
    })
  }
  get fs() {
    invariant(
      this.isConnected,
      'Failed to access the File System API: consumer is not connected. Did you forget to run "connect()"?',
    )
    if (this.fileSystemApi) {
      return this.fileSystemApi
    }
    this.fileSystemApi = new FileSystemApi(this.channel)
    return this.fileSystemApi
  }
  get shell() {
    invariant(
      this.isConnected,
      'Failed to access the Shell API: consumer is not connected. Did you forget to run "connect()"?',
    )
    if (this.shellApi) {
      return this.shellApi
    }
    this.shellApi = new ShellApi(this.channel)
    return this.shellApi
  }
  get preview() {
    invariant(
      this.isConnected,
      'Failed to access the Preview API: consumer is not connected. Did you forget to run "connect()"?',
    )
    if (this.previewApi) {
      return this.previewApi
    }
    this.previewApi = new PreviewApi(this.channel)
    return this.previewApi
  }
  constructor(options) {
    _define_property(this, 'channel', null)
    _define_property(this, 'isConnected', void 0)
    _define_property(this, 'url', void 0)
    _define_property(this, 'fileSystemApi', null)
    _define_property(this, 'shellApi', null)
    _define_property(this, 'previewApi', null)
    this.options = options
    invariant(
      this.options.iframe,
      'Failed to create a Nodebox: expected "iframe" argument to be a reference to an <iframe> element but got %j',
      this.options.iframe,
    )
    this.url = this.options.runtimeUrl || DEFAULT_RUNTIME_URL
    this.isConnected = false
  }
}
var INJECT_MESSAGE_TYPE = 'INJECT_AND_INVOKE'
var PREVIEW_LOADED_MESSAGE_TYPE = 'PREVIEW_LOADED'

// /:https://framerusercontent.com/modules/fn2r53K2SixLM3ktuGOw/RuUPgcbiEmJMBX7jVYHo/codesandbox_sandpack_client.js
var __create2 = Object.create
var __defProp2 = Object.defineProperty
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor
var __getOwnPropNames2 = Object.getOwnPropertyNames
var __getProtoOf2 = Object.getPrototypeOf
var __hasOwnProp2 = Object.prototype.hasOwnProperty
var __esm = (fn, res) =>
  function __init() {
    return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])((fn = 0))), res
  }
var __commonJS2 = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames2(cb)[0]])(
          (mod = { exports: {} }).exports,
          mod,
        ),
      mod.exports
    )
  }
var __export = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true })
}
var __copyProps2 = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
        })
  }
  return to
}
var __toESM2 = (mod, isNodeMode, target) => (
  (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
  __copyProps2(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp2(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
)
function serializePositional2(positional, flag) {
  switch (flag) {
    case 's':
      return positional
    case 'd':
    case 'i':
      return Number(positional)
    case 'j':
      return JSON.stringify(positional)
    case 'o': {
      if (typeof positional === 'string') {
        return positional
      }
      const json = JSON.stringify(positional)
      if (json === '{}' || json === '[]' || /^\[object .+?\]$/.test(json)) {
        return positional
      }
      return json
    }
  }
}
function format2(message, ...positionals) {
  if (positionals.length === 0) {
    return message
  }
  let positionalIndex = 0
  let formattedMessage = message.replace(
    POSITIONALS_EXP2,
    (match, isEscaped, _, flag) => {
      const positional = positionals[positionalIndex]
      const value = serializePositional2(positional, flag)
      if (!isEscaped) {
        positionalIndex++
        return value
      }
      return match
    },
  )
  if (positionalIndex < positionals.length) {
    formattedMessage += ` ${positionals.slice(positionalIndex).join(' ')}`
  }
  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%')
  return formattedMessage
}
function cleanErrorStack2(error) {
  if (!error.stack) {
    return
  }
  const nextStack = error.stack.split('\n')
  nextStack.splice(1, STACK_FRAMES_TO_IGNORE2)
  error.stack = nextStack.join('\n')
}
var POSITIONALS_EXP2
var STACK_FRAMES_TO_IGNORE2
var InvariantError2
var invariant2
var init_lib = __esm({
  '../../node_modules/outvariant/lib/index.mjs'() {
    POSITIONALS_EXP2 = /(%?)(%([sdjo]))/g
    STACK_FRAMES_TO_IGNORE2 = 2
    InvariantError2 = class extends Error {
      constructor(message, ...positionals) {
        super(message)
        this.message = message
        this.name = 'Invariant Violation'
        this.message = format2(message, ...positionals)
        cleanErrorStack2(this)
      }
    }
    invariant2 = (predicate, message, ...positionals) => {
      if (!predicate) {
        throw new InvariantError2(message, ...positionals)
      }
    }
    invariant2.as = (ErrorConstructor, predicate, message, ...positionals) => {
      if (!predicate) {
        const isConstructor = ErrorConstructor.prototype.name != null
        const error = isConstructor
          ? new ErrorConstructor(format2(message, positionals))
          : ErrorConstructor(format2(message, positionals))
        throw error
      }
    }
  },
})
function __extends(d2, b2) {
  if (typeof b2 !== 'function' && b2 !== null)
    throw new TypeError(
      'Class extends value ' + String(b2) + ' is not a constructor or null',
    )
  extendStatics(d2, b2)
  function __() {
    this.constructor = d2
  }
  d2.prototype =
    b2 === null ? Object.create(b2) : ((__.prototype = b2.prototype), new __())
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2
      ? value
      : new P2(function (resolve) {
          resolve(value)
        })
  }
  return new (P2 || (P2 = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value))
      } catch (e2) {
        reject(e2)
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value))
      } catch (e2) {
        reject(e2)
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : adopt(result.value).then(fulfilled, rejected)
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next())
  })
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t3[0] & 1) throw t3[1]
        return t3[1]
      },
      trys: [],
      ops: [],
    },
    f2,
    y2,
    t3,
    g2
  return (
    (g2 = { next: verb(0), throw: verb(1), return: verb(2) }),
    typeof Symbol === 'function' &&
      (g2[Symbol.iterator] = function () {
        return this
      }),
    g2
  )
  function verb(n2) {
    return function (v2) {
      return step([n2, v2])
    }
  }
  function step(op) {
    if (f2) throw new TypeError('Generator is already executing.')
    while (_)
      try {
        if (
          ((f2 = 1),
          y2 &&
            (t3 =
              op[0] & 2
                ? y2['return']
                : op[0]
                  ? y2['throw'] || ((t3 = y2['return']) && t3.call(y2), 0)
                  : y2.next) &&
            !(t3 = t3.call(y2, op[1])).done)
        )
          return t3
        if (((y2 = 0), t3)) op = [op[0] & 2, t3.value]
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op
            break
          case 4:
            _.label++
            return { value: op[1], done: false }
          case 5:
            _.label++
            y2 = op[1]
            op = [0]
            continue
          case 7:
            op = _.ops.pop()
            _.trys.pop()
            continue
          default:
            if (
              !((t3 = _.trys), (t3 = t3.length > 0 && t3[t3.length - 1])) &&
              (op[0] === 6 || op[0] === 2)
            ) {
              _ = 0
              continue
            }
            if (op[0] === 3 && (!t3 || (op[1] > t3[0] && op[1] < t3[3]))) {
              _.label = op[1]
              break
            }
            if (op[0] === 6 && _.label < t3[1]) {
              _.label = t3[1]
              t3 = op
              break
            }
            if (t3 && _.label < t3[2]) {
              _.label = t3[2]
              _.ops.push(op)
              break
            }
            if (t3[2]) _.ops.pop()
            _.trys.pop()
            continue
        }
        op = body.call(thisArg, _)
      } catch (e2) {
        op = [6, e2]
        y2 = 0
      } finally {
        f2 = t3 = 0
      }
    if (op[0] & 5) throw op[1]
    return { value: op[0] ? op[1] : void 0, done: true }
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i3 = 0, l2 = from.length, ar; i3 < l2; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i3)
        ar[i3] = from[i3]
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from))
}
function nullthrows(value, err) {
  if (err === void 0) {
    err = 'Value is nullish'
  }
  invariant2(value != null, createError(err))
  return value
}
function createPackageJSON(dependencies, devDependencies, entry2) {
  if (dependencies === void 0) {
    dependencies = {}
  }
  if (devDependencies === void 0) {
    devDependencies = {}
  }
  if (entry2 === void 0) {
    entry2 = '/index.js'
  }
  return JSON.stringify(
    {
      name: 'sandpack-project',
      main: entry2,
      dependencies,
      devDependencies,
    },
    null,
    2,
  )
}
function addPackageJSONIfNeeded(files, dependencies, devDependencies, entry2) {
  var _a22, _b22
  var normalizedFilesPath = normalizePath(files)
  var packageJsonFile = normalizedFilesPath['/package.json']
  if (!packageJsonFile) {
    nullthrows(dependencies, DEPENDENCY_ERROR_MESSAGE)
    nullthrows(entry2, ENTRY_ERROR_MESSAGE)
    normalizedFilesPath['/package.json'] = {
      code: createPackageJSON(dependencies, devDependencies, entry2),
    }
    return normalizedFilesPath
  }
  if (packageJsonFile) {
    var packageJsonContent = JSON.parse(packageJsonFile.code)
    nullthrows(
      !(!dependencies && !packageJsonContent.dependencies),
      ENTRY_ERROR_MESSAGE,
    )
    if (dependencies) {
      packageJsonContent.dependencies = __assign(
        __assign(
          {},
          (_a22 = packageJsonContent.dependencies) !== null && _a22 !== void 0
            ? _a22
            : {},
        ),
        dependencies !== null && dependencies !== void 0 ? dependencies : {},
      )
    }
    if (devDependencies) {
      packageJsonContent.devDependencies = __assign(
        __assign(
          {},
          (_b22 = packageJsonContent.devDependencies) !== null &&
            _b22 !== void 0
            ? _b22
            : {},
        ),
        devDependencies !== null && devDependencies !== void 0
          ? devDependencies
          : {},
      )
    }
    if (entry2) {
      packageJsonContent.main = entry2
    }
    normalizedFilesPath['/package.json'] = {
      code: JSON.stringify(packageJsonContent, null, 2),
    }
  }
  return normalizedFilesPath
}
function extractErrorDetails(msg) {
  var _a22
  if (msg.title === 'SyntaxError') {
    var title = msg.title,
      path = msg.path,
      message = msg.message,
      line = msg.line,
      column = msg.column
    return { title, path, message, line, column }
  }
  var relevantStackFrame = getRelevantStackFrame(
    (_a22 = msg.payload) === null || _a22 === void 0 ? void 0 : _a22.frames,
  )
  if (!relevantStackFrame) {
    return { message: msg.message }
  }
  var errorInCode = getErrorInOriginalCode(relevantStackFrame)
  var errorLocation = getErrorLocation(relevantStackFrame)
  var errorMessage = formatErrorMessage(
    relevantStackFrame._originalFileName,
    msg.message,
    errorLocation,
    errorInCode,
  )
  return {
    message: errorMessage,
    title: msg.title,
    path: relevantStackFrame._originalFileName,
    line: relevantStackFrame._originalLineNumber,
    column: relevantStackFrame._originalColumnNumber,
  }
}
function getRelevantStackFrame(frames) {
  if (!frames) {
    return
  }
  return frames.find(function (frame) {
    return !!frame._originalFileName
  })
}
function getErrorLocation(errorFrame) {
  return errorFrame
    ? ' ('
        .concat(errorFrame._originalLineNumber, ':')
        .concat(errorFrame._originalColumnNumber, ')')
    : ''
}
function getErrorInOriginalCode(errorFrame) {
  var lastScriptLine =
    errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1]
  var numberOfLineNumberCharacters = lastScriptLine.lineNumber.toString().length
  var leadingCharacterOffset = 2
  var barSeparatorCharacterOffset = 3
  var extraLineLeadingSpaces =
    leadingCharacterOffset +
    numberOfLineNumberCharacters +
    barSeparatorCharacterOffset +
    errorFrame._originalColumnNumber
  return errorFrame._originalScriptCode.reduce(function (result, scriptLine) {
    var leadingChar = scriptLine.highlight ? '>' : ' '
    var lineNumber =
      scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters
        ? ''.concat(scriptLine.lineNumber)
        : ' '.concat(scriptLine.lineNumber)
    var extraLine = scriptLine.highlight
      ? '\n' + ' '.repeat(extraLineLeadingSpaces) + '^'
      : ''
    return (
      result + // accumulator
      '\n' +
      leadingChar + // > or " "
      ' ' +
      lineNumber + // line number on equal number of characters
      ' | ' +
      scriptLine.content + // code
      extraLine
    )
  }, '')
}
function formatErrorMessage(filePath, message, location2, errorInCode) {
  return ''
    .concat(filePath, ': ')
    .concat(message)
    .concat(location2, '\n')
    .concat(errorInCode)
}
var extendStatics
var __assign
var SandpackLogLevel
var createError
var DEPENDENCY_ERROR_MESSAGE
var ENTRY_ERROR_MESSAGE
var normalizePath
var init_utils_52664384 = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs'() {
    init_lib()
    extendStatics = function (d2, b2) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d22, b22) {
            d22.__proto__ = b22
          }) ||
        function (d22, b22) {
          for (var p2 in b22)
            if (Object.prototype.hasOwnProperty.call(b22, p2)) d22[p2] = b22[p2]
        }
      return extendStatics(d2, b2)
    }
    __assign = function () {
      __assign =
        Object.assign ||
        function __assign22(t3) {
          for (var s2, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
            s2 = arguments[i3]
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2)) t3[p2] = s2[p2]
          }
          return t3
        }
      return __assign.apply(this, arguments)
    }
    ;(function (SandpackLogLevel2) {
      SandpackLogLevel2[(SandpackLogLevel2['None'] = 0)] = 'None'
      SandpackLogLevel2[(SandpackLogLevel2['Error'] = 10)] = 'Error'
      SandpackLogLevel2[(SandpackLogLevel2['Warning'] = 20)] = 'Warning'
      SandpackLogLevel2[(SandpackLogLevel2['Info'] = 30)] = 'Info'
      SandpackLogLevel2[(SandpackLogLevel2['Debug'] = 40)] = 'Debug'
    })(SandpackLogLevel || (SandpackLogLevel = {}))
    createError = function (message) {
      return '[sandpack-client]: '.concat(message)
    }
    DEPENDENCY_ERROR_MESSAGE =
      '"dependencies" was not specified - provide either a package.json or a "dependencies" value'
    ENTRY_ERROR_MESSAGE =
      '"entry" was not specified - provide either a package.json with the "main" field or an "entry" value'
    normalizePath = function (path) {
      if (typeof path === 'string') {
        return path.startsWith('/') ? path : '/'.concat(path)
      }
      if (Array.isArray(path)) {
        return path.map(function (p2) {
          return p2.startsWith('/') ? p2 : '/'.concat(p2)
        })
      }
      if (typeof path === 'object' && path !== null) {
        return Object.entries(path).reduce(function (acc, _a22) {
          var key = _a22[0],
            content = _a22[1]
          var fileName = key.startsWith('/') ? key : '/'.concat(key)
          acc[fileName] = content
          return acc
        }, {})
      }
      return null
    }
  },
})
function find(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar)) return key
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp
  if (foo === bar) return true
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date) return foo.getTime() === bar.getTime()
    if (ctor === RegExp) return foo.toString() === bar.toString()
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]));
      }
      return len === -1
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false
      }
      for (len of foo) {
        tmp = len
        if (tmp && typeof tmp === 'object') {
          tmp = find(bar, tmp)
          if (!tmp) return false
        }
        if (!bar.has(tmp)) return false
      }
      return true
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false
      }
      for (len of foo) {
        tmp = len[0]
        if (tmp && typeof tmp === 'object') {
          tmp = find(bar, tmp)
          if (!tmp) return false
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false
        }
      }
      return true
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo)
      bar = new Uint8Array(bar)
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len));
      }
      return len === -1
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len]);
      }
      return len === -1
    }
    if (!ctor || typeof foo === 'object') {
      len = 0
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false
      }
      return Object.keys(bar).length === len
    }
  }
  return foo !== foo && bar !== bar
}
var has
var init_dist = __esm({
  '../../node_modules/dequal/dist/index.mjs'() {
    has = Object.prototype.hasOwnProperty
  },
})
var SandpackClient
var init_base_80a1f760 = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs'() {
    init_dist()
    SandpackClient =
      /** @class */
      (function () {
        function SandpackClient2(iframeSelector, sandboxSetup, options) {
          if (options === void 0) {
            options = {}
          }
          this.status = 'idle'
          this.options = options
          this.sandboxSetup = sandboxSetup
          this.iframeSelector = iframeSelector
        }
        SandpackClient2.prototype.updateOptions = function (options) {
          if (!dequal(this.options, options)) {
            this.options = options
            this.updateSandbox()
          }
        }
        SandpackClient2.prototype.updateSandbox = function (
          _sandboxSetup,
          _isInitializationCompile,
        ) {
          if (_sandboxSetup === void 0) {
            _sandboxSetup = this.sandboxSetup
          }
          throw Error('Method not implemented')
        }
        SandpackClient2.prototype.destroy = function () {
          throw Error('Method not implemented')
        }
        SandpackClient2.prototype.dispatch = function (_message) {
          throw Error('Method not implemented')
        }
        SandpackClient2.prototype.listen = function (_listener) {
          throw Error('Method not implemented')
        }
        return SandpackClient2
      })()
  },
})
function isCommand(char) {
  return /[a-zA-Z.]/.test(char)
}
function isAlpha(char) {
  return /[a-zA-Z]/.test(char)
}
function isWhitespace(char) {
  return /\s/.test(char)
}
function isOperator(char) {
  return /[&|]/.test(char)
}
function isArgument(char) {
  return /-/.test(char)
}
function isString(char) {
  return /["']/.test(char)
}
function isEnvVar(char) {
  return isAlpha(char) && char === char.toUpperCase()
}
function tokenize(input) {
  var current = 0
  var tokens = []
  function parseCommand() {
    var value = ''
    while (isCommand(input[current]) && current < input.length) {
      value += input[current]
      current++
    }
    return { type: TokenType.Command, value }
  }
  function parseOperator() {
    var value = ''
    while (isOperator(input[current]) && current < input.length) {
      value += input[current]
      current++
    }
    return operators.get(value)
  }
  function parseArgument() {
    var value = ''
    while (
      (isArgument(input[current]) || isAlpha(input[current])) &&
      current < input.length
    ) {
      value += input[current]
      current++
    }
    return { type: TokenType.Argument, value }
  }
  function parseString() {
    var openCloseQuote = input[current]
    var value = input[current]
    current++
    while (input[current] !== openCloseQuote && current < input.length) {
      value += input[current]
      current++
    }
    value += input[current]
    current++
    return { type: TokenType.String, value }
  }
  function parseEnvVars() {
    var value = {}
    var parseSingleEnv = function () {
      var key = ''
      var pair = ''
      while (input[current] !== '=' && current < input.length) {
        key += input[current]
        current++
      }
      if (input[current] === '=') {
        current++
      }
      while (input[current] !== ' ' && current < input.length) {
        pair += input[current]
        current++
      }
      value[key] = pair
    }
    while (isEnvVar(input[current]) && current < input.length) {
      parseSingleEnv()
      current++
    }
    return { type: TokenType.EnvVar, value }
  }
  while (current < input.length) {
    var currentChar = input[current]
    if (isWhitespace(currentChar)) {
      current++
      continue
    }
    switch (true) {
      case isEnvVar(currentChar):
        tokens.push(parseEnvVars())
        break
      case isCommand(currentChar):
        tokens.push(parseCommand())
        break
      case isOperator(currentChar):
        tokens.push(parseOperator())
        break
      case isArgument(currentChar):
        tokens.push(parseArgument())
        break
      case isString(currentChar):
        tokens.push(parseString())
        break
      default:
        throw new Error('Unknown character: '.concat(currentChar))
    }
  }
  return tokens
}
function generateRandomId() {
  var now = Date.now()
  var randomNumber = Math.round(Math.random() * 1e4)
  var count = (counter += 1)
  return (+''.concat(now).concat(randomNumber).concat(count)).toString(16)
}
var EventEmitter
var TokenType
var operators
var counter
var writeBuffer
var readBuffer
var fromBundlerFilesToFS
var findStartScriptPackageJson
var getMessageFromError
var consoleHook
var init_consoleHook_59e792cb = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs'() {
    init_lib()
    init_utils_52664384()
    EventEmitter =
      /** @class */
      (function () {
        function EventEmitter2() {
          this.listeners = {}
          this.listenersCount = 0
          this.channelId = Math.floor(Math.random() * 1e6)
          this.listeners = []
        }
        EventEmitter2.prototype.cleanup = function () {
          this.listeners = {}
          this.listenersCount = 0
        }
        EventEmitter2.prototype.dispatch = function (message) {
          Object.values(this.listeners).forEach(function (listener) {
            return listener(message)
          })
        }
        EventEmitter2.prototype.listener = function (listener) {
          var _this = this
          if (typeof listener !== 'function') {
            return function () {
              return
            }
          }
          var listenerId = this.listenersCount
          this.listeners[listenerId] = listener
          this.listenersCount++
          return function () {
            delete _this.listeners[listenerId]
          }
        }
        return EventEmitter2
      })()
    ;(function (TokenType2) {
      TokenType2['OR'] = 'OR'
      TokenType2['AND'] = 'AND'
      TokenType2['PIPE'] = 'PIPE'
      TokenType2['Command'] = 'Command'
      TokenType2['Argument'] = 'Argument'
      TokenType2['String'] = 'String'
      TokenType2['EnvVar'] = 'EnvVar'
    })(TokenType || (TokenType = {}))
    operators = /* @__PURE__ */ new Map([
      ['&&', { type: TokenType.AND }],
      ['||', { type: TokenType.OR }],
      ['|', { type: TokenType.PIPE }],
      ['-', { type: TokenType.Argument }],
    ])
    counter = 0
    writeBuffer = function (content) {
      if (typeof content === 'string') {
        return new TextEncoder().encode(content)
      } else {
        return content
      }
    }
    readBuffer = function (content) {
      if (typeof content === 'string') {
        return content
      } else {
        return new TextDecoder().decode(content)
      }
    }
    fromBundlerFilesToFS = function (files) {
      return Object.entries(files).reduce(function (acc, _a22) {
        var key = _a22[0],
          value = _a22[1]
        acc[key] = writeBuffer(value.code)
        return acc
      }, {})
    }
    findStartScriptPackageJson = function (packageJson) {
      var scripts2 = {}
      var possibleKeys = ['dev', 'start']
      try {
        scripts2 = JSON.parse(packageJson).scripts
      } catch (e2) {
        throw createError('Could not parse package.json file: ' + e2.message)
      }
      invariant2(
        scripts2,
        'Failed to start. Please provide a `start` or `dev` script on the package.json',
      )
      var _loop_1 = function (index2) {
        if (possibleKeys[index2] in scripts2) {
          var script = possibleKeys[index2]
          var candidate = scripts2[script]
          var env_1 = {}
          var command_1 = ''
          var args_1 = []
          tokenize(candidate).forEach(function (item) {
            var commandNotFoundYet = command_1 === ''
            if (item.type === TokenType.EnvVar) {
              env_1 = item.value
            }
            if (item.type === TokenType.Command && commandNotFoundYet) {
              command_1 = item.value
            }
            if (
              item.type === TokenType.Argument ||
              (!commandNotFoundYet && item.type === TokenType.Command)
            ) {
              args_1.push(item.value)
            }
          })
          return { value: [command_1, args_1, { env: env_1 }] }
        }
      }
      for (var index = 0; index < possibleKeys.length; index++) {
        var state_1 = _loop_1(index)
        if (typeof state_1 === 'object') return state_1.value
      }
      throw createError(
        'Failed to start. Please provide a `start` or `dev` script on the package.json',
      )
    }
    getMessageFromError = function (error) {
      if (typeof error === 'string') return error
      if (typeof error === 'object' && 'message' in error) {
        return error.message
      }
      return createError(
        'The server could not be reached. Make sure that the node script is running and that a port has been started.',
      )
    }
    consoleHook = `var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var e={},n={};!function(t){t.__esModule=!0,t.default=["log","debug","info","warn","error","table","clear","time","timeEnd","count","assert","command","result"]}(n);var a,o={},i={};(a=i).__esModule=!0,a.default=function(){var t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+"-"+Date.now()};var u={},s={__esModule:!0};s.update=s.state=void 0,s.update=function(t){s.state=t};var f={},c={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.initialState=void 0,r.initialState={timings:{},count:{}};var n=function(){return"undefined"!=typeof performance&&performance.now?performance.now():Date.now()};r.default=function(t,a){var o,i,u;switch(void 0===t&&(t=r.initialState),a.type){case"COUNT":var s=t.count[a.name]||0;return e(e({},t),{count:e(e({},t.count),(o={},o[a.name]=s+1,o))});case"TIME_START":return e(e({},t),{timings:e(e({},t.timings),(i={},i[a.name]={start:n()},i))});case"TIME_END":var f=t.timings[a.name],c=n(),l=c-f.start;return e(e({},t),{timings:e(e({},t.timings),(u={},u[a.name]=e(e({},f),{end:c,time:l}),u))});default:return t}}}(c),function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var n=e(c),a=s;r.default=function(t){a.update(n.default(a.state,t))}}(f);var l={__esModule:!0};l.timeEnd=l.timeStart=l.count=void 0,l.count=function(t){return{type:"COUNT",name:t}},l.timeStart=function(t){return{type:"TIME_START",name:t}},l.timeEnd=function(t){return{type:"TIME_END",name:t}};var d=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};u.__esModule=!0,u.stop=u.start=void 0;var p=s,h=d(f),m=l;u.start=function(t){h.default(m.timeStart(t))},u.stop=function(t){var r=null===p.state||void 0===p.state?void 0:p.state.timings[t];return r&&!r.end?(h.default(m.timeEnd(t)),{method:"log",data:[t+": "+p.state.timings[t].time+"ms"]}):{method:"warn",data:["Timer '"+t+"' does not exist"]}};var y={},v=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};y.__esModule=!0,y.increment=void 0;var _=s,b=v(f),g=l;y.increment=function(t){return b.default(g.count(t)),{method:"log",data:[t+": "+_.state.count[t]]}};var M={},T=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n};M.__esModule=!0,M.test=void 0,M.test=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];return!t&&(0===r.length&&r.push("console.assert"),{method:"error",data:T(["Assertion failed:"],r)})},function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)},n=t&&t.__createBinding||(Object.create?function(t,r,e,n){void 0===n&&(n=e),Object.defineProperty(t,n,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,n){void 0===n&&(n=e),t[n]=r[e]}),a=t&&t.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,"default",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=t&&t.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&n(r,t,e);return a(r,t),r},s=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n},f=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var c=f(i),l=o(u),d=o(y),p=o(M);r.default=function(t,r,n){var a=n||c.default();switch(t){case"clear":return{method:t,id:a};case"count":return!!(o="string"==typeof r[0]?r[0]:"default")&&e(e({},d.increment(o)),{id:a});case"time":case"timeEnd":var o;return!!(o="string"==typeof r[0]?r[0]:"default")&&("time"===t?(l.start(o),!1):e(e({},l.stop(o)),{id:a}));case"assert":if(0!==r.length){var i=p.test.apply(p,s([r[0]],r.slice(1)));if(i)return e(e({},i),{id:a})}return!1;case"error":return{method:t,id:a,data:r.map((function(t){try{return t.stack||t}catch(r){return t}}))};default:return{method:t,id:a,data:r}}}}(o);var S={},O={};!function(t){var r;t.__esModule=!0,function(t){t[t.infinity=0]="infinity",t[t.minusInfinity=1]="minusInfinity",t[t.minusZero=2]="minusZero"}(r||(r={})),t.default={type:"Arithmetic",lookup:Number,shouldTransform:function(t,r){return"number"===t&&(r===1/0||r===-1/0||function(t){return 1/t==-1/0}(r))},toSerializable:function(t){return t===1/0?r.infinity:t===-1/0?r.minusInfinity:r.minusZero},fromSerializable:function(t){return t===r.infinity?1/0:t===r.minusInfinity?-1/0:t===r.minusZero?-0:t}}}(O);var w={};!function(t){t.__esModule=!0,t.default={type:"Function",lookup:Function,shouldTransform:function(t,r){return"function"==typeof r},toSerializable:function(t){var r="";try{r=t.toString().substring(r.indexOf("{")+1,r.lastIndexOf("}"))}catch(t){}return{name:t.name,body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){try{var r=function(){};return"string"==typeof t.name&&Object.defineProperty(r,"name",{value:t.name,writable:!1}),"string"==typeof t.body&&Object.defineProperty(r,"body",{value:t.body,writable:!1}),"string"==typeof t.proto&&(r.constructor={name:t.proto}),r}catch(r){return t}}}}(w);var A={};!function(t){var r;function e(t){for(var r={},e=0,n=t.attributes;e<n.length;e++){var a=n[e];r[a.name]=a.value}return r}t.__esModule=!0,t.default={type:"HTMLElement",shouldTransform:function(t,r){return r&&r.children&&"string"==typeof r.innerHTML&&"string"==typeof r.tagName},toSerializable:function(t){return{tagName:t.tagName.toLowerCase(),attributes:e(t),innerHTML:t.innerHTML}},fromSerializable:function(t){try{var e=(r||(r=document.implementation.createHTMLDocument("sandbox"))).createElement(t.tagName);e.innerHTML=t.innerHTML;for(var n=0,a=Object.keys(t.attributes);n<a.length;n++){var o=a[n];try{e.setAttribute(o,t.attributes[o])}catch(t){}}return e}catch(r){return t}}}}(A);var j={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.default={type:"Map",shouldTransform:function(t,r){return r&&r.constructor&&"Map"===r.constructor.name},toSerializable:function(t){var r={};return t.forEach((function(t,e){var n="object"==typeof e?JSON.stringify(e):e;r[n]=t})),{name:"Map",body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){var r=t.body,n=e({},r);return"string"==typeof t.proto&&(n.constructor={name:t.proto}),n}}}(j);var z={};!function(t){t.__esModule=!0;var r="@t",e=/^#*@(t|r)$/,n=(0,eval)("this"),a="function"==typeof ArrayBuffer,o="function"==typeof Map,i="function"==typeof Set,u=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],s=Array.prototype.slice,f={serialize:function(t){return JSON.stringify(t)},deserialize:function(t){return JSON.parse(t)}},c=function(){function t(t,r){this.references=t,this.transforms=r,this.transformsMap=this._makeTransformsMap(),this.circularCandidates=[],this.circularCandidatesDescrs=[],this.circularRefCount=0}return t._createRefMark=function(t){var r=Object.create(null);return r["@r"]=t,r},t.prototype._createCircularCandidate=function(t,r,e){this.circularCandidates.push(t),this.circularCandidatesDescrs.push({parent:r,key:e,refIdx:-1})},t.prototype._applyTransform=function(t,e,n,a){var o=Object.create(null),i=a.toSerializable(t);return"object"==typeof i&&this._createCircularCandidate(t,e,n),o[r]=a.type,o.data=this._handleValue((function(){return i}),e,n),o},t.prototype._handleArray=function(t){for(var r=[],e=function(e){r[e]=n._handleValue((function(){return t[e]}),r,e)},n=this,a=0;a<t.length;a++)e(a);return r},t.prototype._handlePlainObject=function(t){var r,n,a=Object.create(null),o=function(r){if(Reflect.has(t,r)){var n=e.test(r)?"#"+r:r;a[n]=i._handleValue((function(){return t[r]}),a,n)}},i=this;for(var u in t)o(u);var s=null===(n=null===(r=null==t?void 0:t.__proto__)||void 0===r?void 0:r.constructor)||void 0===n?void 0:n.name;return s&&"Object"!==s&&(a.constructor={name:s}),a},t.prototype._handleObject=function(t,r,e){return this._createCircularCandidate(t,r,e),Array.isArray(t)?this._handleArray(t):this._handlePlainObject(t)},t.prototype._ensureCircularReference=function(r){var e=this.circularCandidates.indexOf(r);if(e>-1){var n=this.circularCandidatesDescrs[e];return-1===n.refIdx&&(n.refIdx=n.parent?++this.circularRefCount:0),t._createRefMark(n.refIdx)}return null},t.prototype._handleValue=function(t,r,e){try{var n=t(),a=typeof n,o="object"===a&&null!==n;if(o){var i=this._ensureCircularReference(n);if(i)return i}var u=this._findTransform(a,n);return u?this._applyTransform(n,r,e,u):o?this._handleObject(n,r,e):n}catch(t){try{return this._handleValue((function(){return t instanceof Error?t:new Error(t)}),r,e)}catch(t){return null}}},t.prototype._makeTransformsMap=function(){if(o){var t=new Map;return this.transforms.forEach((function(r){r.lookup&&t.set(r.lookup,r)})),t}},t.prototype._findTransform=function(t,r){if(o&&r&&r.constructor&&(null==(a=this.transformsMap.get(r.constructor))?void 0:a.shouldTransform(t,r)))return a;for(var e=0,n=this.transforms;e<n.length;e++){var a;if((a=n[e]).shouldTransform(t,r))return a}},t.prototype.transform=function(){for(var r=this,e=[this._handleValue((function(){return r.references}),null,null)],n=0,a=this.circularCandidatesDescrs;n<a.length;n++){var o=a[n];o.refIdx>0&&(e[o.refIdx]=o.parent[o.key],o.parent[o.key]=t._createRefMark(o.refIdx))}return e},t}(),l=function(){function t(t,r){this.activeTransformsStack=[],this.visitedRefs=Object.create(null),this.references=t,this.transformMap=r}return t.prototype._handlePlainObject=function(t){var r=Object.create(null);for(var n in"constructor"in t&&(t.constructor&&"string"==typeof t.constructor.name||(t.constructor={name:"Object"})),t)t.hasOwnProperty(n)&&(this._handleValue(t[n],t,n),e.test(n)&&(r[n.substring(1)]=t[n],delete t[n]));for(var a in r)t[a]=r[a]},t.prototype._handleTransformedObject=function(t,e,n){var a=t[r],o=this.transformMap[a];if(!o)throw new Error("Can't find transform for \\""+a+'" type.');this.activeTransformsStack.push(t),this._handleValue(t.data,t,"data"),this.activeTransformsStack.pop(),e[n]=o.fromSerializable(t.data)},t.prototype._handleCircularSelfRefDuringTransform=function(t,r,e){var n=this.references;Object.defineProperty(r,e,{val:void 0,configurable:!0,enumerable:!0,get:function(){return void 0===this.val&&(this.val=n[t]),this.val},set:function(t){this.val=t}})},t.prototype._handleCircularRef=function(t,r,e){this.activeTransformsStack.includes(this.references[t])?this._handleCircularSelfRefDuringTransform(t,r,e):(this.visitedRefs[t]||(this.visitedRefs[t]=!0,this._handleValue(this.references[t],this.references,t)),r[e]=this.references[t])},t.prototype._handleValue=function(t,e,n){if("object"==typeof t&&null!==t){var a=t["@r"];if(void 0!==a)this._handleCircularRef(a,e,n);else if(t[r])this._handleTransformedObject(t,e,n);else if(Array.isArray(t))for(var o=0;o<t.length;o++)this._handleValue(t[o],t,o);else this._handlePlainObject(t)}},t.prototype.transform=function(){return this.visitedRefs[0]=!0,this._handleValue(this.references[0],this.references,0),this.references[0]},t}(),d=[{type:"[[NaN]]",shouldTransform:function(t,r){return"number"===t&&isNaN(r)},toSerializable:function(){return""},fromSerializable:function(){return NaN}},{type:"[[undefined]]",shouldTransform:function(t){return"undefined"===t},toSerializable:function(){return""},fromSerializable:function(){}},{type:"[[Date]]",lookup:Date,shouldTransform:function(t,r){return r instanceof Date},toSerializable:function(t){return t.getTime()},fromSerializable:function(t){var r=new Date;return r.setTime(t),r}},{type:"[[RegExp]]",lookup:RegExp,shouldTransform:function(t,r){return r instanceof RegExp},toSerializable:function(t){var r={src:t.source,flags:""};return t.globalThis&&(r.flags+="g"),t.ignoreCase&&(r.flags+="i"),t.multiline&&(r.flags+="m"),r},fromSerializable:function(t){return new RegExp(t.src,t.flags)}},{type:"[[Error]]",lookup:Error,shouldTransform:function(t,r){return r instanceof Error},toSerializable:function(t){var r,e;return t.stack||null===(e=(r=Error).captureStackTrace)||void 0===e||e.call(r,t),{name:t.name,message:t.message,stack:t.stack}},fromSerializable:function(t){var r=new(n[t.name]||Error)(t.message);return r.stack=t.stack,r}},{type:"[[ArrayBuffer]]",lookup:a&&ArrayBuffer,shouldTransform:function(t,r){return a&&r instanceof ArrayBuffer},toSerializable:function(t){var r=new Int8Array(t);return s.call(r)},fromSerializable:function(t){if(a){var r=new ArrayBuffer(t.length);return new Int8Array(r).set(t),r}return t}},{type:"[[TypedArray]]",shouldTransform:function(t,r){if(a)return ArrayBuffer.isView(r)&&!(r instanceof DataView);for(var e=0,o=u;e<o.length;e++){var i=o[e];if("function"==typeof n[i]&&r instanceof n[i])return!0}return!1},toSerializable:function(t){return{ctorName:t.constructor.name,arr:s.call(t)}},fromSerializable:function(t){return"function"==typeof n[t.ctorName]?new n[t.ctorName](t.arr):t.arr}},{type:"[[Map]]",lookup:o&&Map,shouldTransform:function(t,r){return o&&r instanceof Map},toSerializable:function(t){var r=[];return t.forEach((function(t,e){r.push(e),r.push(t)})),r},fromSerializable:function(t){if(o){for(var r=new Map,e=0;e<t.length;e+=2)r.set(t[e],t[e+1]);return r}for(var n=[],a=0;a<t.length;a+=2)n.push([t[e],t[e+1]]);return n}},{type:"[[Set]]",lookup:i&&Set,shouldTransform:function(t,r){return i&&r instanceof Set},toSerializable:function(t){var r=[];return t.forEach((function(t){r.push(t)})),r},fromSerializable:function(t){if(i){for(var r=new Set,e=0;e<t.length;e++)r.add(t[e]);return r}return t}}],p=function(){function t(t){this.transforms=[],this.transformsMap=Object.create(null),this.serializer=t||f,this.addTransforms(d)}return t.prototype.addTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r];if(this.transformsMap[n.type])throw new Error('Transform with type "'+n.type+'" was already added.');this.transforms.push(n),this.transformsMap[n.type]=n}return this},t.prototype.removeTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r],a=this.transforms.indexOf(n);a>-1&&this.transforms.splice(a,1),delete this.transformsMap[n.type]}return this},t.prototype.encode=function(t){var r=new c(t,this.transforms).transform();return this.serializer.serialize(r)},t.prototype.decode=function(t){var r=this.serializer.deserialize(t);return new l(r,this.transformsMap).transform()},t}();t.default=p}(z);var E=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};S.__esModule=!0,S.Decode=P=S.Encode=void 0;var k=E(O),C=E(w),D=E(A),I=E(j),N=E(z),R=[D.default,C.default,k.default,I.default],x=new N.default;x.addTransforms(R);var P=S.Encode=function(t){return JSON.parse(x.encode(t))};S.Decode=function(t){return x.decode(JSON.stringify(t))},function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var a=e(n),i=e(o),u=S;r.default=function(t,r,e){void 0===e&&(e=!0);for(var n=t,o={pointers:{},src:{npm:"https://npmjs.com/package/console-feed",github:"https://github.com/samdenty99/console-feed"}},s=function(t){var a=n[t];n[t]=function(){a.apply(this,arguments);var n=[].slice.call(arguments);setTimeout((function(){var a=i.default(t,n);if(a){var o=a;e&&(o=u.Encode(a)),r(o,a)}}))},o.pointers[t]=a},f=0,c=a.default;f<c.length;f++)s(c[f]);return n.feed=o,n}}(e),r(e)(window.console,(function(t){var r=P(t);parent.postMessage({type:"console",codesandbox:!0,log:Array.isArray(r)?r[0]:r,channelId:scope.channelId},"*")}));
`
  },
})
var node_exports = {}
__export(node_exports, { SandpackNode: () => SandpackNode })
function loadPreviewIframe(iframe, url) {
  return __awaiter(this, void 0, void 0, function () {
    var contentWindow, TIME_OUT, MAX_MANY_TIRES, tries, timeout
    return __generator(this, function (_a22) {
      contentWindow = iframe.contentWindow
      nullthrows(
        contentWindow,
        'Failed to await preview iframe: no content window found',
      )
      TIME_OUT = 9e4
      MAX_MANY_TIRES = 20
      tries = 0
      return [
        2,
        new Promise(function (resolve, reject) {
          var triesToSetUrl = function () {
            var onLoadPage = function () {
              clearTimeout(timeout)
              tries = MAX_MANY_TIRES
              resolve()
              iframe.removeEventListener('load', onLoadPage)
            }
            if (tries >= MAX_MANY_TIRES) {
              reject(createError('Could not able to connect to preview.'))
              return
            }
            iframe.setAttribute('src', url)
            timeout = setTimeout(function () {
              triesToSetUrl()
              iframe.removeEventListener('load', onLoadPage)
            }, TIME_OUT)
            tries = tries + 1
            iframe.addEventListener('load', onLoadPage)
          }
          iframe.addEventListener('error', function () {
            return reject(new Error('Iframe error'))
          })
          iframe.addEventListener('abort', function () {
            return reject(new Error('Aborted'))
          })
          triesToSetUrl()
        }),
      ]
    })
  })
}
function setupHistoryListeners(_a22) {
  var scope = _a22.scope
  var origHistoryProto = window.history.__proto__
  var historyList = []
  var historyPosition = 0
  var dispatchMessage = function (url) {
    parent.postMessage(
      {
        type: 'urlchange',
        url,
        back: historyPosition > 0,
        forward: historyPosition < historyList.length - 1,
        channelId: scope.channelId,
      },
      '*',
    )
  }
  function pushHistory(url, state) {
    historyList.splice(historyPosition + 1)
    historyList.push({ url, state })
    historyPosition = historyList.length - 1
  }
  Object.assign(window.history, {
    go: function (delta) {
      var newPos = historyPosition + delta
      if (newPos >= 0 && newPos <= historyList.length - 1) {
        historyPosition = newPos
        var _a3 = historyList[historyPosition],
          url = _a3.url,
          state = _a3.state
        origHistoryProto.replaceState.call(window.history, state, '', url)
        var newURL = document.location.href
        dispatchMessage(newURL)
        window.dispatchEvent(new PopStateEvent('popstate', { state }))
      }
    },
    back: function () {
      window.history.go(-1)
    },
    forward: function () {
      window.history.go(1)
    },
    pushState: function (state, title, url) {
      origHistoryProto.replaceState.call(window.history, state, title, url)
      pushHistory(url, state)
      dispatchMessage(document.location.href)
    },
    replaceState: function (state, title, url) {
      origHistoryProto.replaceState.call(window.history, state, title, url)
      historyList[historyPosition] = { state, url }
      dispatchMessage(document.location.href)
    },
  })
  function handleMessage(_a3) {
    var data = _a3.data
    if (data.type === 'urlback') {
      history.back()
    } else if (data.type === 'urlforward') {
      history.forward()
    } else if (data.type === 'refresh') {
      document.location.reload()
    }
  }
  window.addEventListener('message', handleMessage)
}
function watchResize(_a22) {
  var scope = _a22.scope
  var lastHeight = 0
  function getDocumentHeight() {
    if (typeof window === 'undefined') return 0
    var body = document.body
    var html2 = document.documentElement
    return Math.max(body.scrollHeight, body.offsetHeight, html2.offsetHeight)
  }
  function sendResizeEvent() {
    var height = getDocumentHeight()
    if (lastHeight !== height) {
      window.parent.postMessage(
        {
          type: 'resize',
          height,
          codesandbox: true,
          channelId: scope.channelId,
        },
        '*',
      )
    }
    lastHeight = height
  }
  sendResizeEvent()
  var throttle
  var observer = new MutationObserver(function () {
    if (throttle === void 0) {
      sendResizeEvent()
      throttle = setTimeout(function () {
        throttle = void 0
      }, 300)
    }
  })
  observer.observe(document, {
    attributes: true,
    childList: true,
    subtree: true,
  })
  setInterval(sendResizeEvent, 300)
}
var setPreviewIframeProperties
var scripts
var injectScriptToIframe
var SandpackNode
var init_node = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs'() {
    init_utils_52664384()
    init_base_80a1f760()
    init_consoleHook_59e792cb()
    init_lib()
    init_dist()
    setPreviewIframeProperties = function (iframe, options) {
      iframe.style.border = '0'
      iframe.style.width = options.width || '100%'
      iframe.style.height = options.height || '100%'
      iframe.style.overflow = 'hidden'
      iframe.allow = 'cross-origin-isolated'
    }
    scripts = [
      { code: setupHistoryListeners.toString(), id: 'historyListener' },
      {
        code: 'function consoleHook({ scope }) {' + consoleHook + '\n};',
        id: 'consoleHook',
      },
      { code: watchResize.toString(), id: 'watchResize' },
    ]
    injectScriptToIframe = function (iframe, channelId) {
      scripts.forEach(function (_a22) {
        var _b22
        var code = _a22.code,
          id = _a22.id
        var message = {
          uid: id,
          type: INJECT_MESSAGE_TYPE,
          code: 'exports.activate = '.concat(code),
          scope: { channelId },
        }
        ;(_b22 = iframe.contentWindow) === null || _b22 === void 0
          ? void 0
          : _b22.postMessage(message, '*')
      })
    }
    SandpackNode =
      /** @class */
      (function (_super) {
        __extends(SandpackNode2, _super)
        function SandpackNode2(selector, sandboxInfo, options) {
          if (options === void 0) {
            options = {}
          }
          var _this =
            _super.call(
              this,
              selector,
              sandboxInfo,
              __assign(__assign({}, options), {
                bundlerURL: options.bundlerURL,
              }),
            ) || this
          _this._modulesCache = /* @__PURE__ */ new Map()
          _this.messageChannelId = generateRandomId()
          _this._initPromise = null
          _this.emitter = new EventEmitter()
          _this.manageIframes(selector)
          _this.emulator = new Nodebox({
            iframe: _this.emulatorIframe,
            runtimeUrl: _this.options.bundlerURL,
          })
          _this.updateSandbox(sandboxInfo)
          return _this
        }
        SandpackNode2.prototype._init = function (files) {
          return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  return [4, this.emulator.connect()]
                case 1:
                  _a22.sent()
                  return [4, this.emulator.fs.init(files)]
                case 2:
                  _a22.sent()
                  return [4, this.globalListeners()]
                case 3:
                  _a22.sent()
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.compile = function (files) {
          return __awaiter(this, void 0, void 0, function () {
            var shellId, err_1
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  _a22.trys.push([0, 5, , 6])
                  this.status = 'initializing'
                  this.dispatch({
                    type: 'start',
                    firstLoad: true,
                  })
                  if (!this._initPromise) {
                    this._initPromise = this._init(files)
                  }
                  return [4, this._initPromise]
                case 1:
                  _a22.sent()
                  this.dispatch({ type: 'connected' })
                  return [4, this.createShellProcessFromTask(files)]
                case 2:
                  shellId = _a22.sent().id
                  return [4, this.createPreviewURLFromId(shellId)]
                case 3:
                  _a22.sent()
                  return [4, this.setLocationURLIntoIFrame()]
                case 4:
                  _a22.sent()
                  this.dispatchDoneMessage()
                  return [3, 6]
                case 5:
                  err_1 = _a22.sent()
                  this.dispatch({
                    type: 'action',
                    action: 'notification',
                    notificationType: 'error',
                    title: getMessageFromError(err_1),
                  })
                  this.dispatch({
                    type: 'done',
                    compilatonError: true,
                  })
                  return [3, 6]
                case 6:
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.createShellProcessFromTask = function (files) {
          return __awaiter(this, void 0, void 0, function () {
            var packageJsonContent
            var _a22
            var _this = this
            return __generator(this, function (_b22) {
              switch (_b22.label) {
                case 0:
                  packageJsonContent = readBuffer(files['/package.json'])
                  this.emulatorCommand =
                    findStartScriptPackageJson(packageJsonContent)
                  this.emulatorShellProcess = this.emulator.shell.create()
                  return [
                    4,
                    this.emulatorShellProcess.on('exit', function (exitCode) {
                      _this.dispatch({
                        type: 'action',
                        action: 'notification',
                        notificationType: 'error',
                        title: createError(
                          'Error: process.exit('.concat(exitCode, ') called.'),
                        ),
                      })
                    }),
                  ]
                case 1:
                  _b22.sent()
                  return [
                    4,
                    this.emulatorShellProcess.on('progress', function (data) {
                      var _a3, _b222
                      if (
                        data.state === 'command_running' ||
                        data.state === 'starting_command'
                      ) {
                        _this.dispatch({
                          type: 'shell/progress',
                          data: __assign(__assign({}, data), {
                            command: [
                              (_a3 = _this.emulatorCommand) === null ||
                              _a3 === void 0
                                ? void 0
                                : _a3[0],
                              (_b222 = _this.emulatorCommand) === null ||
                              _b222 === void 0
                                ? void 0
                                : _b222[1].join(' '),
                            ].join(' '),
                          }),
                        })
                        _this.status = 'installing-dependencies'
                        return
                      }
                      _this.dispatch({
                        type: 'shell/progress',
                        data,
                      })
                    }),
                  ]
                case 2:
                  _b22.sent()
                  this.emulatorShellProcess.stdout.on('data', function (data) {
                    _this.dispatch({
                      type: 'stdout',
                      payload: { data, type: 'out' },
                    })
                  })
                  this.emulatorShellProcess.stderr.on('data', function (data) {
                    _this.dispatch({
                      type: 'stdout',
                      payload: { data, type: 'err' },
                    })
                  })
                  return [
                    4,
                    (_a22 = this.emulatorShellProcess).runCommand.apply(
                      _a22,
                      this.emulatorCommand,
                    ),
                  ]
                case 3:
                  return [2, _b22.sent()]
              }
            })
          })
        }
        SandpackNode2.prototype.createPreviewURLFromId = function (id) {
          var _a22
          return __awaiter(this, void 0, void 0, function () {
            var url
            return __generator(this, function (_b22) {
              switch (_b22.label) {
                case 0:
                  this.iframePreviewUrl = void 0
                  return [4, this.emulator.preview.getByShellId(id)]
                case 1:
                  url = _b22.sent().url
                  this.iframePreviewUrl =
                    url +
                    ((_a22 = this.options.startRoute) !== null &&
                    _a22 !== void 0
                      ? _a22
                      : '')
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.manageIframes = function (selector) {
          var _a22
          if (typeof selector === 'string') {
            var element = document.querySelector(selector)
            nullthrows(
              element,
              "The element '".concat(selector, "' was not found"),
            )
            this.iframe = document.createElement('iframe')
            element === null || element === void 0
              ? void 0
              : element.appendChild(this.iframe)
          } else {
            this.iframe = selector
          }
          setPreviewIframeProperties(this.iframe, this.options)
          nullthrows(
            this.iframe.parentNode,
            'The given iframe does not have a parent.',
          )
          this.emulatorIframe = document.createElement('iframe')
          this.emulatorIframe.classList.add('sp-bridge-frame')
          ;(_a22 = this.iframe.parentNode) === null || _a22 === void 0
            ? void 0
            : _a22.appendChild(this.emulatorIframe)
        }
        SandpackNode2.prototype.setLocationURLIntoIFrame = function () {
          return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  if (!this.iframePreviewUrl) return [3, 2]
                  return [
                    4,
                    loadPreviewIframe(this.iframe, this.iframePreviewUrl),
                  ]
                case 1:
                  _a22.sent()
                  _a22.label = 2
                case 2:
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.dispatchDoneMessage = function () {
          this.status = 'done'
          this.dispatch({ type: 'done', compilatonError: false })
          if (this.iframePreviewUrl) {
            this.dispatch({
              type: 'urlchange',
              url: this.iframePreviewUrl,
              back: false,
              forward: false,
            })
          }
        }
        SandpackNode2.prototype.globalListeners = function () {
          return __awaiter(this, void 0, void 0, function () {
            var _this = this
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  window.addEventListener('message', function (event) {
                    if (event.data.type === PREVIEW_LOADED_MESSAGE_TYPE) {
                      injectScriptToIframe(_this.iframe, _this.messageChannelId)
                    }
                    if (
                      event.data.type === 'urlchange' &&
                      event.data.channelId === _this.messageChannelId
                    ) {
                      _this.dispatch({
                        type: 'urlchange',
                        url: event.data.url,
                        back: event.data.back,
                        forward: event.data.forward,
                      })
                    } else if (
                      event.data.channelId === _this.messageChannelId
                    ) {
                      _this.dispatch(event.data)
                    }
                  })
                  return [
                    4,
                    this.emulator.fs.watch(
                      ['*'],
                      [
                        '.next',
                        'node_modules',
                        'build',
                        'dist',
                        'vendor',
                        '.config',
                        '.vuepress',
                      ],
                      function (message) {
                        return __awaiter(_this, void 0, void 0, function () {
                          var event, path, type, _a3, content, newContent, err_2
                          return __generator(this, function (_b22) {
                            switch (_b22.label) {
                              case 0:
                                if (!message) return [2]
                                event = message
                                path =
                                  'newPath' in event
                                    ? event.newPath
                                    : 'path' in event
                                      ? event.path
                                      : ''
                                return [4, this.emulator.fs.stat(path)]
                              case 1:
                                type = _b22.sent().type
                                if (type !== 'file') return [2, null]
                                _b22.label = 2
                              case 2:
                                _b22.trys.push([2, 10, , 11])
                                _a3 = event.type
                                switch (_a3) {
                                  case 'change':
                                    return [3, 3]
                                  case 'create':
                                    return [3, 3]
                                  case 'remove':
                                    return [3, 5]
                                  case 'rename':
                                    return [3, 6]
                                  case 'close':
                                    return [3, 8]
                                }
                                return [3, 9]
                              case 3:
                                return [
                                  4,
                                  this.emulator.fs.readFile(event.path, 'utf8'),
                                ]
                              case 4:
                                content = _b22.sent()
                                this.dispatch({
                                  type: 'fs/change',
                                  path: event.path,
                                  content,
                                })
                                this._modulesCache.set(
                                  event.path,
                                  writeBuffer(content),
                                )
                                return [3, 9]
                              case 5:
                                this.dispatch({
                                  type: 'fs/remove',
                                  path: event.path,
                                })
                                this._modulesCache.delete(event.path)
                                return [3, 9]
                              case 6:
                                this.dispatch({
                                  type: 'fs/remove',
                                  path: event.oldPath,
                                })
                                this._modulesCache.delete(event.oldPath)
                                return [
                                  4,
                                  this.emulator.fs.readFile(
                                    event.newPath,
                                    'utf8',
                                  ),
                                ]
                              case 7:
                                newContent = _b22.sent()
                                this.dispatch({
                                  type: 'fs/change',
                                  path: event.newPath,
                                  content: newContent,
                                })
                                this._modulesCache.set(
                                  event.newPath,
                                  writeBuffer(newContent),
                                )
                                return [3, 9]
                              case 8:
                                return [3, 9]
                              case 9:
                                return [3, 11]
                              case 10:
                                err_2 = _b22.sent()
                                this.dispatch({
                                  type: 'action',
                                  action: 'notification',
                                  notificationType: 'error',
                                  title: getMessageFromError(err_2),
                                })
                                return [3, 11]
                              case 11:
                                return [2]
                            }
                          })
                        })
                      },
                    ),
                  ]
                case 1:
                  _a22.sent()
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.restartShellProcess = function () {
          var _a22
          return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b22) {
              switch (_b22.label) {
                case 0:
                  if (!(this.emulatorShellProcess && this.emulatorCommand))
                    return [3, 3]
                  this.dispatch({
                    type: 'start',
                    firstLoad: true,
                  })
                  this.status = 'initializing'
                  return [4, this.emulatorShellProcess.kill()]
                case 1:
                  _b22.sent()
                  ;(_a22 = this.iframe) === null || _a22 === void 0
                    ? void 0
                    : _a22.removeAttribute('attr')
                  this.emulator.fs.rm('/node_modules/.vite', {
                    recursive: true,
                    force: true,
                  })
                  return [
                    4,
                    this.compile(Object.fromEntries(this._modulesCache)),
                  ]
                case 2:
                  _b22.sent()
                  _b22.label = 3
                case 3:
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.updateSandbox = function (setup) {
          var _this = this
          var _a22
          var modules = fromBundlerFilesToFS(setup.files)
          if (
            ((_a22 = this.emulatorShellProcess) === null || _a22 === void 0
              ? void 0
              : _a22.state) === 'running'
          ) {
            Object.entries(modules).forEach(function (_a3) {
              var key = _a3[0],
                value = _a3[1]
              if (
                !_this._modulesCache.get(key) ||
                readBuffer(value) !== readBuffer(_this._modulesCache.get(key))
              ) {
                _this.emulator.fs.writeFile(key, value, {
                  recursive: true,
                })
              }
            })
            return
          }
          this.dispatch({
            codesandbox: true,
            modules,
            template: setup.template,
            type: 'compile',
          })
          Object.entries(modules).forEach(function (_a3) {
            var key = _a3[0],
              value = _a3[1]
            _this._modulesCache.set(key, writeBuffer(value))
          })
        }
        SandpackNode2.prototype.dispatch = function (message) {
          var _a22, _b22
          return __awaiter(this, void 0, void 0, function () {
            var _c2
            return __generator(this, function (_d) {
              switch (_d.label) {
                case 0:
                  _c2 = message.type
                  switch (_c2) {
                    case 'compile':
                      return [3, 1]
                    case 'refresh':
                      return [3, 2]
                    case 'urlback':
                      return [3, 4]
                    case 'urlforward':
                      return [3, 4]
                    case 'shell/restart':
                      return [3, 5]
                    case 'shell/openPreview':
                      return [3, 6]
                  }
                  return [3, 7]
                case 1:
                  this.compile(message.modules)
                  return [3, 8]
                case 2:
                  return [4, this.setLocationURLIntoIFrame()]
                case 3:
                  _d.sent()
                  return [3, 8]
                case 4:
                  ;(_b22 =
                    (_a22 = this.iframe) === null || _a22 === void 0
                      ? void 0
                      : _a22.contentWindow) === null || _b22 === void 0
                    ? void 0
                    : _b22.postMessage(message, '*')
                  return [3, 8]
                case 5:
                  this.restartShellProcess()
                  return [3, 8]
                case 6:
                  window.open(this.iframePreviewUrl, '_blank')
                  return [3, 8]
                case 7:
                  this.emitter.dispatch(message)
                  _d.label = 8
                case 8:
                  return [2]
              }
            })
          })
        }
        SandpackNode2.prototype.listen = function (listener) {
          return this.emitter.listener(listener)
        }
        SandpackNode2.prototype.destroy = function () {
          this.emulatorIframe.remove()
          this.emitter.cleanup()
        }
        return SandpackNode2
      })(SandpackClient)
  },
})
var require_main = __commonJS2({
  '../../node_modules/static-browser-server/out/lib/main.js'(exports, module) {
    'use strict'
    var __create22 = Object.create
    var __defProp22 = Object.defineProperty
    var __getOwnPropDesc22 = Object.getOwnPropertyDescriptor
    var __getOwnPropNames22 = Object.getOwnPropertyNames
    var __getProtoOf22 = Object.getPrototypeOf
    var __hasOwnProp22 = Object.prototype.hasOwnProperty
    var __commonJS22 = (cb, mod) =>
      function __require() {
        return (
          mod ||
            (0, cb[__getOwnPropNames22(cb)[0]])(
              (mod = { exports: {} }).exports,
              mod,
            ),
          mod.exports
        )
      }
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp22(target, name, { get: all[name], enumerable: true })
    }
    var __copyProps22 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames22(from))
          if (!__hasOwnProp22.call(to, key) && key !== except)
            __defProp22(to, key, {
              get: () => from[key],
              enumerable:
                !(desc = __getOwnPropDesc22(from, key)) || desc.enumerable,
            })
      }
      return to
    }
    var __toESM22 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create22(__getProtoOf22(mod)) : {}),
      __copyProps22(
        // If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule
          ? __defProp22(target, 'default', {
              value: mod,
              enumerable: true,
            })
          : target,
        mod,
      )
    )
    var __toCommonJS = (mod) =>
      __copyProps22(__defProp22({}, '__esModule', { value: true }), mod)
    var require_db2 = __commonJS22({
      'node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json'(
        exports2,
        module2,
      ) {
        module2.exports = {
          'application/1d-interleaved-parityfec': { source: 'iana' },
          'application/3gpdash-qoe-report+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/3gpp-ims+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/3gpphal+json': {
            source: 'iana',
            compressible: true,
          },
          'application/3gpphalforms+json': {
            source: 'iana',
            compressible: true,
          },
          'application/a2l': { source: 'iana' },
          'application/ace+cbor': { source: 'iana' },
          'application/activemessage': { source: 'iana' },
          'application/activity+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-costmap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-costmapfilter+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-directory+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointcost+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointcostparams+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointprop+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointpropparams+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-error+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-networkmap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-networkmapfilter+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-updatestreamcontrol+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-updatestreamparams+json': {
            source: 'iana',
            compressible: true,
          },
          'application/aml': { source: 'iana' },
          'application/andrew-inset': {
            source: 'iana',
            extensions: ['ez'],
          },
          'application/applefile': { source: 'iana' },
          'application/applixware': {
            source: 'apache',
            extensions: ['aw'],
          },
          'application/at+jwt': { source: 'iana' },
          'application/atf': { source: 'iana' },
          'application/atfx': { source: 'iana' },
          'application/atom+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['atom'],
          },
          'application/atomcat+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['atomcat'],
          },
          'application/atomdeleted+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['atomdeleted'],
          },
          'application/atomicmail': { source: 'iana' },
          'application/atomsvc+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['atomsvc'],
          },
          'application/atsc-dwd+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['dwd'],
          },
          'application/atsc-dynamic-event-message': {
            source: 'iana',
          },
          'application/atsc-held+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['held'],
          },
          'application/atsc-rdt+json': {
            source: 'iana',
            compressible: true,
          },
          'application/atsc-rsat+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rsat'],
          },
          'application/atxml': { source: 'iana' },
          'application/auth-policy+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/bacnet-xdd+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/batch-smtp': { source: 'iana' },
          'application/bdoc': {
            compressible: false,
            extensions: ['bdoc'],
          },
          'application/beep+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/calendar+json': {
            source: 'iana',
            compressible: true,
          },
          'application/calendar+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xcs'],
          },
          'application/call-completion': { source: 'iana' },
          'application/cals-1840': { source: 'iana' },
          'application/captive+json': {
            source: 'iana',
            compressible: true,
          },
          'application/cbor': { source: 'iana' },
          'application/cbor-seq': { source: 'iana' },
          'application/cccex': { source: 'iana' },
          'application/ccmp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/ccxml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['ccxml'],
          },
          'application/cdfx+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['cdfx'],
          },
          'application/cdmi-capability': {
            source: 'iana',
            extensions: ['cdmia'],
          },
          'application/cdmi-container': {
            source: 'iana',
            extensions: ['cdmic'],
          },
          'application/cdmi-domain': {
            source: 'iana',
            extensions: ['cdmid'],
          },
          'application/cdmi-object': {
            source: 'iana',
            extensions: ['cdmio'],
          },
          'application/cdmi-queue': {
            source: 'iana',
            extensions: ['cdmiq'],
          },
          'application/cdni': { source: 'iana' },
          'application/cea': { source: 'iana' },
          'application/cea-2018+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/cellml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/cfw': { source: 'iana' },
          'application/city+json': {
            source: 'iana',
            compressible: true,
          },
          'application/clr': { source: 'iana' },
          'application/clue+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/clue_info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/cms': { source: 'iana' },
          'application/cnrp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/coap-group+json': {
            source: 'iana',
            compressible: true,
          },
          'application/coap-payload': { source: 'iana' },
          'application/commonground': { source: 'iana' },
          'application/conference-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/cose': { source: 'iana' },
          'application/cose-key': { source: 'iana' },
          'application/cose-key-set': { source: 'iana' },
          'application/cpl+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['cpl'],
          },
          'application/csrattrs': { source: 'iana' },
          'application/csta+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/cstadata+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/csvm+json': {
            source: 'iana',
            compressible: true,
          },
          'application/cu-seeme': {
            source: 'apache',
            extensions: ['cu'],
          },
          'application/cwt': { source: 'iana' },
          'application/cybercash': { source: 'iana' },
          'application/dart': { compressible: true },
          'application/dash+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mpd'],
          },
          'application/dash-patch+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mpp'],
          },
          'application/dashdelta': { source: 'iana' },
          'application/davmount+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['davmount'],
          },
          'application/dca-rft': { source: 'iana' },
          'application/dcd': { source: 'iana' },
          'application/dec-dx': { source: 'iana' },
          'application/dialog-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/dicom': { source: 'iana' },
          'application/dicom+json': {
            source: 'iana',
            compressible: true,
          },
          'application/dicom+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/dii': { source: 'iana' },
          'application/dit': { source: 'iana' },
          'application/dns': { source: 'iana' },
          'application/dns+json': {
            source: 'iana',
            compressible: true,
          },
          'application/dns-message': { source: 'iana' },
          'application/docbook+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['dbk'],
          },
          'application/dots+cbor': { source: 'iana' },
          'application/dskpp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/dssc+der': {
            source: 'iana',
            extensions: ['dssc'],
          },
          'application/dssc+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xdssc'],
          },
          'application/dvcs': { source: 'iana' },
          'application/ecmascript': {
            source: 'iana',
            compressible: true,
            extensions: ['es', 'ecma'],
          },
          'application/edi-consent': { source: 'iana' },
          'application/edi-x12': {
            source: 'iana',
            compressible: false,
          },
          'application/edifact': {
            source: 'iana',
            compressible: false,
          },
          'application/efi': { source: 'iana' },
          'application/elm+json': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/elm+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.cap+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/emergencycalldata.comment+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.control+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.deviceinfo+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.ecall.msd': {
            source: 'iana',
          },
          'application/emergencycalldata.providerinfo+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.serviceinfo+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.subscriberinfo+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emergencycalldata.veds+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/emma+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['emma'],
          },
          'application/emotionml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['emotionml'],
          },
          'application/encaprtp': { source: 'iana' },
          'application/epp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/epub+zip': {
            source: 'iana',
            compressible: false,
            extensions: ['epub'],
          },
          'application/eshop': { source: 'iana' },
          'application/exi': { source: 'iana', extensions: ['exi'] },
          'application/expect-ct-report+json': {
            source: 'iana',
            compressible: true,
          },
          'application/express': {
            source: 'iana',
            extensions: ['exp'],
          },
          'application/fastinfoset': { source: 'iana' },
          'application/fastsoap': { source: 'iana' },
          'application/fdt+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['fdt'],
          },
          'application/fhir+json': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/fhir+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/fido.trusted-apps+json': {
            compressible: true,
          },
          'application/fits': { source: 'iana' },
          'application/flexfec': { source: 'iana' },
          'application/font-sfnt': { source: 'iana' },
          'application/font-tdpfr': {
            source: 'iana',
            extensions: ['pfr'],
          },
          'application/font-woff': {
            source: 'iana',
            compressible: false,
          },
          'application/framework-attributes+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/geo+json': {
            source: 'iana',
            compressible: true,
            extensions: ['geojson'],
          },
          'application/geo+json-seq': { source: 'iana' },
          'application/geopackage+sqlite3': { source: 'iana' },
          'application/geoxacml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/gltf-buffer': { source: 'iana' },
          'application/gml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['gml'],
          },
          'application/gpx+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['gpx'],
          },
          'application/gxf': {
            source: 'apache',
            extensions: ['gxf'],
          },
          'application/gzip': {
            source: 'iana',
            compressible: false,
            extensions: ['gz'],
          },
          'application/h224': { source: 'iana' },
          'application/held+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/hjson': { extensions: ['hjson'] },
          'application/http': { source: 'iana' },
          'application/hyperstudio': {
            source: 'iana',
            extensions: ['stk'],
          },
          'application/ibe-key-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/ibe-pkg-reply+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/ibe-pp-data': { source: 'iana' },
          'application/iges': { source: 'iana' },
          'application/im-iscomposing+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/index': { source: 'iana' },
          'application/index.cmd': { source: 'iana' },
          'application/index.obj': { source: 'iana' },
          'application/index.response': { source: 'iana' },
          'application/index.vnd': { source: 'iana' },
          'application/inkml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['ink', 'inkml'],
          },
          'application/iotp': { source: 'iana' },
          'application/ipfix': {
            source: 'iana',
            extensions: ['ipfix'],
          },
          'application/ipp': { source: 'iana' },
          'application/isup': { source: 'iana' },
          'application/its+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['its'],
          },
          'application/java-archive': {
            source: 'apache',
            compressible: false,
            extensions: ['jar', 'war', 'ear'],
          },
          'application/java-serialized-object': {
            source: 'apache',
            compressible: false,
            extensions: ['ser'],
          },
          'application/java-vm': {
            source: 'apache',
            compressible: false,
            extensions: ['class'],
          },
          'application/javascript': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['js', 'mjs'],
          },
          'application/jf2feed+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jose': { source: 'iana' },
          'application/jose+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jrd+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jscalendar+json': {
            source: 'iana',
            compressible: true,
          },
          'application/json': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['json', 'map'],
          },
          'application/json-patch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/json-seq': { source: 'iana' },
          'application/json5': { extensions: ['json5'] },
          'application/jsonml+json': {
            source: 'apache',
            compressible: true,
            extensions: ['jsonml'],
          },
          'application/jwk+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jwk-set+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jwt': { source: 'iana' },
          'application/kpml-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/kpml-response+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/ld+json': {
            source: 'iana',
            compressible: true,
            extensions: ['jsonld'],
          },
          'application/lgr+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['lgr'],
          },
          'application/link-format': { source: 'iana' },
          'application/load-control+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/lost+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['lostxml'],
          },
          'application/lostsync+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/lpf+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/lxf': { source: 'iana' },
          'application/mac-binhex40': {
            source: 'iana',
            extensions: ['hqx'],
          },
          'application/mac-compactpro': {
            source: 'apache',
            extensions: ['cpt'],
          },
          'application/macwriteii': { source: 'iana' },
          'application/mads+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mads'],
          },
          'application/manifest+json': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['webmanifest'],
          },
          'application/marc': { source: 'iana', extensions: ['mrc'] },
          'application/marcxml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mrcx'],
          },
          'application/mathematica': {
            source: 'iana',
            extensions: ['ma', 'nb', 'mb'],
          },
          'application/mathml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mathml'],
          },
          'application/mathml-content+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mathml-presentation+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-associated-procedure-description+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-deregister+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-envelope+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-msk+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-msk-response+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-protection-description+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-reception-report+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-register+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-register-response+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-schedule+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbms-user-service-description+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mbox': {
            source: 'iana',
            extensions: ['mbox'],
          },
          'application/media-policy-dataset+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mpf'],
          },
          'application/media_control+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mediaservercontrol+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mscml'],
          },
          'application/merge-patch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/metalink+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['metalink'],
          },
          'application/metalink4+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['meta4'],
          },
          'application/mets+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mets'],
          },
          'application/mf4': { source: 'iana' },
          'application/mikey': { source: 'iana' },
          'application/mipc': { source: 'iana' },
          'application/missing-blocks+cbor-seq': { source: 'iana' },
          'application/mmt-aei+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['maei'],
          },
          'application/mmt-usd+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['musd'],
          },
          'application/mods+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mods'],
          },
          'application/moss-keys': { source: 'iana' },
          'application/moss-signature': { source: 'iana' },
          'application/mosskey-data': { source: 'iana' },
          'application/mosskey-request': { source: 'iana' },
          'application/mp21': {
            source: 'iana',
            extensions: ['m21', 'mp21'],
          },
          'application/mp4': {
            source: 'iana',
            extensions: ['mp4s', 'm4p'],
          },
          'application/mpeg4-generic': { source: 'iana' },
          'application/mpeg4-iod': { source: 'iana' },
          'application/mpeg4-iod-xmt': { source: 'iana' },
          'application/mrb-consumer+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/mrb-publish+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/msc-ivr+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/msc-mixer+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/msword': {
            source: 'iana',
            compressible: false,
            extensions: ['doc', 'dot'],
          },
          'application/mud+json': {
            source: 'iana',
            compressible: true,
          },
          'application/multipart-core': { source: 'iana' },
          'application/mxf': { source: 'iana', extensions: ['mxf'] },
          'application/n-quads': {
            source: 'iana',
            extensions: ['nq'],
          },
          'application/n-triples': {
            source: 'iana',
            extensions: ['nt'],
          },
          'application/nasdata': { source: 'iana' },
          'application/news-checkgroups': {
            source: 'iana',
            charset: 'US-ASCII',
          },
          'application/news-groupinfo': {
            source: 'iana',
            charset: 'US-ASCII',
          },
          'application/news-transmission': { source: 'iana' },
          'application/nlsml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/node': { source: 'iana', extensions: ['cjs'] },
          'application/nss': { source: 'iana' },
          'application/oauth-authz-req+jwt': { source: 'iana' },
          'application/oblivious-dns-message': { source: 'iana' },
          'application/ocsp-request': { source: 'iana' },
          'application/ocsp-response': { source: 'iana' },
          'application/octet-stream': {
            source: 'iana',
            compressible: false,
            extensions: [
              'bin',
              'dms',
              'lrf',
              'mar',
              'so',
              'dist',
              'distz',
              'pkg',
              'bpk',
              'dump',
              'elc',
              'deploy',
              'exe',
              'dll',
              'deb',
              'dmg',
              'iso',
              'img',
              'msi',
              'msp',
              'msm',
              'buffer',
            ],
          },
          'application/oda': { source: 'iana', extensions: ['oda'] },
          'application/odm+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/odx': { source: 'iana' },
          'application/oebps-package+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['opf'],
          },
          'application/ogg': {
            source: 'iana',
            compressible: false,
            extensions: ['ogx'],
          },
          'application/omdoc+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['omdoc'],
          },
          'application/onenote': {
            source: 'apache',
            extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg'],
          },
          'application/opc-nodeset+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/oscore': { source: 'iana' },
          'application/oxps': {
            source: 'iana',
            extensions: ['oxps'],
          },
          'application/p21': { source: 'iana' },
          'application/p21+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/p2p-overlay+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['relo'],
          },
          'application/parityfec': { source: 'iana' },
          'application/passport': { source: 'iana' },
          'application/patch-ops-error+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xer'],
          },
          'application/pdf': {
            source: 'iana',
            compressible: false,
            extensions: ['pdf'],
          },
          'application/pdx': { source: 'iana' },
          'application/pem-certificate-chain': { source: 'iana' },
          'application/pgp-encrypted': {
            source: 'iana',
            compressible: false,
            extensions: ['pgp'],
          },
          'application/pgp-keys': {
            source: 'iana',
            extensions: ['asc'],
          },
          'application/pgp-signature': {
            source: 'iana',
            extensions: ['asc', 'sig'],
          },
          'application/pics-rules': {
            source: 'apache',
            extensions: ['prf'],
          },
          'application/pidf+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/pidf-diff+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/pkcs10': {
            source: 'iana',
            extensions: ['p10'],
          },
          'application/pkcs12': { source: 'iana' },
          'application/pkcs7-mime': {
            source: 'iana',
            extensions: ['p7m', 'p7c'],
          },
          'application/pkcs7-signature': {
            source: 'iana',
            extensions: ['p7s'],
          },
          'application/pkcs8': { source: 'iana', extensions: ['p8'] },
          'application/pkcs8-encrypted': { source: 'iana' },
          'application/pkix-attr-cert': {
            source: 'iana',
            extensions: ['ac'],
          },
          'application/pkix-cert': {
            source: 'iana',
            extensions: ['cer'],
          },
          'application/pkix-crl': {
            source: 'iana',
            extensions: ['crl'],
          },
          'application/pkix-pkipath': {
            source: 'iana',
            extensions: ['pkipath'],
          },
          'application/pkixcmp': {
            source: 'iana',
            extensions: ['pki'],
          },
          'application/pls+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['pls'],
          },
          'application/poc-settings+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/postscript': {
            source: 'iana',
            compressible: true,
            extensions: ['ai', 'eps', 'ps'],
          },
          'application/ppsp-tracker+json': {
            source: 'iana',
            compressible: true,
          },
          'application/problem+json': {
            source: 'iana',
            compressible: true,
          },
          'application/problem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/provenance+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['provx'],
          },
          'application/prs.alvestrand.titrax-sheet': {
            source: 'iana',
          },
          'application/prs.cww': {
            source: 'iana',
            extensions: ['cww'],
          },
          'application/prs.cyn': { source: 'iana', charset: '7-BIT' },
          'application/prs.hpub+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/prs.nprend': { source: 'iana' },
          'application/prs.plucker': { source: 'iana' },
          'application/prs.rdf-xml-crypt': { source: 'iana' },
          'application/prs.xsf+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/pskc+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['pskcxml'],
          },
          'application/pvd+json': {
            source: 'iana',
            compressible: true,
          },
          'application/qsig': { source: 'iana' },
          'application/raml+yaml': {
            compressible: true,
            extensions: ['raml'],
          },
          'application/raptorfec': { source: 'iana' },
          'application/rdap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/rdf+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rdf', 'owl'],
          },
          'application/reginfo+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rif'],
          },
          'application/relax-ng-compact-syntax': {
            source: 'iana',
            extensions: ['rnc'],
          },
          'application/remote-printing': { source: 'iana' },
          'application/reputon+json': {
            source: 'iana',
            compressible: true,
          },
          'application/resource-lists+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rl'],
          },
          'application/resource-lists-diff+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rld'],
          },
          'application/rfc+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/riscos': { source: 'iana' },
          'application/rlmi+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/rls-services+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rs'],
          },
          'application/route-apd+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rapd'],
          },
          'application/route-s-tsid+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['sls'],
          },
          'application/route-usd+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rusd'],
          },
          'application/rpki-ghostbusters': {
            source: 'iana',
            extensions: ['gbr'],
          },
          'application/rpki-manifest': {
            source: 'iana',
            extensions: ['mft'],
          },
          'application/rpki-publication': { source: 'iana' },
          'application/rpki-roa': {
            source: 'iana',
            extensions: ['roa'],
          },
          'application/rpki-updown': { source: 'iana' },
          'application/rsd+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['rsd'],
          },
          'application/rss+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['rss'],
          },
          'application/rtf': {
            source: 'iana',
            compressible: true,
            extensions: ['rtf'],
          },
          'application/rtploopback': { source: 'iana' },
          'application/rtx': { source: 'iana' },
          'application/samlassertion+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/samlmetadata+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/sarif+json': {
            source: 'iana',
            compressible: true,
          },
          'application/sarif-external-properties+json': {
            source: 'iana',
            compressible: true,
          },
          'application/sbe': { source: 'iana' },
          'application/sbml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['sbml'],
          },
          'application/scaip+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/scim+json': {
            source: 'iana',
            compressible: true,
          },
          'application/scvp-cv-request': {
            source: 'iana',
            extensions: ['scq'],
          },
          'application/scvp-cv-response': {
            source: 'iana',
            extensions: ['scs'],
          },
          'application/scvp-vp-request': {
            source: 'iana',
            extensions: ['spq'],
          },
          'application/scvp-vp-response': {
            source: 'iana',
            extensions: ['spp'],
          },
          'application/sdp': { source: 'iana', extensions: ['sdp'] },
          'application/secevent+jwt': { source: 'iana' },
          'application/senml+cbor': { source: 'iana' },
          'application/senml+json': {
            source: 'iana',
            compressible: true,
          },
          'application/senml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['senmlx'],
          },
          'application/senml-etch+cbor': { source: 'iana' },
          'application/senml-etch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/senml-exi': { source: 'iana' },
          'application/sensml+cbor': { source: 'iana' },
          'application/sensml+json': {
            source: 'iana',
            compressible: true,
          },
          'application/sensml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['sensmlx'],
          },
          'application/sensml-exi': { source: 'iana' },
          'application/sep+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/sep-exi': { source: 'iana' },
          'application/session-info': { source: 'iana' },
          'application/set-payment': { source: 'iana' },
          'application/set-payment-initiation': {
            source: 'iana',
            extensions: ['setpay'],
          },
          'application/set-registration': { source: 'iana' },
          'application/set-registration-initiation': {
            source: 'iana',
            extensions: ['setreg'],
          },
          'application/sgml': { source: 'iana' },
          'application/sgml-open-catalog': { source: 'iana' },
          'application/shf+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['shf'],
          },
          'application/sieve': {
            source: 'iana',
            extensions: ['siv', 'sieve'],
          },
          'application/simple-filter+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/simple-message-summary': { source: 'iana' },
          'application/simplesymbolcontainer': { source: 'iana' },
          'application/sipc': { source: 'iana' },
          'application/slate': { source: 'iana' },
          'application/smil': { source: 'iana' },
          'application/smil+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['smi', 'smil'],
          },
          'application/smpte336m': { source: 'iana' },
          'application/soap+fastinfoset': { source: 'iana' },
          'application/soap+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/sparql-query': {
            source: 'iana',
            extensions: ['rq'],
          },
          'application/sparql-results+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['srx'],
          },
          'application/spdx+json': {
            source: 'iana',
            compressible: true,
          },
          'application/spirits-event+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/sql': { source: 'iana' },
          'application/srgs': {
            source: 'iana',
            extensions: ['gram'],
          },
          'application/srgs+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['grxml'],
          },
          'application/sru+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['sru'],
          },
          'application/ssdl+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['ssdl'],
          },
          'application/ssml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['ssml'],
          },
          'application/stix+json': {
            source: 'iana',
            compressible: true,
          },
          'application/swid+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['swidtag'],
          },
          'application/tamp-apex-update': { source: 'iana' },
          'application/tamp-apex-update-confirm': { source: 'iana' },
          'application/tamp-community-update': { source: 'iana' },
          'application/tamp-community-update-confirm': {
            source: 'iana',
          },
          'application/tamp-error': { source: 'iana' },
          'application/tamp-sequence-adjust': { source: 'iana' },
          'application/tamp-sequence-adjust-confirm': {
            source: 'iana',
          },
          'application/tamp-status-query': { source: 'iana' },
          'application/tamp-status-response': { source: 'iana' },
          'application/tamp-update': { source: 'iana' },
          'application/tamp-update-confirm': { source: 'iana' },
          'application/tar': { compressible: true },
          'application/taxii+json': {
            source: 'iana',
            compressible: true,
          },
          'application/td+json': {
            source: 'iana',
            compressible: true,
          },
          'application/tei+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['tei', 'teicorpus'],
          },
          'application/tetra_isi': { source: 'iana' },
          'application/thraud+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['tfi'],
          },
          'application/timestamp-query': { source: 'iana' },
          'application/timestamp-reply': { source: 'iana' },
          'application/timestamped-data': {
            source: 'iana',
            extensions: ['tsd'],
          },
          'application/tlsrpt+gzip': { source: 'iana' },
          'application/tlsrpt+json': {
            source: 'iana',
            compressible: true,
          },
          'application/tnauthlist': { source: 'iana' },
          'application/token-introspection+jwt': { source: 'iana' },
          'application/toml': {
            compressible: true,
            extensions: ['toml'],
          },
          'application/trickle-ice-sdpfrag': { source: 'iana' },
          'application/trig': {
            source: 'iana',
            extensions: ['trig'],
          },
          'application/ttml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['ttml'],
          },
          'application/tve-trigger': { source: 'iana' },
          'application/tzif': { source: 'iana' },
          'application/tzif-leap': { source: 'iana' },
          'application/ubjson': {
            compressible: false,
            extensions: ['ubj'],
          },
          'application/ulpfec': { source: 'iana' },
          'application/urc-grpsheet+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/urc-ressheet+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rsheet'],
          },
          'application/urc-targetdesc+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['td'],
          },
          'application/urc-uisocketdesc+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vcard+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vcard+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vemmi': { source: 'iana' },
          'application/vividence.scriptfile': { source: 'apache' },
          'application/vnd.1000minds.decision-model+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['1km'],
          },
          'application/vnd.3gpp-prose+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp-prose-pc3ch+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp-v2x-local-service-information': {
            source: 'iana',
          },
          'application/vnd.3gpp.5gnas': { source: 'iana' },
          'application/vnd.3gpp.access-transfer-events+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.bsf+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.gmop+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.gtpc': { source: 'iana' },
          'application/vnd.3gpp.interworking-data': {
            source: 'iana',
          },
          'application/vnd.3gpp.lpp': { source: 'iana' },
          'application/vnd.3gpp.mc-signalling-ear': {
            source: 'iana',
          },
          'application/vnd.3gpp.mcdata-affiliation-command+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcdata-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcdata-payload': { source: 'iana' },
          'application/vnd.3gpp.mcdata-service-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcdata-signalling': {
            source: 'iana',
          },
          'application/vnd.3gpp.mcdata-ue-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcdata-user-profile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-affiliation-command+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-floor-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-location-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-mbms-usage-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-service-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-signed+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-ue-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-ue-init-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcptt-user-profile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-affiliation-command+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-affiliation-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-location-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-mbms-usage-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-service-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-transmission-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-ue-config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mcvideo-user-profile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.mid-call+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.ngap': { source: 'iana' },
          'application/vnd.3gpp.pfcp': { source: 'iana' },
          'application/vnd.3gpp.pic-bw-large': {
            source: 'iana',
            extensions: ['plb'],
          },
          'application/vnd.3gpp.pic-bw-small': {
            source: 'iana',
            extensions: ['psb'],
          },
          'application/vnd.3gpp.pic-bw-var': {
            source: 'iana',
            extensions: ['pvb'],
          },
          'application/vnd.3gpp.s1ap': { source: 'iana' },
          'application/vnd.3gpp.sms': { source: 'iana' },
          'application/vnd.3gpp.sms+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.srvcc-ext+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.srvcc-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.state-and-event-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp.ussd+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp2.bcmcsinfo+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.3gpp2.sms': { source: 'iana' },
          'application/vnd.3gpp2.tcap': {
            source: 'iana',
            extensions: ['tcap'],
          },
          'application/vnd.3lightssoftware.imagescal': {
            source: 'iana',
          },
          'application/vnd.3m.post-it-notes': {
            source: 'iana',
            extensions: ['pwn'],
          },
          'application/vnd.accpac.simply.aso': {
            source: 'iana',
            extensions: ['aso'],
          },
          'application/vnd.accpac.simply.imp': {
            source: 'iana',
            extensions: ['imp'],
          },
          'application/vnd.acucobol': {
            source: 'iana',
            extensions: ['acu'],
          },
          'application/vnd.acucorp': {
            source: 'iana',
            extensions: ['atc', 'acutc'],
          },
          'application/vnd.adobe.air-application-installer-package+zip': {
            source: 'apache',
            compressible: false,
            extensions: ['air'],
          },
          'application/vnd.adobe.flash.movie': { source: 'iana' },
          'application/vnd.adobe.formscentral.fcdt': {
            source: 'iana',
            extensions: ['fcdt'],
          },
          'application/vnd.adobe.fxp': {
            source: 'iana',
            extensions: ['fxp', 'fxpl'],
          },
          'application/vnd.adobe.partial-upload': { source: 'iana' },
          'application/vnd.adobe.xdp+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xdp'],
          },
          'application/vnd.adobe.xfdf': {
            source: 'iana',
            extensions: ['xfdf'],
          },
          'application/vnd.aether.imp': { source: 'iana' },
          'application/vnd.afpc.afplinedata': { source: 'iana' },
          'application/vnd.afpc.afplinedata-pagedef': {
            source: 'iana',
          },
          'application/vnd.afpc.cmoca-cmresource': { source: 'iana' },
          'application/vnd.afpc.foca-charset': { source: 'iana' },
          'application/vnd.afpc.foca-codedfont': { source: 'iana' },
          'application/vnd.afpc.foca-codepage': { source: 'iana' },
          'application/vnd.afpc.modca': { source: 'iana' },
          'application/vnd.afpc.modca-cmtable': { source: 'iana' },
          'application/vnd.afpc.modca-formdef': { source: 'iana' },
          'application/vnd.afpc.modca-mediummap': { source: 'iana' },
          'application/vnd.afpc.modca-objectcontainer': {
            source: 'iana',
          },
          'application/vnd.afpc.modca-overlay': { source: 'iana' },
          'application/vnd.afpc.modca-pagesegment': {
            source: 'iana',
          },
          'application/vnd.age': {
            source: 'iana',
            extensions: ['age'],
          },
          'application/vnd.ah-barcode': { source: 'iana' },
          'application/vnd.ahead.space': {
            source: 'iana',
            extensions: ['ahead'],
          },
          'application/vnd.airzip.filesecure.azf': {
            source: 'iana',
            extensions: ['azf'],
          },
          'application/vnd.airzip.filesecure.azs': {
            source: 'iana',
            extensions: ['azs'],
          },
          'application/vnd.amadeus+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.amazon.ebook': {
            source: 'apache',
            extensions: ['azw'],
          },
          'application/vnd.amazon.mobi8-ebook': { source: 'iana' },
          'application/vnd.americandynamics.acc': {
            source: 'iana',
            extensions: ['acc'],
          },
          'application/vnd.amiga.ami': {
            source: 'iana',
            extensions: ['ami'],
          },
          'application/vnd.amundsen.maze+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.android.ota': { source: 'iana' },
          'application/vnd.android.package-archive': {
            source: 'apache',
            compressible: false,
            extensions: ['apk'],
          },
          'application/vnd.anki': { source: 'iana' },
          'application/vnd.anser-web-certificate-issue-initiation': {
            source: 'iana',
            extensions: ['cii'],
          },
          'application/vnd.anser-web-funds-transfer-initiation': {
            source: 'apache',
            extensions: ['fti'],
          },
          'application/vnd.antix.game-component': {
            source: 'iana',
            extensions: ['atx'],
          },
          'application/vnd.apache.arrow.file': { source: 'iana' },
          'application/vnd.apache.arrow.stream': { source: 'iana' },
          'application/vnd.apache.thrift.binary': { source: 'iana' },
          'application/vnd.apache.thrift.compact': { source: 'iana' },
          'application/vnd.apache.thrift.json': { source: 'iana' },
          'application/vnd.api+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.aplextor.warrp+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.apothekende.reservation+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.apple.installer+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mpkg'],
          },
          'application/vnd.apple.keynote': {
            source: 'iana',
            extensions: ['key'],
          },
          'application/vnd.apple.mpegurl': {
            source: 'iana',
            extensions: ['m3u8'],
          },
          'application/vnd.apple.numbers': {
            source: 'iana',
            extensions: ['numbers'],
          },
          'application/vnd.apple.pages': {
            source: 'iana',
            extensions: ['pages'],
          },
          'application/vnd.apple.pkpass': {
            compressible: false,
            extensions: ['pkpass'],
          },
          'application/vnd.arastra.swi': { source: 'iana' },
          'application/vnd.aristanetworks.swi': {
            source: 'iana',
            extensions: ['swi'],
          },
          'application/vnd.artisan+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.artsquare': { source: 'iana' },
          'application/vnd.astraea-software.iota': {
            source: 'iana',
            extensions: ['iota'],
          },
          'application/vnd.audiograph': {
            source: 'iana',
            extensions: ['aep'],
          },
          'application/vnd.autopackage': { source: 'iana' },
          'application/vnd.avalon+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.avistar+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.balsamiq.bmml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['bmml'],
          },
          'application/vnd.balsamiq.bmpr': { source: 'iana' },
          'application/vnd.banana-accounting': { source: 'iana' },
          'application/vnd.bbf.usp.error': { source: 'iana' },
          'application/vnd.bbf.usp.msg': { source: 'iana' },
          'application/vnd.bbf.usp.msg+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.bekitzur-stech+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.bint.med-content': { source: 'iana' },
          'application/vnd.biopax.rdf+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.blink-idb-value-wrapper': {
            source: 'iana',
          },
          'application/vnd.blueice.multipass': {
            source: 'iana',
            extensions: ['mpm'],
          },
          'application/vnd.bluetooth.ep.oob': { source: 'iana' },
          'application/vnd.bluetooth.le.oob': { source: 'iana' },
          'application/vnd.bmi': {
            source: 'iana',
            extensions: ['bmi'],
          },
          'application/vnd.bpf': { source: 'iana' },
          'application/vnd.bpf3': { source: 'iana' },
          'application/vnd.businessobjects': {
            source: 'iana',
            extensions: ['rep'],
          },
          'application/vnd.byu.uapi+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cab-jscript': { source: 'iana' },
          'application/vnd.canon-cpdl': { source: 'iana' },
          'application/vnd.canon-lips': { source: 'iana' },
          'application/vnd.capasystems-pg+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cendio.thinlinc.clientconf': {
            source: 'iana',
          },
          'application/vnd.century-systems.tcp_stream': {
            source: 'iana',
          },
          'application/vnd.chemdraw+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['cdxml'],
          },
          'application/vnd.chess-pgn': { source: 'iana' },
          'application/vnd.chipnuts.karaoke-mmd': {
            source: 'iana',
            extensions: ['mmd'],
          },
          'application/vnd.ciedi': { source: 'iana' },
          'application/vnd.cinderella': {
            source: 'iana',
            extensions: ['cdy'],
          },
          'application/vnd.cirpack.isdn-ext': { source: 'iana' },
          'application/vnd.citationstyles.style+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['csl'],
          },
          'application/vnd.claymore': {
            source: 'iana',
            extensions: ['cla'],
          },
          'application/vnd.cloanto.rp9': {
            source: 'iana',
            extensions: ['rp9'],
          },
          'application/vnd.clonk.c4group': {
            source: 'iana',
            extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u'],
          },
          'application/vnd.cluetrust.cartomobile-config': {
            source: 'iana',
            extensions: ['c11amc'],
          },
          'application/vnd.cluetrust.cartomobile-config-pkg': {
            source: 'iana',
            extensions: ['c11amz'],
          },
          'application/vnd.coffeescript': { source: 'iana' },
          'application/vnd.collabio.xodocuments.document': {
            source: 'iana',
          },
          'application/vnd.collabio.xodocuments.document-template': {
            source: 'iana',
          },
          'application/vnd.collabio.xodocuments.presentation': {
            source: 'iana',
          },
          'application/vnd.collabio.xodocuments.presentation-template': {
            source: 'iana',
          },
          'application/vnd.collabio.xodocuments.spreadsheet': {
            source: 'iana',
          },
          'application/vnd.collabio.xodocuments.spreadsheet-template': {
            source: 'iana',
          },
          'application/vnd.collection+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.collection.doc+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.collection.next+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.comicbook+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.comicbook-rar': { source: 'iana' },
          'application/vnd.commerce-battelle': { source: 'iana' },
          'application/vnd.commonspace': {
            source: 'iana',
            extensions: ['csp'],
          },
          'application/vnd.contact.cmsg': {
            source: 'iana',
            extensions: ['cdbcmsg'],
          },
          'application/vnd.coreos.ignition+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cosmocaller': {
            source: 'iana',
            extensions: ['cmc'],
          },
          'application/vnd.crick.clicker': {
            source: 'iana',
            extensions: ['clkx'],
          },
          'application/vnd.crick.clicker.keyboard': {
            source: 'iana',
            extensions: ['clkk'],
          },
          'application/vnd.crick.clicker.palette': {
            source: 'iana',
            extensions: ['clkp'],
          },
          'application/vnd.crick.clicker.template': {
            source: 'iana',
            extensions: ['clkt'],
          },
          'application/vnd.crick.clicker.wordbank': {
            source: 'iana',
            extensions: ['clkw'],
          },
          'application/vnd.criticaltools.wbs+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['wbs'],
          },
          'application/vnd.cryptii.pipe+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.crypto-shade-file': { source: 'iana' },
          'application/vnd.cryptomator.encrypted': { source: 'iana' },
          'application/vnd.cryptomator.vault': { source: 'iana' },
          'application/vnd.ctc-posml': {
            source: 'iana',
            extensions: ['pml'],
          },
          'application/vnd.ctct.ws+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cups-pdf': { source: 'iana' },
          'application/vnd.cups-postscript': { source: 'iana' },
          'application/vnd.cups-ppd': {
            source: 'iana',
            extensions: ['ppd'],
          },
          'application/vnd.cups-raster': { source: 'iana' },
          'application/vnd.cups-raw': { source: 'iana' },
          'application/vnd.curl': { source: 'iana' },
          'application/vnd.curl.car': {
            source: 'apache',
            extensions: ['car'],
          },
          'application/vnd.curl.pcurl': {
            source: 'apache',
            extensions: ['pcurl'],
          },
          'application/vnd.cyan.dean.root+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cybank': { source: 'iana' },
          'application/vnd.cyclonedx+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.cyclonedx+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.d2l.coursepackage1p0+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.d3m-dataset': { source: 'iana' },
          'application/vnd.d3m-problem': { source: 'iana' },
          'application/vnd.dart': {
            source: 'iana',
            compressible: true,
            extensions: ['dart'],
          },
          'application/vnd.data-vision.rdz': {
            source: 'iana',
            extensions: ['rdz'],
          },
          'application/vnd.datapackage+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dataresource+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dbf': {
            source: 'iana',
            extensions: ['dbf'],
          },
          'application/vnd.debian.binary-package': { source: 'iana' },
          'application/vnd.dece.data': {
            source: 'iana',
            extensions: ['uvf', 'uvvf', 'uvd', 'uvvd'],
          },
          'application/vnd.dece.ttml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['uvt', 'uvvt'],
          },
          'application/vnd.dece.unspecified': {
            source: 'iana',
            extensions: ['uvx', 'uvvx'],
          },
          'application/vnd.dece.zip': {
            source: 'iana',
            extensions: ['uvz', 'uvvz'],
          },
          'application/vnd.denovo.fcselayout-link': {
            source: 'iana',
            extensions: ['fe_launch'],
          },
          'application/vnd.desmume.movie': { source: 'iana' },
          'application/vnd.dir-bi.plate-dl-nosuffix': {
            source: 'iana',
          },
          'application/vnd.dm.delegation+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dna': {
            source: 'iana',
            extensions: ['dna'],
          },
          'application/vnd.document+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dolby.mlp': {
            source: 'apache',
            extensions: ['mlp'],
          },
          'application/vnd.dolby.mobile.1': { source: 'iana' },
          'application/vnd.dolby.mobile.2': { source: 'iana' },
          'application/vnd.doremir.scorecloud-binary-document': {
            source: 'iana',
          },
          'application/vnd.dpgraph': {
            source: 'iana',
            extensions: ['dpg'],
          },
          'application/vnd.dreamfactory': {
            source: 'iana',
            extensions: ['dfac'],
          },
          'application/vnd.drive+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ds-keypoint': {
            source: 'apache',
            extensions: ['kpxx'],
          },
          'application/vnd.dtg.local': { source: 'iana' },
          'application/vnd.dtg.local.flash': { source: 'iana' },
          'application/vnd.dtg.local.html': { source: 'iana' },
          'application/vnd.dvb.ait': {
            source: 'iana',
            extensions: ['ait'],
          },
          'application/vnd.dvb.dvbisl+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.dvbj': { source: 'iana' },
          'application/vnd.dvb.esgcontainer': { source: 'iana' },
          'application/vnd.dvb.ipdcdftnotifaccess': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcesgaccess': { source: 'iana' },
          'application/vnd.dvb.ipdcesgaccess2': { source: 'iana' },
          'application/vnd.dvb.ipdcesgpdd': { source: 'iana' },
          'application/vnd.dvb.ipdcroaming': { source: 'iana' },
          'application/vnd.dvb.iptv.alfec-base': { source: 'iana' },
          'application/vnd.dvb.iptv.alfec-enhancement': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-aggregate-root+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-container+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-generic+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-ia-msglist+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-ia-registration-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-ia-registration-response+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.notif-init+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dvb.pfr': { source: 'iana' },
          'application/vnd.dvb.service': {
            source: 'iana',
            extensions: ['svc'],
          },
          'application/vnd.dxr': { source: 'iana' },
          'application/vnd.dynageo': {
            source: 'iana',
            extensions: ['geo'],
          },
          'application/vnd.dzr': { source: 'iana' },
          'application/vnd.easykaraoke.cdgdownload': {
            source: 'iana',
          },
          'application/vnd.ecdis-update': { source: 'iana' },
          'application/vnd.ecip.rlp': { source: 'iana' },
          'application/vnd.eclipse.ditto+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ecowin.chart': {
            source: 'iana',
            extensions: ['mag'],
          },
          'application/vnd.ecowin.filerequest': { source: 'iana' },
          'application/vnd.ecowin.fileupdate': { source: 'iana' },
          'application/vnd.ecowin.series': { source: 'iana' },
          'application/vnd.ecowin.seriesrequest': { source: 'iana' },
          'application/vnd.ecowin.seriesupdate': { source: 'iana' },
          'application/vnd.efi.img': { source: 'iana' },
          'application/vnd.efi.iso': { source: 'iana' },
          'application/vnd.emclient.accessrequest+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.enliven': {
            source: 'iana',
            extensions: ['nml'],
          },
          'application/vnd.enphase.envoy': { source: 'iana' },
          'application/vnd.eprints.data+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.epson.esf': {
            source: 'iana',
            extensions: ['esf'],
          },
          'application/vnd.epson.msf': {
            source: 'iana',
            extensions: ['msf'],
          },
          'application/vnd.epson.quickanime': {
            source: 'iana',
            extensions: ['qam'],
          },
          'application/vnd.epson.salt': {
            source: 'iana',
            extensions: ['slt'],
          },
          'application/vnd.epson.ssf': {
            source: 'iana',
            extensions: ['ssf'],
          },
          'application/vnd.ericsson.quickcall': { source: 'iana' },
          'application/vnd.espass-espass+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.eszigno3+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['es3', 'et3'],
          },
          'application/vnd.etsi.aoc+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.asic-e+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.etsi.asic-s+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.etsi.cug+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvcommand+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvdiscovery+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvprofile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvsad-bc+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvsad-cod+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvsad-npvr+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvservice+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvsync+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.iptvueprofile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.mcid+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.mheg5': { source: 'iana' },
          'application/vnd.etsi.overload-control-policy-dataset+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.pstn+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.sci+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.simservs+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.timestamp-token': { source: 'iana' },
          'application/vnd.etsi.tsl+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.etsi.tsl.der': { source: 'iana' },
          'application/vnd.eu.kasparian.car+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.eudora.data': { source: 'iana' },
          'application/vnd.evolv.ecig.profile': { source: 'iana' },
          'application/vnd.evolv.ecig.settings': { source: 'iana' },
          'application/vnd.evolv.ecig.theme': { source: 'iana' },
          'application/vnd.exstream-empower+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.exstream-package': { source: 'iana' },
          'application/vnd.ezpix-album': {
            source: 'iana',
            extensions: ['ez2'],
          },
          'application/vnd.ezpix-package': {
            source: 'iana',
            extensions: ['ez3'],
          },
          'application/vnd.f-secure.mobile': { source: 'iana' },
          'application/vnd.familysearch.gedcom+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.fastcopy-disk-image': { source: 'iana' },
          'application/vnd.fdf': {
            source: 'iana',
            extensions: ['fdf'],
          },
          'application/vnd.fdsn.mseed': {
            source: 'iana',
            extensions: ['mseed'],
          },
          'application/vnd.fdsn.seed': {
            source: 'iana',
            extensions: ['seed', 'dataless'],
          },
          'application/vnd.ffsns': { source: 'iana' },
          'application/vnd.ficlab.flb+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.filmit.zfc': { source: 'iana' },
          'application/vnd.fints': { source: 'iana' },
          'application/vnd.firemonkeys.cloudcell': { source: 'iana' },
          'application/vnd.flographit': {
            source: 'iana',
            extensions: ['gph'],
          },
          'application/vnd.fluxtime.clip': {
            source: 'iana',
            extensions: ['ftc'],
          },
          'application/vnd.font-fontforge-sfd': { source: 'iana' },
          'application/vnd.framemaker': {
            source: 'iana',
            extensions: ['fm', 'frame', 'maker', 'book'],
          },
          'application/vnd.frogans.fnc': {
            source: 'iana',
            extensions: ['fnc'],
          },
          'application/vnd.frogans.ltf': {
            source: 'iana',
            extensions: ['ltf'],
          },
          'application/vnd.fsc.weblaunch': {
            source: 'iana',
            extensions: ['fsc'],
          },
          'application/vnd.fujifilm.fb.docuworks': { source: 'iana' },
          'application/vnd.fujifilm.fb.docuworks.binder': {
            source: 'iana',
          },
          'application/vnd.fujifilm.fb.docuworks.container': {
            source: 'iana',
          },
          'application/vnd.fujifilm.fb.jfi+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.fujitsu.oasys': {
            source: 'iana',
            extensions: ['oas'],
          },
          'application/vnd.fujitsu.oasys2': {
            source: 'iana',
            extensions: ['oa2'],
          },
          'application/vnd.fujitsu.oasys3': {
            source: 'iana',
            extensions: ['oa3'],
          },
          'application/vnd.fujitsu.oasysgp': {
            source: 'iana',
            extensions: ['fg5'],
          },
          'application/vnd.fujitsu.oasysprs': {
            source: 'iana',
            extensions: ['bh2'],
          },
          'application/vnd.fujixerox.art-ex': { source: 'iana' },
          'application/vnd.fujixerox.art4': { source: 'iana' },
          'application/vnd.fujixerox.ddd': {
            source: 'iana',
            extensions: ['ddd'],
          },
          'application/vnd.fujixerox.docuworks': {
            source: 'iana',
            extensions: ['xdw'],
          },
          'application/vnd.fujixerox.docuworks.binder': {
            source: 'iana',
            extensions: ['xbd'],
          },
          'application/vnd.fujixerox.docuworks.container': {
            source: 'iana',
          },
          'application/vnd.fujixerox.hbpl': { source: 'iana' },
          'application/vnd.fut-misnet': { source: 'iana' },
          'application/vnd.futoin+cbor': { source: 'iana' },
          'application/vnd.futoin+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.fuzzysheet': {
            source: 'iana',
            extensions: ['fzs'],
          },
          'application/vnd.genomatix.tuxedo': {
            source: 'iana',
            extensions: ['txd'],
          },
          'application/vnd.gentics.grd+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.geo+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.geocube+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.geogebra.file': {
            source: 'iana',
            extensions: ['ggb'],
          },
          'application/vnd.geogebra.slides': { source: 'iana' },
          'application/vnd.geogebra.tool': {
            source: 'iana',
            extensions: ['ggt'],
          },
          'application/vnd.geometry-explorer': {
            source: 'iana',
            extensions: ['gex', 'gre'],
          },
          'application/vnd.geonext': {
            source: 'iana',
            extensions: ['gxt'],
          },
          'application/vnd.geoplan': {
            source: 'iana',
            extensions: ['g2w'],
          },
          'application/vnd.geospace': {
            source: 'iana',
            extensions: ['g3w'],
          },
          'application/vnd.gerber': { source: 'iana' },
          'application/vnd.globalplatform.card-content-mgt': {
            source: 'iana',
          },
          'application/vnd.globalplatform.card-content-mgt-response': {
            source: 'iana',
          },
          'application/vnd.gmx': {
            source: 'iana',
            extensions: ['gmx'],
          },
          'application/vnd.google-apps.document': {
            compressible: false,
            extensions: ['gdoc'],
          },
          'application/vnd.google-apps.presentation': {
            compressible: false,
            extensions: ['gslides'],
          },
          'application/vnd.google-apps.spreadsheet': {
            compressible: false,
            extensions: ['gsheet'],
          },
          'application/vnd.google-earth.kml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['kml'],
          },
          'application/vnd.google-earth.kmz': {
            source: 'iana',
            compressible: false,
            extensions: ['kmz'],
          },
          'application/vnd.gov.sk.e-form+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.gov.sk.e-form+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.gov.sk.xmldatacontainer+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.grafeq': {
            source: 'iana',
            extensions: ['gqf', 'gqs'],
          },
          'application/vnd.gridmp': { source: 'iana' },
          'application/vnd.groove-account': {
            source: 'iana',
            extensions: ['gac'],
          },
          'application/vnd.groove-help': {
            source: 'iana',
            extensions: ['ghf'],
          },
          'application/vnd.groove-identity-message': {
            source: 'iana',
            extensions: ['gim'],
          },
          'application/vnd.groove-injector': {
            source: 'iana',
            extensions: ['grv'],
          },
          'application/vnd.groove-tool-message': {
            source: 'iana',
            extensions: ['gtm'],
          },
          'application/vnd.groove-tool-template': {
            source: 'iana',
            extensions: ['tpl'],
          },
          'application/vnd.groove-vcard': {
            source: 'iana',
            extensions: ['vcg'],
          },
          'application/vnd.hal+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hal+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['hal'],
          },
          'application/vnd.handheld-entertainment+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['zmm'],
          },
          'application/vnd.hbci': {
            source: 'iana',
            extensions: ['hbci'],
          },
          'application/vnd.hc+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hcl-bireports': { source: 'iana' },
          'application/vnd.hdt': { source: 'iana' },
          'application/vnd.heroku+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hhe.lesson-player': {
            source: 'iana',
            extensions: ['les'],
          },
          'application/vnd.hl7cda+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.hl7v2+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.hp-hpgl': {
            source: 'iana',
            extensions: ['hpgl'],
          },
          'application/vnd.hp-hpid': {
            source: 'iana',
            extensions: ['hpid'],
          },
          'application/vnd.hp-hps': {
            source: 'iana',
            extensions: ['hps'],
          },
          'application/vnd.hp-jlyt': {
            source: 'iana',
            extensions: ['jlt'],
          },
          'application/vnd.hp-pcl': {
            source: 'iana',
            extensions: ['pcl'],
          },
          'application/vnd.hp-pclxl': {
            source: 'iana',
            extensions: ['pclxl'],
          },
          'application/vnd.httphone': { source: 'iana' },
          'application/vnd.hydrostatix.sof-data': {
            source: 'iana',
            extensions: ['sfd-hdstx'],
          },
          'application/vnd.hyper+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hyper-item+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hyperdrive+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hzn-3d-crossword': { source: 'iana' },
          'application/vnd.ibm.afplinedata': { source: 'iana' },
          'application/vnd.ibm.electronic-media': { source: 'iana' },
          'application/vnd.ibm.minipay': {
            source: 'iana',
            extensions: ['mpy'],
          },
          'application/vnd.ibm.modcap': {
            source: 'iana',
            extensions: ['afp', 'listafp', 'list3820'],
          },
          'application/vnd.ibm.rights-management': {
            source: 'iana',
            extensions: ['irm'],
          },
          'application/vnd.ibm.secure-container': {
            source: 'iana',
            extensions: ['sc'],
          },
          'application/vnd.iccprofile': {
            source: 'iana',
            extensions: ['icc', 'icm'],
          },
          'application/vnd.ieee.1905': { source: 'iana' },
          'application/vnd.igloader': {
            source: 'iana',
            extensions: ['igl'],
          },
          'application/vnd.imagemeter.folder+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.imagemeter.image+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.immervision-ivp': {
            source: 'iana',
            extensions: ['ivp'],
          },
          'application/vnd.immervision-ivu': {
            source: 'iana',
            extensions: ['ivu'],
          },
          'application/vnd.ims.imsccv1p1': { source: 'iana' },
          'application/vnd.ims.imsccv1p2': { source: 'iana' },
          'application/vnd.ims.imsccv1p3': { source: 'iana' },
          'application/vnd.ims.lis.v2.result+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolproxy+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolproxy.id+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolsettings+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolsettings.simple+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.informedcontrol.rms+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.informix-visionary': { source: 'iana' },
          'application/vnd.infotech.project': { source: 'iana' },
          'application/vnd.infotech.project+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.innopath.wamp.notification': {
            source: 'iana',
          },
          'application/vnd.insors.igm': {
            source: 'iana',
            extensions: ['igm'],
          },
          'application/vnd.intercon.formnet': {
            source: 'iana',
            extensions: ['xpw', 'xpx'],
          },
          'application/vnd.intergeo': {
            source: 'iana',
            extensions: ['i2g'],
          },
          'application/vnd.intertrust.digibox': { source: 'iana' },
          'application/vnd.intertrust.nncp': { source: 'iana' },
          'application/vnd.intu.qbo': {
            source: 'iana',
            extensions: ['qbo'],
          },
          'application/vnd.intu.qfx': {
            source: 'iana',
            extensions: ['qfx'],
          },
          'application/vnd.iptc.g2.catalogitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.conceptitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.knowledgeitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.newsitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.newsmessage+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.packageitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.iptc.g2.planningitem+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ipunplugged.rcprofile': {
            source: 'iana',
            extensions: ['rcprofile'],
          },
          'application/vnd.irepository.package+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['irp'],
          },
          'application/vnd.is-xpr': {
            source: 'iana',
            extensions: ['xpr'],
          },
          'application/vnd.isac.fcs': {
            source: 'iana',
            extensions: ['fcs'],
          },
          'application/vnd.iso11783-10+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.jam': {
            source: 'iana',
            extensions: ['jam'],
          },
          'application/vnd.japannet-directory-service': {
            source: 'iana',
          },
          'application/vnd.japannet-jpnstore-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-payment-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-registration': { source: 'iana' },
          'application/vnd.japannet-registration-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-setstore-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-verification': { source: 'iana' },
          'application/vnd.japannet-verification-wakeup': {
            source: 'iana',
          },
          'application/vnd.jcp.javame.midlet-rms': {
            source: 'iana',
            extensions: ['rms'],
          },
          'application/vnd.jisp': {
            source: 'iana',
            extensions: ['jisp'],
          },
          'application/vnd.joost.joda-archive': {
            source: 'iana',
            extensions: ['joda'],
          },
          'application/vnd.jsk.isdn-ngn': { source: 'iana' },
          'application/vnd.kahootz': {
            source: 'iana',
            extensions: ['ktz', 'ktr'],
          },
          'application/vnd.kde.karbon': {
            source: 'iana',
            extensions: ['karbon'],
          },
          'application/vnd.kde.kchart': {
            source: 'iana',
            extensions: ['chrt'],
          },
          'application/vnd.kde.kformula': {
            source: 'iana',
            extensions: ['kfo'],
          },
          'application/vnd.kde.kivio': {
            source: 'iana',
            extensions: ['flw'],
          },
          'application/vnd.kde.kontour': {
            source: 'iana',
            extensions: ['kon'],
          },
          'application/vnd.kde.kpresenter': {
            source: 'iana',
            extensions: ['kpr', 'kpt'],
          },
          'application/vnd.kde.kspread': {
            source: 'iana',
            extensions: ['ksp'],
          },
          'application/vnd.kde.kword': {
            source: 'iana',
            extensions: ['kwd', 'kwt'],
          },
          'application/vnd.kenameaapp': {
            source: 'iana',
            extensions: ['htke'],
          },
          'application/vnd.kidspiration': {
            source: 'iana',
            extensions: ['kia'],
          },
          'application/vnd.kinar': {
            source: 'iana',
            extensions: ['kne', 'knp'],
          },
          'application/vnd.koan': {
            source: 'iana',
            extensions: ['skp', 'skd', 'skt', 'skm'],
          },
          'application/vnd.kodak-descriptor': {
            source: 'iana',
            extensions: ['sse'],
          },
          'application/vnd.las': { source: 'iana' },
          'application/vnd.las.las+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.las.las+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['lasxml'],
          },
          'application/vnd.laszip': { source: 'iana' },
          'application/vnd.leap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.liberty-request+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.llamagraphics.life-balance.desktop': {
            source: 'iana',
            extensions: ['lbd'],
          },
          'application/vnd.llamagraphics.life-balance.exchange+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['lbe'],
          },
          'application/vnd.logipipe.circuit+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.loom': { source: 'iana' },
          'application/vnd.lotus-1-2-3': {
            source: 'iana',
            extensions: ['123'],
          },
          'application/vnd.lotus-approach': {
            source: 'iana',
            extensions: ['apr'],
          },
          'application/vnd.lotus-freelance': {
            source: 'iana',
            extensions: ['pre'],
          },
          'application/vnd.lotus-notes': {
            source: 'iana',
            extensions: ['nsf'],
          },
          'application/vnd.lotus-organizer': {
            source: 'iana',
            extensions: ['org'],
          },
          'application/vnd.lotus-screencam': {
            source: 'iana',
            extensions: ['scm'],
          },
          'application/vnd.lotus-wordpro': {
            source: 'iana',
            extensions: ['lwp'],
          },
          'application/vnd.macports.portpkg': {
            source: 'iana',
            extensions: ['portpkg'],
          },
          'application/vnd.mapbox-vector-tile': {
            source: 'iana',
            extensions: ['mvt'],
          },
          'application/vnd.marlin.drm.actiontoken+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.marlin.drm.conftoken+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.marlin.drm.license+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.marlin.drm.mdcf': { source: 'iana' },
          'application/vnd.mason+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.maxar.archive.3tz+zip': {
            source: 'iana',
            compressible: false,
          },
          'application/vnd.maxmind.maxmind-db': { source: 'iana' },
          'application/vnd.mcd': {
            source: 'iana',
            extensions: ['mcd'],
          },
          'application/vnd.medcalcdata': {
            source: 'iana',
            extensions: ['mc1'],
          },
          'application/vnd.mediastation.cdkey': {
            source: 'iana',
            extensions: ['cdkey'],
          },
          'application/vnd.meridian-slingshot': { source: 'iana' },
          'application/vnd.mfer': {
            source: 'iana',
            extensions: ['mwf'],
          },
          'application/vnd.mfmp': {
            source: 'iana',
            extensions: ['mfm'],
          },
          'application/vnd.micro+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.micrografx.flo': {
            source: 'iana',
            extensions: ['flo'],
          },
          'application/vnd.micrografx.igx': {
            source: 'iana',
            extensions: ['igx'],
          },
          'application/vnd.microsoft.portable-executable': {
            source: 'iana',
          },
          'application/vnd.microsoft.windows.thumbnail-cache': {
            source: 'iana',
          },
          'application/vnd.miele+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.mif': {
            source: 'iana',
            extensions: ['mif'],
          },
          'application/vnd.minisoft-hp3000-save': { source: 'iana' },
          'application/vnd.mitsubishi.misty-guard.trustweb': {
            source: 'iana',
          },
          'application/vnd.mobius.daf': {
            source: 'iana',
            extensions: ['daf'],
          },
          'application/vnd.mobius.dis': {
            source: 'iana',
            extensions: ['dis'],
          },
          'application/vnd.mobius.mbk': {
            source: 'iana',
            extensions: ['mbk'],
          },
          'application/vnd.mobius.mqy': {
            source: 'iana',
            extensions: ['mqy'],
          },
          'application/vnd.mobius.msl': {
            source: 'iana',
            extensions: ['msl'],
          },
          'application/vnd.mobius.plc': {
            source: 'iana',
            extensions: ['plc'],
          },
          'application/vnd.mobius.txf': {
            source: 'iana',
            extensions: ['txf'],
          },
          'application/vnd.mophun.application': {
            source: 'iana',
            extensions: ['mpn'],
          },
          'application/vnd.mophun.certificate': {
            source: 'iana',
            extensions: ['mpc'],
          },
          'application/vnd.motorola.flexsuite': { source: 'iana' },
          'application/vnd.motorola.flexsuite.adsi': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.fis': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.gotap': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.kmr': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.ttc': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.wem': {
            source: 'iana',
          },
          'application/vnd.motorola.iprm': { source: 'iana' },
          'application/vnd.mozilla.xul+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xul'],
          },
          'application/vnd.ms-3mfdocument': { source: 'iana' },
          'application/vnd.ms-artgalry': {
            source: 'iana',
            extensions: ['cil'],
          },
          'application/vnd.ms-asf': { source: 'iana' },
          'application/vnd.ms-cab-compressed': {
            source: 'iana',
            extensions: ['cab'],
          },
          'application/vnd.ms-color.iccprofile': { source: 'apache' },
          'application/vnd.ms-excel': {
            source: 'iana',
            compressible: false,
            extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw'],
          },
          'application/vnd.ms-excel.addin.macroenabled.12': {
            source: 'iana',
            extensions: ['xlam'],
          },
          'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
            source: 'iana',
            extensions: ['xlsb'],
          },
          'application/vnd.ms-excel.sheet.macroenabled.12': {
            source: 'iana',
            extensions: ['xlsm'],
          },
          'application/vnd.ms-excel.template.macroenabled.12': {
            source: 'iana',
            extensions: ['xltm'],
          },
          'application/vnd.ms-fontobject': {
            source: 'iana',
            compressible: true,
            extensions: ['eot'],
          },
          'application/vnd.ms-htmlhelp': {
            source: 'iana',
            extensions: ['chm'],
          },
          'application/vnd.ms-ims': {
            source: 'iana',
            extensions: ['ims'],
          },
          'application/vnd.ms-lrm': {
            source: 'iana',
            extensions: ['lrm'],
          },
          'application/vnd.ms-office.activex+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ms-officetheme': {
            source: 'iana',
            extensions: ['thmx'],
          },
          'application/vnd.ms-opentype': {
            source: 'apache',
            compressible: true,
          },
          'application/vnd.ms-outlook': {
            compressible: false,
            extensions: ['msg'],
          },
          'application/vnd.ms-package.obfuscated-opentype': {
            source: 'apache',
          },
          'application/vnd.ms-pki.seccat': {
            source: 'apache',
            extensions: ['cat'],
          },
          'application/vnd.ms-pki.stl': {
            source: 'apache',
            extensions: ['stl'],
          },
          'application/vnd.ms-playready.initiator+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ms-powerpoint': {
            source: 'iana',
            compressible: false,
            extensions: ['ppt', 'pps', 'pot'],
          },
          'application/vnd.ms-powerpoint.addin.macroenabled.12': {
            source: 'iana',
            extensions: ['ppam'],
          },
          'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
            source: 'iana',
            extensions: ['pptm'],
          },
          'application/vnd.ms-powerpoint.slide.macroenabled.12': {
            source: 'iana',
            extensions: ['sldm'],
          },
          'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
            source: 'iana',
            extensions: ['ppsm'],
          },
          'application/vnd.ms-powerpoint.template.macroenabled.12': {
            source: 'iana',
            extensions: ['potm'],
          },
          'application/vnd.ms-printdevicecapabilities+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ms-printing.printticket+xml': {
            source: 'apache',
            compressible: true,
          },
          'application/vnd.ms-printschematicket+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ms-project': {
            source: 'iana',
            extensions: ['mpp', 'mpt'],
          },
          'application/vnd.ms-tnef': { source: 'iana' },
          'application/vnd.ms-windows.devicepairing': {
            source: 'iana',
          },
          'application/vnd.ms-windows.nwprinting.oob': {
            source: 'iana',
          },
          'application/vnd.ms-windows.printerpairing': {
            source: 'iana',
          },
          'application/vnd.ms-windows.wsd.oob': { source: 'iana' },
          'application/vnd.ms-wmdrm.lic-chlg-req': { source: 'iana' },
          'application/vnd.ms-wmdrm.lic-resp': { source: 'iana' },
          'application/vnd.ms-wmdrm.meter-chlg-req': {
            source: 'iana',
          },
          'application/vnd.ms-wmdrm.meter-resp': { source: 'iana' },
          'application/vnd.ms-word.document.macroenabled.12': {
            source: 'iana',
            extensions: ['docm'],
          },
          'application/vnd.ms-word.template.macroenabled.12': {
            source: 'iana',
            extensions: ['dotm'],
          },
          'application/vnd.ms-works': {
            source: 'iana',
            extensions: ['wps', 'wks', 'wcm', 'wdb'],
          },
          'application/vnd.ms-wpl': {
            source: 'iana',
            extensions: ['wpl'],
          },
          'application/vnd.ms-xpsdocument': {
            source: 'iana',
            compressible: false,
            extensions: ['xps'],
          },
          'application/vnd.msa-disk-image': { source: 'iana' },
          'application/vnd.mseq': {
            source: 'iana',
            extensions: ['mseq'],
          },
          'application/vnd.msign': { source: 'iana' },
          'application/vnd.multiad.creator': { source: 'iana' },
          'application/vnd.multiad.creator.cif': { source: 'iana' },
          'application/vnd.music-niff': { source: 'iana' },
          'application/vnd.musician': {
            source: 'iana',
            extensions: ['mus'],
          },
          'application/vnd.muvee.style': {
            source: 'iana',
            extensions: ['msty'],
          },
          'application/vnd.mynfc': {
            source: 'iana',
            extensions: ['taglet'],
          },
          'application/vnd.nacamar.ybrid+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ncd.control': { source: 'iana' },
          'application/vnd.ncd.reference': { source: 'iana' },
          'application/vnd.nearst.inv+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nebumind.line': { source: 'iana' },
          'application/vnd.nervana': { source: 'iana' },
          'application/vnd.netfpx': { source: 'iana' },
          'application/vnd.neurolanguage.nlu': {
            source: 'iana',
            extensions: ['nlu'],
          },
          'application/vnd.nimn': { source: 'iana' },
          'application/vnd.nintendo.nitro.rom': { source: 'iana' },
          'application/vnd.nintendo.snes.rom': { source: 'iana' },
          'application/vnd.nitf': {
            source: 'iana',
            extensions: ['ntf', 'nitf'],
          },
          'application/vnd.noblenet-directory': {
            source: 'iana',
            extensions: ['nnd'],
          },
          'application/vnd.noblenet-sealer': {
            source: 'iana',
            extensions: ['nns'],
          },
          'application/vnd.noblenet-web': {
            source: 'iana',
            extensions: ['nnw'],
          },
          'application/vnd.nokia.catalogs': { source: 'iana' },
          'application/vnd.nokia.conml+wbxml': { source: 'iana' },
          'application/vnd.nokia.conml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nokia.iptv.config+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nokia.isds-radio-presets': {
            source: 'iana',
          },
          'application/vnd.nokia.landmark+wbxml': { source: 'iana' },
          'application/vnd.nokia.landmark+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nokia.landmarkcollection+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nokia.n-gage.ac+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['ac'],
          },
          'application/vnd.nokia.n-gage.data': {
            source: 'iana',
            extensions: ['ngdat'],
          },
          'application/vnd.nokia.n-gage.symbian.install': {
            source: 'iana',
            extensions: ['n-gage'],
          },
          'application/vnd.nokia.ncd': { source: 'iana' },
          'application/vnd.nokia.pcd+wbxml': { source: 'iana' },
          'application/vnd.nokia.pcd+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.nokia.radio-preset': {
            source: 'iana',
            extensions: ['rpst'],
          },
          'application/vnd.nokia.radio-presets': {
            source: 'iana',
            extensions: ['rpss'],
          },
          'application/vnd.novadigm.edm': {
            source: 'iana',
            extensions: ['edm'],
          },
          'application/vnd.novadigm.edx': {
            source: 'iana',
            extensions: ['edx'],
          },
          'application/vnd.novadigm.ext': {
            source: 'iana',
            extensions: ['ext'],
          },
          'application/vnd.ntt-local.content-share': {
            source: 'iana',
          },
          'application/vnd.ntt-local.file-transfer': {
            source: 'iana',
          },
          'application/vnd.ntt-local.ogw_remote-access': {
            source: 'iana',
          },
          'application/vnd.ntt-local.sip-ta_remote': {
            source: 'iana',
          },
          'application/vnd.ntt-local.sip-ta_tcp_stream': {
            source: 'iana',
          },
          'application/vnd.oasis.opendocument.chart': {
            source: 'iana',
            extensions: ['odc'],
          },
          'application/vnd.oasis.opendocument.chart-template': {
            source: 'iana',
            extensions: ['otc'],
          },
          'application/vnd.oasis.opendocument.database': {
            source: 'iana',
            extensions: ['odb'],
          },
          'application/vnd.oasis.opendocument.formula': {
            source: 'iana',
            extensions: ['odf'],
          },
          'application/vnd.oasis.opendocument.formula-template': {
            source: 'iana',
            extensions: ['odft'],
          },
          'application/vnd.oasis.opendocument.graphics': {
            source: 'iana',
            compressible: false,
            extensions: ['odg'],
          },
          'application/vnd.oasis.opendocument.graphics-template': {
            source: 'iana',
            extensions: ['otg'],
          },
          'application/vnd.oasis.opendocument.image': {
            source: 'iana',
            extensions: ['odi'],
          },
          'application/vnd.oasis.opendocument.image-template': {
            source: 'iana',
            extensions: ['oti'],
          },
          'application/vnd.oasis.opendocument.presentation': {
            source: 'iana',
            compressible: false,
            extensions: ['odp'],
          },
          'application/vnd.oasis.opendocument.presentation-template': {
            source: 'iana',
            extensions: ['otp'],
          },
          'application/vnd.oasis.opendocument.spreadsheet': {
            source: 'iana',
            compressible: false,
            extensions: ['ods'],
          },
          'application/vnd.oasis.opendocument.spreadsheet-template': {
            source: 'iana',
            extensions: ['ots'],
          },
          'application/vnd.oasis.opendocument.text': {
            source: 'iana',
            compressible: false,
            extensions: ['odt'],
          },
          'application/vnd.oasis.opendocument.text-master': {
            source: 'iana',
            extensions: ['odm'],
          },
          'application/vnd.oasis.opendocument.text-template': {
            source: 'iana',
            extensions: ['ott'],
          },
          'application/vnd.oasis.opendocument.text-web': {
            source: 'iana',
            extensions: ['oth'],
          },
          'application/vnd.obn': { source: 'iana' },
          'application/vnd.ocf+cbor': { source: 'iana' },
          'application/vnd.oci.image.manifest.v1+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oftn.l10n+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.contentaccessdownload+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.contentaccessstreaming+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.cspg-hexbinary': { source: 'iana' },
          'application/vnd.oipf.dae.svg+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.dae.xhtml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.mippvcontrolmessage+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.pae.gem': { source: 'iana' },
          'application/vnd.oipf.spdiscovery+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.spdlist+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.ueprofile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.userprofile+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.olpc-sugar': {
            source: 'iana',
            extensions: ['xo'],
          },
          'application/vnd.oma-scws-config': { source: 'iana' },
          'application/vnd.oma-scws-http-request': { source: 'iana' },
          'application/vnd.oma-scws-http-response': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.drm-trigger+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.imd+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.ltkm': { source: 'iana' },
          'application/vnd.oma.bcast.notification+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.provisioningtrigger': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.sgboot': { source: 'iana' },
          'application/vnd.oma.bcast.sgdd+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.sgdu': { source: 'iana' },
          'application/vnd.oma.bcast.simple-symbol-container': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.smartcard-trigger+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.sprov+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.bcast.stkm': { source: 'iana' },
          'application/vnd.oma.cab-address-book+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.cab-feature-handler+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.cab-pcc+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.cab-subs-invite+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.cab-user-prefs+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.dcd': { source: 'iana' },
          'application/vnd.oma.dcdc': { source: 'iana' },
          'application/vnd.oma.dd2+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['dd2'],
          },
          'application/vnd.oma.drm.risd+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.group-usage-list+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.lwm2m+cbor': { source: 'iana' },
          'application/vnd.oma.lwm2m+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.lwm2m+tlv': { source: 'iana' },
          'application/vnd.oma.pal+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.poc.detailed-progress-report+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.poc.final-report+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.poc.groups+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.poc.invocation-descriptor+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.poc.optimized-progress-report+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.push': { source: 'iana' },
          'application/vnd.oma.scidm.messages+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oma.xcap-directory+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.omads-email+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.omads-file+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.omads-folder+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.omaloc-supl-init': { source: 'iana' },
          'application/vnd.onepager': { source: 'iana' },
          'application/vnd.onepagertamp': { source: 'iana' },
          'application/vnd.onepagertamx': { source: 'iana' },
          'application/vnd.onepagertat': { source: 'iana' },
          'application/vnd.onepagertatp': { source: 'iana' },
          'application/vnd.onepagertatx': { source: 'iana' },
          'application/vnd.openblox.game+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['obgx'],
          },
          'application/vnd.openblox.game-binary': { source: 'iana' },
          'application/vnd.openeye.oeb': { source: 'iana' },
          'application/vnd.openofficeorg.extension': {
            source: 'apache',
            extensions: ['oxt'],
          },
          'application/vnd.openstreetmap.data+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['osm'],
          },
          'application/vnd.opentimestamps.ots': { source: 'iana' },
          'application/vnd.openxmlformats-officedocument.custom-properties+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.customxmlproperties+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.drawing+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.extended-properties+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.comments+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.presentation':
            {
              source: 'iana',
              compressible: false,
              extensions: ['pptx'],
            },
          'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.slide':
            { source: 'iana', extensions: ['sldx'] },
          'application/vnd.openxmlformats-officedocument.presentationml.slide+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.slideshow':
            { source: 'iana', extensions: ['ppsx'] },
          'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.tags+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.template':
            { source: 'iana', extensions: ['potx'] },
          'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
            source: 'iana',
            compressible: false,
            extensions: ['xlsx'],
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.template':
            { source: 'iana', extensions: ['xltx'] },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.theme+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.openxmlformats-officedocument.vmldrawing': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            {
              source: 'iana',
              compressible: false,
              extensions: ['docx'],
            },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.template':
            { source: 'iana', extensions: ['dotx'] },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-package.core-properties+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml':
            { source: 'iana', compressible: true },
          'application/vnd.openxmlformats-package.relationships+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oracle.resource+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.orange.indata': { source: 'iana' },
          'application/vnd.osa.netdeploy': { source: 'iana' },
          'application/vnd.osgeo.mapguide.package': {
            source: 'iana',
            extensions: ['mgp'],
          },
          'application/vnd.osgi.bundle': { source: 'iana' },
          'application/vnd.osgi.dp': {
            source: 'iana',
            extensions: ['dp'],
          },
          'application/vnd.osgi.subsystem': {
            source: 'iana',
            extensions: ['esa'],
          },
          'application/vnd.otps.ct-kip+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oxli.countgraph': { source: 'iana' },
          'application/vnd.pagerduty+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.palm': {
            source: 'iana',
            extensions: ['pdb', 'pqa', 'oprc'],
          },
          'application/vnd.panoply': { source: 'iana' },
          'application/vnd.paos.xml': { source: 'iana' },
          'application/vnd.patentdive': { source: 'iana' },
          'application/vnd.patientecommsdoc': { source: 'iana' },
          'application/vnd.pawaafile': {
            source: 'iana',
            extensions: ['paw'],
          },
          'application/vnd.pcos': { source: 'iana' },
          'application/vnd.pg.format': {
            source: 'iana',
            extensions: ['str'],
          },
          'application/vnd.pg.osasli': {
            source: 'iana',
            extensions: ['ei6'],
          },
          'application/vnd.piaccess.application-licence': {
            source: 'iana',
          },
          'application/vnd.picsel': {
            source: 'iana',
            extensions: ['efif'],
          },
          'application/vnd.pmi.widget': {
            source: 'iana',
            extensions: ['wg'],
          },
          'application/vnd.poc.group-advertisement+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.pocketlearn': {
            source: 'iana',
            extensions: ['plf'],
          },
          'application/vnd.powerbuilder6': {
            source: 'iana',
            extensions: ['pbd'],
          },
          'application/vnd.powerbuilder6-s': { source: 'iana' },
          'application/vnd.powerbuilder7': { source: 'iana' },
          'application/vnd.powerbuilder7-s': { source: 'iana' },
          'application/vnd.powerbuilder75': { source: 'iana' },
          'application/vnd.powerbuilder75-s': { source: 'iana' },
          'application/vnd.preminet': { source: 'iana' },
          'application/vnd.previewsystems.box': {
            source: 'iana',
            extensions: ['box'],
          },
          'application/vnd.proteus.magazine': {
            source: 'iana',
            extensions: ['mgz'],
          },
          'application/vnd.psfs': { source: 'iana' },
          'application/vnd.publishare-delta-tree': {
            source: 'iana',
            extensions: ['qps'],
          },
          'application/vnd.pvi.ptid1': {
            source: 'iana',
            extensions: ['ptid'],
          },
          'application/vnd.pwg-multiplexed': { source: 'iana' },
          'application/vnd.pwg-xhtml-print+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.qualcomm.brew-app-res': { source: 'iana' },
          'application/vnd.quarantainenet': { source: 'iana' },
          'application/vnd.quark.quarkxpress': {
            source: 'iana',
            extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb'],
          },
          'application/vnd.quobject-quoxdocument': { source: 'iana' },
          'application/vnd.radisys.moml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-audit+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-audit-conf+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-audit-conn+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-audit-dialog+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-audit-stream+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-conf+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-base+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-fax-detect+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-group+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-speech+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.radisys.msml-dialog-transform+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.rainstor.data': { source: 'iana' },
          'application/vnd.rapid': { source: 'iana' },
          'application/vnd.rar': {
            source: 'iana',
            extensions: ['rar'],
          },
          'application/vnd.realvnc.bed': {
            source: 'iana',
            extensions: ['bed'],
          },
          'application/vnd.recordare.musicxml': {
            source: 'iana',
            extensions: ['mxl'],
          },
          'application/vnd.recordare.musicxml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['musicxml'],
          },
          'application/vnd.renlearn.rlprint': { source: 'iana' },
          'application/vnd.resilient.logic': { source: 'iana' },
          'application/vnd.restful+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.rig.cryptonote': {
            source: 'iana',
            extensions: ['cryptonote'],
          },
          'application/vnd.rim.cod': {
            source: 'apache',
            extensions: ['cod'],
          },
          'application/vnd.rn-realmedia': {
            source: 'apache',
            extensions: ['rm'],
          },
          'application/vnd.rn-realmedia-vbr': {
            source: 'apache',
            extensions: ['rmvb'],
          },
          'application/vnd.route66.link66+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['link66'],
          },
          'application/vnd.rs-274x': { source: 'iana' },
          'application/vnd.ruckus.download': { source: 'iana' },
          'application/vnd.s3sms': { source: 'iana' },
          'application/vnd.sailingtracker.track': {
            source: 'iana',
            extensions: ['st'],
          },
          'application/vnd.sar': { source: 'iana' },
          'application/vnd.sbm.cid': { source: 'iana' },
          'application/vnd.sbm.mid2': { source: 'iana' },
          'application/vnd.scribus': { source: 'iana' },
          'application/vnd.sealed.3df': { source: 'iana' },
          'application/vnd.sealed.csf': { source: 'iana' },
          'application/vnd.sealed.doc': { source: 'iana' },
          'application/vnd.sealed.eml': { source: 'iana' },
          'application/vnd.sealed.mht': { source: 'iana' },
          'application/vnd.sealed.net': { source: 'iana' },
          'application/vnd.sealed.ppt': { source: 'iana' },
          'application/vnd.sealed.tiff': { source: 'iana' },
          'application/vnd.sealed.xls': { source: 'iana' },
          'application/vnd.sealedmedia.softseal.html': {
            source: 'iana',
          },
          'application/vnd.sealedmedia.softseal.pdf': {
            source: 'iana',
          },
          'application/vnd.seemail': {
            source: 'iana',
            extensions: ['see'],
          },
          'application/vnd.seis+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.sema': {
            source: 'iana',
            extensions: ['sema'],
          },
          'application/vnd.semd': {
            source: 'iana',
            extensions: ['semd'],
          },
          'application/vnd.semf': {
            source: 'iana',
            extensions: ['semf'],
          },
          'application/vnd.shade-save-file': { source: 'iana' },
          'application/vnd.shana.informed.formdata': {
            source: 'iana',
            extensions: ['ifm'],
          },
          'application/vnd.shana.informed.formtemplate': {
            source: 'iana',
            extensions: ['itp'],
          },
          'application/vnd.shana.informed.interchange': {
            source: 'iana',
            extensions: ['iif'],
          },
          'application/vnd.shana.informed.package': {
            source: 'iana',
            extensions: ['ipk'],
          },
          'application/vnd.shootproof+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.shopkick+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.shp': { source: 'iana' },
          'application/vnd.shx': { source: 'iana' },
          'application/vnd.sigrok.session': { source: 'iana' },
          'application/vnd.simtech-mindmapper': {
            source: 'iana',
            extensions: ['twd', 'twds'],
          },
          'application/vnd.siren+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.smaf': {
            source: 'iana',
            extensions: ['mmf'],
          },
          'application/vnd.smart.notebook': { source: 'iana' },
          'application/vnd.smart.teacher': {
            source: 'iana',
            extensions: ['teacher'],
          },
          'application/vnd.snesdev-page-table': { source: 'iana' },
          'application/vnd.software602.filler.form+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['fo'],
          },
          'application/vnd.software602.filler.form-xml-zip': {
            source: 'iana',
          },
          'application/vnd.solent.sdkm+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['sdkm', 'sdkd'],
          },
          'application/vnd.spotfire.dxp': {
            source: 'iana',
            extensions: ['dxp'],
          },
          'application/vnd.spotfire.sfs': {
            source: 'iana',
            extensions: ['sfs'],
          },
          'application/vnd.sqlite3': { source: 'iana' },
          'application/vnd.sss-cod': { source: 'iana' },
          'application/vnd.sss-dtf': { source: 'iana' },
          'application/vnd.sss-ntf': { source: 'iana' },
          'application/vnd.stardivision.calc': {
            source: 'apache',
            extensions: ['sdc'],
          },
          'application/vnd.stardivision.draw': {
            source: 'apache',
            extensions: ['sda'],
          },
          'application/vnd.stardivision.impress': {
            source: 'apache',
            extensions: ['sdd'],
          },
          'application/vnd.stardivision.math': {
            source: 'apache',
            extensions: ['smf'],
          },
          'application/vnd.stardivision.writer': {
            source: 'apache',
            extensions: ['sdw', 'vor'],
          },
          'application/vnd.stardivision.writer-global': {
            source: 'apache',
            extensions: ['sgl'],
          },
          'application/vnd.stepmania.package': {
            source: 'iana',
            extensions: ['smzip'],
          },
          'application/vnd.stepmania.stepchart': {
            source: 'iana',
            extensions: ['sm'],
          },
          'application/vnd.street-stream': { source: 'iana' },
          'application/vnd.sun.wadl+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['wadl'],
          },
          'application/vnd.sun.xml.calc': {
            source: 'apache',
            extensions: ['sxc'],
          },
          'application/vnd.sun.xml.calc.template': {
            source: 'apache',
            extensions: ['stc'],
          },
          'application/vnd.sun.xml.draw': {
            source: 'apache',
            extensions: ['sxd'],
          },
          'application/vnd.sun.xml.draw.template': {
            source: 'apache',
            extensions: ['std'],
          },
          'application/vnd.sun.xml.impress': {
            source: 'apache',
            extensions: ['sxi'],
          },
          'application/vnd.sun.xml.impress.template': {
            source: 'apache',
            extensions: ['sti'],
          },
          'application/vnd.sun.xml.math': {
            source: 'apache',
            extensions: ['sxm'],
          },
          'application/vnd.sun.xml.writer': {
            source: 'apache',
            extensions: ['sxw'],
          },
          'application/vnd.sun.xml.writer.global': {
            source: 'apache',
            extensions: ['sxg'],
          },
          'application/vnd.sun.xml.writer.template': {
            source: 'apache',
            extensions: ['stw'],
          },
          'application/vnd.sus-calendar': {
            source: 'iana',
            extensions: ['sus', 'susp'],
          },
          'application/vnd.svd': {
            source: 'iana',
            extensions: ['svd'],
          },
          'application/vnd.swiftview-ics': { source: 'iana' },
          'application/vnd.sycle+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.syft+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.symbian.install': {
            source: 'apache',
            extensions: ['sis', 'sisx'],
          },
          'application/vnd.syncml+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['xsm'],
          },
          'application/vnd.syncml.dm+wbxml': {
            source: 'iana',
            charset: 'UTF-8',
            extensions: ['bdm'],
          },
          'application/vnd.syncml.dm+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['xdm'],
          },
          'application/vnd.syncml.dm.notification': {
            source: 'iana',
          },
          'application/vnd.syncml.dmddf+wbxml': { source: 'iana' },
          'application/vnd.syncml.dmddf+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['ddf'],
          },
          'application/vnd.syncml.dmtnds+wbxml': { source: 'iana' },
          'application/vnd.syncml.dmtnds+xml': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
          },
          'application/vnd.syncml.ds.notification': {
            source: 'iana',
          },
          'application/vnd.tableschema+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.tao.intent-module-archive': {
            source: 'iana',
            extensions: ['tao'],
          },
          'application/vnd.tcpdump.pcap': {
            source: 'iana',
            extensions: ['pcap', 'cap', 'dmp'],
          },
          'application/vnd.think-cell.ppttc+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.tmd.mediaflex.api+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.tml': { source: 'iana' },
          'application/vnd.tmobile-livetv': {
            source: 'iana',
            extensions: ['tmo'],
          },
          'application/vnd.tri.onesource': { source: 'iana' },
          'application/vnd.trid.tpt': {
            source: 'iana',
            extensions: ['tpt'],
          },
          'application/vnd.triscape.mxs': {
            source: 'iana',
            extensions: ['mxs'],
          },
          'application/vnd.trueapp': {
            source: 'iana',
            extensions: ['tra'],
          },
          'application/vnd.truedoc': { source: 'iana' },
          'application/vnd.ubisoft.webplayer': { source: 'iana' },
          'application/vnd.ufdl': {
            source: 'iana',
            extensions: ['ufd', 'ufdl'],
          },
          'application/vnd.uiq.theme': {
            source: 'iana',
            extensions: ['utz'],
          },
          'application/vnd.umajin': {
            source: 'iana',
            extensions: ['umj'],
          },
          'application/vnd.unity': {
            source: 'iana',
            extensions: ['unityweb'],
          },
          'application/vnd.uoml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['uoml'],
          },
          'application/vnd.uplanet.alert': { source: 'iana' },
          'application/vnd.uplanet.alert-wbxml': { source: 'iana' },
          'application/vnd.uplanet.bearer-choice': { source: 'iana' },
          'application/vnd.uplanet.bearer-choice-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.cacheop': { source: 'iana' },
          'application/vnd.uplanet.cacheop-wbxml': { source: 'iana' },
          'application/vnd.uplanet.channel': { source: 'iana' },
          'application/vnd.uplanet.channel-wbxml': { source: 'iana' },
          'application/vnd.uplanet.list': { source: 'iana' },
          'application/vnd.uplanet.list-wbxml': { source: 'iana' },
          'application/vnd.uplanet.listcmd': { source: 'iana' },
          'application/vnd.uplanet.listcmd-wbxml': { source: 'iana' },
          'application/vnd.uplanet.signal': { source: 'iana' },
          'application/vnd.uri-map': { source: 'iana' },
          'application/vnd.valve.source.material': { source: 'iana' },
          'application/vnd.vcx': {
            source: 'iana',
            extensions: ['vcx'],
          },
          'application/vnd.vd-study': { source: 'iana' },
          'application/vnd.vectorworks': { source: 'iana' },
          'application/vnd.vel+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.verimatrix.vcas': { source: 'iana' },
          'application/vnd.veritone.aion+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.veryant.thin': { source: 'iana' },
          'application/vnd.ves.encrypted': { source: 'iana' },
          'application/vnd.vidsoft.vidconference': { source: 'iana' },
          'application/vnd.visio': {
            source: 'iana',
            extensions: ['vsd', 'vst', 'vss', 'vsw'],
          },
          'application/vnd.visionary': {
            source: 'iana',
            extensions: ['vis'],
          },
          'application/vnd.vividence.scriptfile': { source: 'iana' },
          'application/vnd.vsf': {
            source: 'iana',
            extensions: ['vsf'],
          },
          'application/vnd.wap.sic': { source: 'iana' },
          'application/vnd.wap.slc': { source: 'iana' },
          'application/vnd.wap.wbxml': {
            source: 'iana',
            charset: 'UTF-8',
            extensions: ['wbxml'],
          },
          'application/vnd.wap.wmlc': {
            source: 'iana',
            extensions: ['wmlc'],
          },
          'application/vnd.wap.wmlscriptc': {
            source: 'iana',
            extensions: ['wmlsc'],
          },
          'application/vnd.webturbo': {
            source: 'iana',
            extensions: ['wtb'],
          },
          'application/vnd.wfa.dpp': { source: 'iana' },
          'application/vnd.wfa.p2p': { source: 'iana' },
          'application/vnd.wfa.wsc': { source: 'iana' },
          'application/vnd.windows.devicepairing': { source: 'iana' },
          'application/vnd.wmc': { source: 'iana' },
          'application/vnd.wmf.bootstrap': { source: 'iana' },
          'application/vnd.wolfram.mathematica': { source: 'iana' },
          'application/vnd.wolfram.mathematica.package': {
            source: 'iana',
          },
          'application/vnd.wolfram.player': {
            source: 'iana',
            extensions: ['nbp'],
          },
          'application/vnd.wordperfect': {
            source: 'iana',
            extensions: ['wpd'],
          },
          'application/vnd.wqd': {
            source: 'iana',
            extensions: ['wqd'],
          },
          'application/vnd.wrq-hp3000-labelled': { source: 'iana' },
          'application/vnd.wt.stf': {
            source: 'iana',
            extensions: ['stf'],
          },
          'application/vnd.wv.csp+wbxml': { source: 'iana' },
          'application/vnd.wv.csp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.wv.ssp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.xacml+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.xara': {
            source: 'iana',
            extensions: ['xar'],
          },
          'application/vnd.xfdl': {
            source: 'iana',
            extensions: ['xfdl'],
          },
          'application/vnd.xfdl.webform': { source: 'iana' },
          'application/vnd.xmi+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.xmpie.cpkg': { source: 'iana' },
          'application/vnd.xmpie.dpkg': { source: 'iana' },
          'application/vnd.xmpie.plan': { source: 'iana' },
          'application/vnd.xmpie.ppkg': { source: 'iana' },
          'application/vnd.xmpie.xlim': { source: 'iana' },
          'application/vnd.yamaha.hv-dic': {
            source: 'iana',
            extensions: ['hvd'],
          },
          'application/vnd.yamaha.hv-script': {
            source: 'iana',
            extensions: ['hvs'],
          },
          'application/vnd.yamaha.hv-voice': {
            source: 'iana',
            extensions: ['hvp'],
          },
          'application/vnd.yamaha.openscoreformat': {
            source: 'iana',
            extensions: ['osf'],
          },
          'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['osfpvg'],
          },
          'application/vnd.yamaha.remote-setup': { source: 'iana' },
          'application/vnd.yamaha.smaf-audio': {
            source: 'iana',
            extensions: ['saf'],
          },
          'application/vnd.yamaha.smaf-phrase': {
            source: 'iana',
            extensions: ['spf'],
          },
          'application/vnd.yamaha.through-ngn': { source: 'iana' },
          'application/vnd.yamaha.tunnel-udpencap': {
            source: 'iana',
          },
          'application/vnd.yaoweme': { source: 'iana' },
          'application/vnd.yellowriver-custom-menu': {
            source: 'iana',
            extensions: ['cmp'],
          },
          'application/vnd.youtube.yt': { source: 'iana' },
          'application/vnd.zul': {
            source: 'iana',
            extensions: ['zir', 'zirz'],
          },
          'application/vnd.zzazz.deck+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['zaz'],
          },
          'application/voicexml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['vxml'],
          },
          'application/voucher-cms+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vq-rtcpxr': { source: 'iana' },
          'application/wasm': {
            source: 'iana',
            compressible: true,
            extensions: ['wasm'],
          },
          'application/watcherinfo+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['wif'],
          },
          'application/webpush-options+json': {
            source: 'iana',
            compressible: true,
          },
          'application/whoispp-query': { source: 'iana' },
          'application/whoispp-response': { source: 'iana' },
          'application/widget': {
            source: 'iana',
            extensions: ['wgt'],
          },
          'application/winhlp': {
            source: 'apache',
            extensions: ['hlp'],
          },
          'application/wita': { source: 'iana' },
          'application/wordperfect5.1': { source: 'iana' },
          'application/wsdl+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['wsdl'],
          },
          'application/wspolicy+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['wspolicy'],
          },
          'application/x-7z-compressed': {
            source: 'apache',
            compressible: false,
            extensions: ['7z'],
          },
          'application/x-abiword': {
            source: 'apache',
            extensions: ['abw'],
          },
          'application/x-ace-compressed': {
            source: 'apache',
            extensions: ['ace'],
          },
          'application/x-amf': { source: 'apache' },
          'application/x-apple-diskimage': {
            source: 'apache',
            extensions: ['dmg'],
          },
          'application/x-arj': {
            compressible: false,
            extensions: ['arj'],
          },
          'application/x-authorware-bin': {
            source: 'apache',
            extensions: ['aab', 'x32', 'u32', 'vox'],
          },
          'application/x-authorware-map': {
            source: 'apache',
            extensions: ['aam'],
          },
          'application/x-authorware-seg': {
            source: 'apache',
            extensions: ['aas'],
          },
          'application/x-bcpio': {
            source: 'apache',
            extensions: ['bcpio'],
          },
          'application/x-bdoc': {
            compressible: false,
            extensions: ['bdoc'],
          },
          'application/x-bittorrent': {
            source: 'apache',
            extensions: ['torrent'],
          },
          'application/x-blorb': {
            source: 'apache',
            extensions: ['blb', 'blorb'],
          },
          'application/x-bzip': {
            source: 'apache',
            compressible: false,
            extensions: ['bz'],
          },
          'application/x-bzip2': {
            source: 'apache',
            compressible: false,
            extensions: ['bz2', 'boz'],
          },
          'application/x-cbr': {
            source: 'apache',
            extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7'],
          },
          'application/x-cdlink': {
            source: 'apache',
            extensions: ['vcd'],
          },
          'application/x-cfs-compressed': {
            source: 'apache',
            extensions: ['cfs'],
          },
          'application/x-chat': {
            source: 'apache',
            extensions: ['chat'],
          },
          'application/x-chess-pgn': {
            source: 'apache',
            extensions: ['pgn'],
          },
          'application/x-chrome-extension': { extensions: ['crx'] },
          'application/x-cocoa': {
            source: 'nginx',
            extensions: ['cco'],
          },
          'application/x-compress': { source: 'apache' },
          'application/x-conference': {
            source: 'apache',
            extensions: ['nsc'],
          },
          'application/x-cpio': {
            source: 'apache',
            extensions: ['cpio'],
          },
          'application/x-csh': {
            source: 'apache',
            extensions: ['csh'],
          },
          'application/x-deb': { compressible: false },
          'application/x-debian-package': {
            source: 'apache',
            extensions: ['deb', 'udeb'],
          },
          'application/x-dgc-compressed': {
            source: 'apache',
            extensions: ['dgc'],
          },
          'application/x-director': {
            source: 'apache',
            extensions: [
              'dir',
              'dcr',
              'dxr',
              'cst',
              'cct',
              'cxt',
              'w3d',
              'fgd',
              'swa',
            ],
          },
          'application/x-doom': {
            source: 'apache',
            extensions: ['wad'],
          },
          'application/x-dtbncx+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['ncx'],
          },
          'application/x-dtbook+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['dtb'],
          },
          'application/x-dtbresource+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['res'],
          },
          'application/x-dvi': {
            source: 'apache',
            compressible: false,
            extensions: ['dvi'],
          },
          'application/x-envoy': {
            source: 'apache',
            extensions: ['evy'],
          },
          'application/x-eva': {
            source: 'apache',
            extensions: ['eva'],
          },
          'application/x-font-bdf': {
            source: 'apache',
            extensions: ['bdf'],
          },
          'application/x-font-dos': { source: 'apache' },
          'application/x-font-framemaker': { source: 'apache' },
          'application/x-font-ghostscript': {
            source: 'apache',
            extensions: ['gsf'],
          },
          'application/x-font-libgrx': { source: 'apache' },
          'application/x-font-linux-psf': {
            source: 'apache',
            extensions: ['psf'],
          },
          'application/x-font-pcf': {
            source: 'apache',
            extensions: ['pcf'],
          },
          'application/x-font-snf': {
            source: 'apache',
            extensions: ['snf'],
          },
          'application/x-font-speedo': { source: 'apache' },
          'application/x-font-sunos-news': { source: 'apache' },
          'application/x-font-type1': {
            source: 'apache',
            extensions: ['pfa', 'pfb', 'pfm', 'afm'],
          },
          'application/x-font-vfont': { source: 'apache' },
          'application/x-freearc': {
            source: 'apache',
            extensions: ['arc'],
          },
          'application/x-futuresplash': {
            source: 'apache',
            extensions: ['spl'],
          },
          'application/x-gca-compressed': {
            source: 'apache',
            extensions: ['gca'],
          },
          'application/x-glulx': {
            source: 'apache',
            extensions: ['ulx'],
          },
          'application/x-gnumeric': {
            source: 'apache',
            extensions: ['gnumeric'],
          },
          'application/x-gramps-xml': {
            source: 'apache',
            extensions: ['gramps'],
          },
          'application/x-gtar': {
            source: 'apache',
            extensions: ['gtar'],
          },
          'application/x-gzip': { source: 'apache' },
          'application/x-hdf': {
            source: 'apache',
            extensions: ['hdf'],
          },
          'application/x-httpd-php': {
            compressible: true,
            extensions: ['php'],
          },
          'application/x-install-instructions': {
            source: 'apache',
            extensions: ['install'],
          },
          'application/x-iso9660-image': {
            source: 'apache',
            extensions: ['iso'],
          },
          'application/x-iwork-keynote-sffkey': {
            extensions: ['key'],
          },
          'application/x-iwork-numbers-sffnumbers': {
            extensions: ['numbers'],
          },
          'application/x-iwork-pages-sffpages': {
            extensions: ['pages'],
          },
          'application/x-java-archive-diff': {
            source: 'nginx',
            extensions: ['jardiff'],
          },
          'application/x-java-jnlp-file': {
            source: 'apache',
            compressible: false,
            extensions: ['jnlp'],
          },
          'application/x-javascript': { compressible: true },
          'application/x-keepass2': { extensions: ['kdbx'] },
          'application/x-latex': {
            source: 'apache',
            compressible: false,
            extensions: ['latex'],
          },
          'application/x-lua-bytecode': { extensions: ['luac'] },
          'application/x-lzh-compressed': {
            source: 'apache',
            extensions: ['lzh', 'lha'],
          },
          'application/x-makeself': {
            source: 'nginx',
            extensions: ['run'],
          },
          'application/x-mie': {
            source: 'apache',
            extensions: ['mie'],
          },
          'application/x-mobipocket-ebook': {
            source: 'apache',
            extensions: ['prc', 'mobi'],
          },
          'application/x-mpegurl': { compressible: false },
          'application/x-ms-application': {
            source: 'apache',
            extensions: ['application'],
          },
          'application/x-ms-shortcut': {
            source: 'apache',
            extensions: ['lnk'],
          },
          'application/x-ms-wmd': {
            source: 'apache',
            extensions: ['wmd'],
          },
          'application/x-ms-wmz': {
            source: 'apache',
            extensions: ['wmz'],
          },
          'application/x-ms-xbap': {
            source: 'apache',
            extensions: ['xbap'],
          },
          'application/x-msaccess': {
            source: 'apache',
            extensions: ['mdb'],
          },
          'application/x-msbinder': {
            source: 'apache',
            extensions: ['obd'],
          },
          'application/x-mscardfile': {
            source: 'apache',
            extensions: ['crd'],
          },
          'application/x-msclip': {
            source: 'apache',
            extensions: ['clp'],
          },
          'application/x-msdos-program': { extensions: ['exe'] },
          'application/x-msdownload': {
            source: 'apache',
            extensions: ['exe', 'dll', 'com', 'bat', 'msi'],
          },
          'application/x-msmediaview': {
            source: 'apache',
            extensions: ['mvb', 'm13', 'm14'],
          },
          'application/x-msmetafile': {
            source: 'apache',
            extensions: ['wmf', 'wmz', 'emf', 'emz'],
          },
          'application/x-msmoney': {
            source: 'apache',
            extensions: ['mny'],
          },
          'application/x-mspublisher': {
            source: 'apache',
            extensions: ['pub'],
          },
          'application/x-msschedule': {
            source: 'apache',
            extensions: ['scd'],
          },
          'application/x-msterminal': {
            source: 'apache',
            extensions: ['trm'],
          },
          'application/x-mswrite': {
            source: 'apache',
            extensions: ['wri'],
          },
          'application/x-netcdf': {
            source: 'apache',
            extensions: ['nc', 'cdf'],
          },
          'application/x-ns-proxy-autoconfig': {
            compressible: true,
            extensions: ['pac'],
          },
          'application/x-nzb': {
            source: 'apache',
            extensions: ['nzb'],
          },
          'application/x-perl': {
            source: 'nginx',
            extensions: ['pl', 'pm'],
          },
          'application/x-pilot': {
            source: 'nginx',
            extensions: ['prc', 'pdb'],
          },
          'application/x-pkcs12': {
            source: 'apache',
            compressible: false,
            extensions: ['p12', 'pfx'],
          },
          'application/x-pkcs7-certificates': {
            source: 'apache',
            extensions: ['p7b', 'spc'],
          },
          'application/x-pkcs7-certreqresp': {
            source: 'apache',
            extensions: ['p7r'],
          },
          'application/x-pki-message': { source: 'iana' },
          'application/x-rar-compressed': {
            source: 'apache',
            compressible: false,
            extensions: ['rar'],
          },
          'application/x-redhat-package-manager': {
            source: 'nginx',
            extensions: ['rpm'],
          },
          'application/x-research-info-systems': {
            source: 'apache',
            extensions: ['ris'],
          },
          'application/x-sea': {
            source: 'nginx',
            extensions: ['sea'],
          },
          'application/x-sh': {
            source: 'apache',
            compressible: true,
            extensions: ['sh'],
          },
          'application/x-shar': {
            source: 'apache',
            extensions: ['shar'],
          },
          'application/x-shockwave-flash': {
            source: 'apache',
            compressible: false,
            extensions: ['swf'],
          },
          'application/x-silverlight-app': {
            source: 'apache',
            extensions: ['xap'],
          },
          'application/x-sql': {
            source: 'apache',
            extensions: ['sql'],
          },
          'application/x-stuffit': {
            source: 'apache',
            compressible: false,
            extensions: ['sit'],
          },
          'application/x-stuffitx': {
            source: 'apache',
            extensions: ['sitx'],
          },
          'application/x-subrip': {
            source: 'apache',
            extensions: ['srt'],
          },
          'application/x-sv4cpio': {
            source: 'apache',
            extensions: ['sv4cpio'],
          },
          'application/x-sv4crc': {
            source: 'apache',
            extensions: ['sv4crc'],
          },
          'application/x-t3vm-image': {
            source: 'apache',
            extensions: ['t3'],
          },
          'application/x-tads': {
            source: 'apache',
            extensions: ['gam'],
          },
          'application/x-tar': {
            source: 'apache',
            compressible: true,
            extensions: ['tar'],
          },
          'application/x-tcl': {
            source: 'apache',
            extensions: ['tcl', 'tk'],
          },
          'application/x-tex': {
            source: 'apache',
            extensions: ['tex'],
          },
          'application/x-tex-tfm': {
            source: 'apache',
            extensions: ['tfm'],
          },
          'application/x-texinfo': {
            source: 'apache',
            extensions: ['texinfo', 'texi'],
          },
          'application/x-tgif': {
            source: 'apache',
            extensions: ['obj'],
          },
          'application/x-ustar': {
            source: 'apache',
            extensions: ['ustar'],
          },
          'application/x-virtualbox-hdd': {
            compressible: true,
            extensions: ['hdd'],
          },
          'application/x-virtualbox-ova': {
            compressible: true,
            extensions: ['ova'],
          },
          'application/x-virtualbox-ovf': {
            compressible: true,
            extensions: ['ovf'],
          },
          'application/x-virtualbox-vbox': {
            compressible: true,
            extensions: ['vbox'],
          },
          'application/x-virtualbox-vbox-extpack': {
            compressible: false,
            extensions: ['vbox-extpack'],
          },
          'application/x-virtualbox-vdi': {
            compressible: true,
            extensions: ['vdi'],
          },
          'application/x-virtualbox-vhd': {
            compressible: true,
            extensions: ['vhd'],
          },
          'application/x-virtualbox-vmdk': {
            compressible: true,
            extensions: ['vmdk'],
          },
          'application/x-wais-source': {
            source: 'apache',
            extensions: ['src'],
          },
          'application/x-web-app-manifest+json': {
            compressible: true,
            extensions: ['webapp'],
          },
          'application/x-www-form-urlencoded': {
            source: 'iana',
            compressible: true,
          },
          'application/x-x509-ca-cert': {
            source: 'iana',
            extensions: ['der', 'crt', 'pem'],
          },
          'application/x-x509-ca-ra-cert': { source: 'iana' },
          'application/x-x509-next-ca-cert': { source: 'iana' },
          'application/x-xfig': {
            source: 'apache',
            extensions: ['fig'],
          },
          'application/x-xliff+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['xlf'],
          },
          'application/x-xpinstall': {
            source: 'apache',
            compressible: false,
            extensions: ['xpi'],
          },
          'application/x-xz': {
            source: 'apache',
            extensions: ['xz'],
          },
          'application/x-zmachine': {
            source: 'apache',
            extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8'],
          },
          'application/x400-bp': { source: 'iana' },
          'application/xacml+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xaml+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['xaml'],
          },
          'application/xcap-att+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xav'],
          },
          'application/xcap-caps+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xca'],
          },
          'application/xcap-diff+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xdf'],
          },
          'application/xcap-el+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xel'],
          },
          'application/xcap-error+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xcap-ns+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xns'],
          },
          'application/xcon-conference-info+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xcon-conference-info-diff+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xenc+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xenc'],
          },
          'application/xhtml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xhtml', 'xht'],
          },
          'application/xhtml-voice+xml': {
            source: 'apache',
            compressible: true,
          },
          'application/xliff+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xlf'],
          },
          'application/xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xml', 'xsl', 'xsd', 'rng'],
          },
          'application/xml-dtd': {
            source: 'iana',
            compressible: true,
            extensions: ['dtd'],
          },
          'application/xml-external-parsed-entity': {
            source: 'iana',
          },
          'application/xml-patch+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xmpp+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/xop+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xop'],
          },
          'application/xproc+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['xpl'],
          },
          'application/xslt+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xsl', 'xslt'],
          },
          'application/xspf+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['xspf'],
          },
          'application/xv+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['mxml', 'xhvml', 'xvml', 'xvm'],
          },
          'application/yang': {
            source: 'iana',
            extensions: ['yang'],
          },
          'application/yang-data+json': {
            source: 'iana',
            compressible: true,
          },
          'application/yang-data+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/yang-patch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/yang-patch+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/yin+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['yin'],
          },
          'application/zip': {
            source: 'iana',
            compressible: false,
            extensions: ['zip'],
          },
          'application/zlib': { source: 'iana' },
          'application/zstd': { source: 'iana' },
          'audio/1d-interleaved-parityfec': { source: 'iana' },
          'audio/32kadpcm': { source: 'iana' },
          'audio/3gpp': {
            source: 'iana',
            compressible: false,
            extensions: ['3gpp'],
          },
          'audio/3gpp2': { source: 'iana' },
          'audio/aac': { source: 'iana' },
          'audio/ac3': { source: 'iana' },
          'audio/adpcm': { source: 'apache', extensions: ['adp'] },
          'audio/amr': { source: 'iana', extensions: ['amr'] },
          'audio/amr-wb': { source: 'iana' },
          'audio/amr-wb+': { source: 'iana' },
          'audio/aptx': { source: 'iana' },
          'audio/asc': { source: 'iana' },
          'audio/atrac-advanced-lossless': { source: 'iana' },
          'audio/atrac-x': { source: 'iana' },
          'audio/atrac3': { source: 'iana' },
          'audio/basic': {
            source: 'iana',
            compressible: false,
            extensions: ['au', 'snd'],
          },
          'audio/bv16': { source: 'iana' },
          'audio/bv32': { source: 'iana' },
          'audio/clearmode': { source: 'iana' },
          'audio/cn': { source: 'iana' },
          'audio/dat12': { source: 'iana' },
          'audio/dls': { source: 'iana' },
          'audio/dsr-es201108': { source: 'iana' },
          'audio/dsr-es202050': { source: 'iana' },
          'audio/dsr-es202211': { source: 'iana' },
          'audio/dsr-es202212': { source: 'iana' },
          'audio/dv': { source: 'iana' },
          'audio/dvi4': { source: 'iana' },
          'audio/eac3': { source: 'iana' },
          'audio/encaprtp': { source: 'iana' },
          'audio/evrc': { source: 'iana' },
          'audio/evrc-qcp': { source: 'iana' },
          'audio/evrc0': { source: 'iana' },
          'audio/evrc1': { source: 'iana' },
          'audio/evrcb': { source: 'iana' },
          'audio/evrcb0': { source: 'iana' },
          'audio/evrcb1': { source: 'iana' },
          'audio/evrcnw': { source: 'iana' },
          'audio/evrcnw0': { source: 'iana' },
          'audio/evrcnw1': { source: 'iana' },
          'audio/evrcwb': { source: 'iana' },
          'audio/evrcwb0': { source: 'iana' },
          'audio/evrcwb1': { source: 'iana' },
          'audio/evs': { source: 'iana' },
          'audio/flexfec': { source: 'iana' },
          'audio/fwdred': { source: 'iana' },
          'audio/g711-0': { source: 'iana' },
          'audio/g719': { source: 'iana' },
          'audio/g722': { source: 'iana' },
          'audio/g7221': { source: 'iana' },
          'audio/g723': { source: 'iana' },
          'audio/g726-16': { source: 'iana' },
          'audio/g726-24': { source: 'iana' },
          'audio/g726-32': { source: 'iana' },
          'audio/g726-40': { source: 'iana' },
          'audio/g728': { source: 'iana' },
          'audio/g729': { source: 'iana' },
          'audio/g7291': { source: 'iana' },
          'audio/g729d': { source: 'iana' },
          'audio/g729e': { source: 'iana' },
          'audio/gsm': { source: 'iana' },
          'audio/gsm-efr': { source: 'iana' },
          'audio/gsm-hr-08': { source: 'iana' },
          'audio/ilbc': { source: 'iana' },
          'audio/ip-mr_v2.5': { source: 'iana' },
          'audio/isac': { source: 'apache' },
          'audio/l16': { source: 'iana' },
          'audio/l20': { source: 'iana' },
          'audio/l24': { source: 'iana', compressible: false },
          'audio/l8': { source: 'iana' },
          'audio/lpc': { source: 'iana' },
          'audio/melp': { source: 'iana' },
          'audio/melp1200': { source: 'iana' },
          'audio/melp2400': { source: 'iana' },
          'audio/melp600': { source: 'iana' },
          'audio/mhas': { source: 'iana' },
          'audio/midi': {
            source: 'apache',
            extensions: ['mid', 'midi', 'kar', 'rmi'],
          },
          'audio/mobile-xmf': {
            source: 'iana',
            extensions: ['mxmf'],
          },
          'audio/mp3': { compressible: false, extensions: ['mp3'] },
          'audio/mp4': {
            source: 'iana',
            compressible: false,
            extensions: ['m4a', 'mp4a'],
          },
          'audio/mp4a-latm': { source: 'iana' },
          'audio/mpa': { source: 'iana' },
          'audio/mpa-robust': { source: 'iana' },
          'audio/mpeg': {
            source: 'iana',
            compressible: false,
            extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a'],
          },
          'audio/mpeg4-generic': { source: 'iana' },
          'audio/musepack': { source: 'apache' },
          'audio/ogg': {
            source: 'iana',
            compressible: false,
            extensions: ['oga', 'ogg', 'spx', 'opus'],
          },
          'audio/opus': { source: 'iana' },
          'audio/parityfec': { source: 'iana' },
          'audio/pcma': { source: 'iana' },
          'audio/pcma-wb': { source: 'iana' },
          'audio/pcmu': { source: 'iana' },
          'audio/pcmu-wb': { source: 'iana' },
          'audio/prs.sid': { source: 'iana' },
          'audio/qcelp': { source: 'iana' },
          'audio/raptorfec': { source: 'iana' },
          'audio/red': { source: 'iana' },
          'audio/rtp-enc-aescm128': { source: 'iana' },
          'audio/rtp-midi': { source: 'iana' },
          'audio/rtploopback': { source: 'iana' },
          'audio/rtx': { source: 'iana' },
          'audio/s3m': { source: 'apache', extensions: ['s3m'] },
          'audio/scip': { source: 'iana' },
          'audio/silk': { source: 'apache', extensions: ['sil'] },
          'audio/smv': { source: 'iana' },
          'audio/smv-qcp': { source: 'iana' },
          'audio/smv0': { source: 'iana' },
          'audio/sofa': { source: 'iana' },
          'audio/sp-midi': { source: 'iana' },
          'audio/speex': { source: 'iana' },
          'audio/t140c': { source: 'iana' },
          'audio/t38': { source: 'iana' },
          'audio/telephone-event': { source: 'iana' },
          'audio/tetra_acelp': { source: 'iana' },
          'audio/tetra_acelp_bb': { source: 'iana' },
          'audio/tone': { source: 'iana' },
          'audio/tsvcis': { source: 'iana' },
          'audio/uemclip': { source: 'iana' },
          'audio/ulpfec': { source: 'iana' },
          'audio/usac': { source: 'iana' },
          'audio/vdvi': { source: 'iana' },
          'audio/vmr-wb': { source: 'iana' },
          'audio/vnd.3gpp.iufp': { source: 'iana' },
          'audio/vnd.4sb': { source: 'iana' },
          'audio/vnd.audiokoz': { source: 'iana' },
          'audio/vnd.celp': { source: 'iana' },
          'audio/vnd.cisco.nse': { source: 'iana' },
          'audio/vnd.cmles.radio-events': { source: 'iana' },
          'audio/vnd.cns.anp1': { source: 'iana' },
          'audio/vnd.cns.inf1': { source: 'iana' },
          'audio/vnd.dece.audio': {
            source: 'iana',
            extensions: ['uva', 'uvva'],
          },
          'audio/vnd.digital-winds': {
            source: 'iana',
            extensions: ['eol'],
          },
          'audio/vnd.dlna.adts': { source: 'iana' },
          'audio/vnd.dolby.heaac.1': { source: 'iana' },
          'audio/vnd.dolby.heaac.2': { source: 'iana' },
          'audio/vnd.dolby.mlp': { source: 'iana' },
          'audio/vnd.dolby.mps': { source: 'iana' },
          'audio/vnd.dolby.pl2': { source: 'iana' },
          'audio/vnd.dolby.pl2x': { source: 'iana' },
          'audio/vnd.dolby.pl2z': { source: 'iana' },
          'audio/vnd.dolby.pulse.1': { source: 'iana' },
          'audio/vnd.dra': { source: 'iana', extensions: ['dra'] },
          'audio/vnd.dts': { source: 'iana', extensions: ['dts'] },
          'audio/vnd.dts.hd': {
            source: 'iana',
            extensions: ['dtshd'],
          },
          'audio/vnd.dts.uhd': { source: 'iana' },
          'audio/vnd.dvb.file': { source: 'iana' },
          'audio/vnd.everad.plj': { source: 'iana' },
          'audio/vnd.hns.audio': { source: 'iana' },
          'audio/vnd.lucent.voice': {
            source: 'iana',
            extensions: ['lvp'],
          },
          'audio/vnd.ms-playready.media.pya': {
            source: 'iana',
            extensions: ['pya'],
          },
          'audio/vnd.nokia.mobile-xmf': { source: 'iana' },
          'audio/vnd.nortel.vbk': { source: 'iana' },
          'audio/vnd.nuera.ecelp4800': {
            source: 'iana',
            extensions: ['ecelp4800'],
          },
          'audio/vnd.nuera.ecelp7470': {
            source: 'iana',
            extensions: ['ecelp7470'],
          },
          'audio/vnd.nuera.ecelp9600': {
            source: 'iana',
            extensions: ['ecelp9600'],
          },
          'audio/vnd.octel.sbc': { source: 'iana' },
          'audio/vnd.presonus.multitrack': { source: 'iana' },
          'audio/vnd.qcelp': { source: 'iana' },
          'audio/vnd.rhetorex.32kadpcm': { source: 'iana' },
          'audio/vnd.rip': { source: 'iana', extensions: ['rip'] },
          'audio/vnd.rn-realaudio': { compressible: false },
          'audio/vnd.sealedmedia.softseal.mpeg': { source: 'iana' },
          'audio/vnd.vmx.cvsd': { source: 'iana' },
          'audio/vnd.wave': { compressible: false },
          'audio/vorbis': { source: 'iana', compressible: false },
          'audio/vorbis-config': { source: 'iana' },
          'audio/wav': { compressible: false, extensions: ['wav'] },
          'audio/wave': { compressible: false, extensions: ['wav'] },
          'audio/webm': {
            source: 'apache',
            compressible: false,
            extensions: ['weba'],
          },
          'audio/x-aac': {
            source: 'apache',
            compressible: false,
            extensions: ['aac'],
          },
          'audio/x-aiff': {
            source: 'apache',
            extensions: ['aif', 'aiff', 'aifc'],
          },
          'audio/x-caf': {
            source: 'apache',
            compressible: false,
            extensions: ['caf'],
          },
          'audio/x-flac': { source: 'apache', extensions: ['flac'] },
          'audio/x-m4a': { source: 'nginx', extensions: ['m4a'] },
          'audio/x-matroska': {
            source: 'apache',
            extensions: ['mka'],
          },
          'audio/x-mpegurl': {
            source: 'apache',
            extensions: ['m3u'],
          },
          'audio/x-ms-wax': { source: 'apache', extensions: ['wax'] },
          'audio/x-ms-wma': { source: 'apache', extensions: ['wma'] },
          'audio/x-pn-realaudio': {
            source: 'apache',
            extensions: ['ram', 'ra'],
          },
          'audio/x-pn-realaudio-plugin': {
            source: 'apache',
            extensions: ['rmp'],
          },
          'audio/x-realaudio': {
            source: 'nginx',
            extensions: ['ra'],
          },
          'audio/x-tta': { source: 'apache' },
          'audio/x-wav': { source: 'apache', extensions: ['wav'] },
          'audio/xm': { source: 'apache', extensions: ['xm'] },
          'chemical/x-cdx': { source: 'apache', extensions: ['cdx'] },
          'chemical/x-cif': { source: 'apache', extensions: ['cif'] },
          'chemical/x-cmdf': {
            source: 'apache',
            extensions: ['cmdf'],
          },
          'chemical/x-cml': { source: 'apache', extensions: ['cml'] },
          'chemical/x-csml': {
            source: 'apache',
            extensions: ['csml'],
          },
          'chemical/x-pdb': { source: 'apache' },
          'chemical/x-xyz': { source: 'apache', extensions: ['xyz'] },
          'font/collection': { source: 'iana', extensions: ['ttc'] },
          'font/otf': {
            source: 'iana',
            compressible: true,
            extensions: ['otf'],
          },
          'font/sfnt': { source: 'iana' },
          'font/ttf': {
            source: 'iana',
            compressible: true,
            extensions: ['ttf'],
          },
          'font/woff': { source: 'iana', extensions: ['woff'] },
          'font/woff2': { source: 'iana', extensions: ['woff2'] },
          'image/aces': { source: 'iana', extensions: ['exr'] },
          'image/apng': { compressible: false, extensions: ['apng'] },
          'image/avci': { source: 'iana', extensions: ['avci'] },
          'image/avcs': { source: 'iana', extensions: ['avcs'] },
          'image/avif': {
            source: 'iana',
            compressible: false,
            extensions: ['avif'],
          },
          'image/bmp': {
            source: 'iana',
            compressible: true,
            extensions: ['bmp'],
          },
          'image/cgm': { source: 'iana', extensions: ['cgm'] },
          'image/dicom-rle': { source: 'iana', extensions: ['drle'] },
          'image/emf': { source: 'iana', extensions: ['emf'] },
          'image/fits': { source: 'iana', extensions: ['fits'] },
          'image/g3fax': { source: 'iana', extensions: ['g3'] },
          'image/gif': {
            source: 'iana',
            compressible: false,
            extensions: ['gif'],
          },
          'image/heic': { source: 'iana', extensions: ['heic'] },
          'image/heic-sequence': {
            source: 'iana',
            extensions: ['heics'],
          },
          'image/heif': { source: 'iana', extensions: ['heif'] },
          'image/heif-sequence': {
            source: 'iana',
            extensions: ['heifs'],
          },
          'image/hej2k': { source: 'iana', extensions: ['hej2'] },
          'image/hsj2': { source: 'iana', extensions: ['hsj2'] },
          'image/ief': { source: 'iana', extensions: ['ief'] },
          'image/jls': { source: 'iana', extensions: ['jls'] },
          'image/jp2': {
            source: 'iana',
            compressible: false,
            extensions: ['jp2', 'jpg2'],
          },
          'image/jpeg': {
            source: 'iana',
            compressible: false,
            extensions: ['jpeg', 'jpg', 'jpe'],
          },
          'image/jph': { source: 'iana', extensions: ['jph'] },
          'image/jphc': { source: 'iana', extensions: ['jhc'] },
          'image/jpm': {
            source: 'iana',
            compressible: false,
            extensions: ['jpm'],
          },
          'image/jpx': {
            source: 'iana',
            compressible: false,
            extensions: ['jpx', 'jpf'],
          },
          'image/jxr': { source: 'iana', extensions: ['jxr'] },
          'image/jxra': { source: 'iana', extensions: ['jxra'] },
          'image/jxrs': { source: 'iana', extensions: ['jxrs'] },
          'image/jxs': { source: 'iana', extensions: ['jxs'] },
          'image/jxsc': { source: 'iana', extensions: ['jxsc'] },
          'image/jxsi': { source: 'iana', extensions: ['jxsi'] },
          'image/jxss': { source: 'iana', extensions: ['jxss'] },
          'image/ktx': { source: 'iana', extensions: ['ktx'] },
          'image/ktx2': { source: 'iana', extensions: ['ktx2'] },
          'image/naplps': { source: 'iana' },
          'image/pjpeg': { compressible: false },
          'image/png': {
            source: 'iana',
            compressible: false,
            extensions: ['png'],
          },
          'image/prs.btif': { source: 'iana', extensions: ['btif'] },
          'image/prs.pti': { source: 'iana', extensions: ['pti'] },
          'image/pwg-raster': { source: 'iana' },
          'image/sgi': { source: 'apache', extensions: ['sgi'] },
          'image/svg+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['svg', 'svgz'],
          },
          'image/t38': { source: 'iana', extensions: ['t38'] },
          'image/tiff': {
            source: 'iana',
            compressible: false,
            extensions: ['tif', 'tiff'],
          },
          'image/tiff-fx': { source: 'iana', extensions: ['tfx'] },
          'image/vnd.adobe.photoshop': {
            source: 'iana',
            compressible: true,
            extensions: ['psd'],
          },
          'image/vnd.airzip.accelerator.azv': {
            source: 'iana',
            extensions: ['azv'],
          },
          'image/vnd.cns.inf2': { source: 'iana' },
          'image/vnd.dece.graphic': {
            source: 'iana',
            extensions: ['uvi', 'uvvi', 'uvg', 'uvvg'],
          },
          'image/vnd.djvu': {
            source: 'iana',
            extensions: ['djvu', 'djv'],
          },
          'image/vnd.dvb.subtitle': {
            source: 'iana',
            extensions: ['sub'],
          },
          'image/vnd.dwg': { source: 'iana', extensions: ['dwg'] },
          'image/vnd.dxf': { source: 'iana', extensions: ['dxf'] },
          'image/vnd.fastbidsheet': {
            source: 'iana',
            extensions: ['fbs'],
          },
          'image/vnd.fpx': { source: 'iana', extensions: ['fpx'] },
          'image/vnd.fst': { source: 'iana', extensions: ['fst'] },
          'image/vnd.fujixerox.edmics-mmr': {
            source: 'iana',
            extensions: ['mmr'],
          },
          'image/vnd.fujixerox.edmics-rlc': {
            source: 'iana',
            extensions: ['rlc'],
          },
          'image/vnd.globalgraphics.pgb': { source: 'iana' },
          'image/vnd.microsoft.icon': {
            source: 'iana',
            compressible: true,
            extensions: ['ico'],
          },
          'image/vnd.mix': { source: 'iana' },
          'image/vnd.mozilla.apng': { source: 'iana' },
          'image/vnd.ms-dds': {
            compressible: true,
            extensions: ['dds'],
          },
          'image/vnd.ms-modi': {
            source: 'iana',
            extensions: ['mdi'],
          },
          'image/vnd.ms-photo': {
            source: 'apache',
            extensions: ['wdp'],
          },
          'image/vnd.net-fpx': {
            source: 'iana',
            extensions: ['npx'],
          },
          'image/vnd.pco.b16': {
            source: 'iana',
            extensions: ['b16'],
          },
          'image/vnd.radiance': { source: 'iana' },
          'image/vnd.sealed.png': { source: 'iana' },
          'image/vnd.sealedmedia.softseal.gif': { source: 'iana' },
          'image/vnd.sealedmedia.softseal.jpg': { source: 'iana' },
          'image/vnd.svf': { source: 'iana' },
          'image/vnd.tencent.tap': {
            source: 'iana',
            extensions: ['tap'],
          },
          'image/vnd.valve.source.texture': {
            source: 'iana',
            extensions: ['vtf'],
          },
          'image/vnd.wap.wbmp': {
            source: 'iana',
            extensions: ['wbmp'],
          },
          'image/vnd.xiff': { source: 'iana', extensions: ['xif'] },
          'image/vnd.zbrush.pcx': {
            source: 'iana',
            extensions: ['pcx'],
          },
          'image/webp': { source: 'apache', extensions: ['webp'] },
          'image/wmf': { source: 'iana', extensions: ['wmf'] },
          'image/x-3ds': { source: 'apache', extensions: ['3ds'] },
          'image/x-cmu-raster': {
            source: 'apache',
            extensions: ['ras'],
          },
          'image/x-cmx': { source: 'apache', extensions: ['cmx'] },
          'image/x-freehand': {
            source: 'apache',
            extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7'],
          },
          'image/x-icon': {
            source: 'apache',
            compressible: true,
            extensions: ['ico'],
          },
          'image/x-jng': { source: 'nginx', extensions: ['jng'] },
          'image/x-mrsid-image': {
            source: 'apache',
            extensions: ['sid'],
          },
          'image/x-ms-bmp': {
            source: 'nginx',
            compressible: true,
            extensions: ['bmp'],
          },
          'image/x-pcx': { source: 'apache', extensions: ['pcx'] },
          'image/x-pict': {
            source: 'apache',
            extensions: ['pic', 'pct'],
          },
          'image/x-portable-anymap': {
            source: 'apache',
            extensions: ['pnm'],
          },
          'image/x-portable-bitmap': {
            source: 'apache',
            extensions: ['pbm'],
          },
          'image/x-portable-graymap': {
            source: 'apache',
            extensions: ['pgm'],
          },
          'image/x-portable-pixmap': {
            source: 'apache',
            extensions: ['ppm'],
          },
          'image/x-rgb': { source: 'apache', extensions: ['rgb'] },
          'image/x-tga': { source: 'apache', extensions: ['tga'] },
          'image/x-xbitmap': {
            source: 'apache',
            extensions: ['xbm'],
          },
          'image/x-xcf': { compressible: false },
          'image/x-xpixmap': {
            source: 'apache',
            extensions: ['xpm'],
          },
          'image/x-xwindowdump': {
            source: 'apache',
            extensions: ['xwd'],
          },
          'message/cpim': { source: 'iana' },
          'message/delivery-status': { source: 'iana' },
          'message/disposition-notification': {
            source: 'iana',
            extensions: ['disposition-notification'],
          },
          'message/external-body': { source: 'iana' },
          'message/feedback-report': { source: 'iana' },
          'message/global': { source: 'iana', extensions: ['u8msg'] },
          'message/global-delivery-status': {
            source: 'iana',
            extensions: ['u8dsn'],
          },
          'message/global-disposition-notification': {
            source: 'iana',
            extensions: ['u8mdn'],
          },
          'message/global-headers': {
            source: 'iana',
            extensions: ['u8hdr'],
          },
          'message/http': { source: 'iana', compressible: false },
          'message/imdn+xml': { source: 'iana', compressible: true },
          'message/news': { source: 'iana' },
          'message/partial': { source: 'iana', compressible: false },
          'message/rfc822': {
            source: 'iana',
            compressible: true,
            extensions: ['eml', 'mime'],
          },
          'message/s-http': { source: 'iana' },
          'message/sip': { source: 'iana' },
          'message/sipfrag': { source: 'iana' },
          'message/tracking-status': { source: 'iana' },
          'message/vnd.si.simp': { source: 'iana' },
          'message/vnd.wfa.wsc': {
            source: 'iana',
            extensions: ['wsc'],
          },
          'model/3mf': { source: 'iana', extensions: ['3mf'] },
          'model/e57': { source: 'iana' },
          'model/gltf+json': {
            source: 'iana',
            compressible: true,
            extensions: ['gltf'],
          },
          'model/gltf-binary': {
            source: 'iana',
            compressible: true,
            extensions: ['glb'],
          },
          'model/iges': {
            source: 'iana',
            compressible: false,
            extensions: ['igs', 'iges'],
          },
          'model/mesh': {
            source: 'iana',
            compressible: false,
            extensions: ['msh', 'mesh', 'silo'],
          },
          'model/mtl': { source: 'iana', extensions: ['mtl'] },
          'model/obj': { source: 'iana', extensions: ['obj'] },
          'model/step': { source: 'iana' },
          'model/step+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['stpx'],
          },
          'model/step+zip': {
            source: 'iana',
            compressible: false,
            extensions: ['stpz'],
          },
          'model/step-xml+zip': {
            source: 'iana',
            compressible: false,
            extensions: ['stpxz'],
          },
          'model/stl': { source: 'iana', extensions: ['stl'] },
          'model/vnd.collada+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['dae'],
          },
          'model/vnd.dwf': { source: 'iana', extensions: ['dwf'] },
          'model/vnd.flatland.3dml': { source: 'iana' },
          'model/vnd.gdl': { source: 'iana', extensions: ['gdl'] },
          'model/vnd.gs-gdl': { source: 'apache' },
          'model/vnd.gs.gdl': { source: 'iana' },
          'model/vnd.gtw': { source: 'iana', extensions: ['gtw'] },
          'model/vnd.moml+xml': {
            source: 'iana',
            compressible: true,
          },
          'model/vnd.mts': { source: 'iana', extensions: ['mts'] },
          'model/vnd.opengex': {
            source: 'iana',
            extensions: ['ogex'],
          },
          'model/vnd.parasolid.transmit.binary': {
            source: 'iana',
            extensions: ['x_b'],
          },
          'model/vnd.parasolid.transmit.text': {
            source: 'iana',
            extensions: ['x_t'],
          },
          'model/vnd.pytha.pyox': { source: 'iana' },
          'model/vnd.rosette.annotated-data-model': {
            source: 'iana',
          },
          'model/vnd.sap.vds': {
            source: 'iana',
            extensions: ['vds'],
          },
          'model/vnd.usdz+zip': {
            source: 'iana',
            compressible: false,
            extensions: ['usdz'],
          },
          'model/vnd.valve.source.compiled-map': {
            source: 'iana',
            extensions: ['bsp'],
          },
          'model/vnd.vtu': { source: 'iana', extensions: ['vtu'] },
          'model/vrml': {
            source: 'iana',
            compressible: false,
            extensions: ['wrl', 'vrml'],
          },
          'model/x3d+binary': {
            source: 'apache',
            compressible: false,
            extensions: ['x3db', 'x3dbz'],
          },
          'model/x3d+fastinfoset': {
            source: 'iana',
            extensions: ['x3db'],
          },
          'model/x3d+vrml': {
            source: 'apache',
            compressible: false,
            extensions: ['x3dv', 'x3dvz'],
          },
          'model/x3d+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['x3d', 'x3dz'],
          },
          'model/x3d-vrml': { source: 'iana', extensions: ['x3dv'] },
          'multipart/alternative': {
            source: 'iana',
            compressible: false,
          },
          'multipart/appledouble': { source: 'iana' },
          'multipart/byteranges': { source: 'iana' },
          'multipart/digest': { source: 'iana' },
          'multipart/encrypted': {
            source: 'iana',
            compressible: false,
          },
          'multipart/form-data': {
            source: 'iana',
            compressible: false,
          },
          'multipart/header-set': { source: 'iana' },
          'multipart/mixed': { source: 'iana' },
          'multipart/multilingual': { source: 'iana' },
          'multipart/parallel': { source: 'iana' },
          'multipart/related': {
            source: 'iana',
            compressible: false,
          },
          'multipart/report': { source: 'iana' },
          'multipart/signed': { source: 'iana', compressible: false },
          'multipart/vnd.bint.med-plus': { source: 'iana' },
          'multipart/voice-message': { source: 'iana' },
          'multipart/x-mixed-replace': { source: 'iana' },
          'text/1d-interleaved-parityfec': { source: 'iana' },
          'text/cache-manifest': {
            source: 'iana',
            compressible: true,
            extensions: ['appcache', 'manifest'],
          },
          'text/calendar': {
            source: 'iana',
            extensions: ['ics', 'ifb'],
          },
          'text/calender': { compressible: true },
          'text/cmd': { compressible: true },
          'text/coffeescript': {
            extensions: ['coffee', 'litcoffee'],
          },
          'text/cql': { source: 'iana' },
          'text/cql-expression': { source: 'iana' },
          'text/cql-identifier': { source: 'iana' },
          'text/css': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['css'],
          },
          'text/csv': {
            source: 'iana',
            compressible: true,
            extensions: ['csv'],
          },
          'text/csv-schema': { source: 'iana' },
          'text/directory': { source: 'iana' },
          'text/dns': { source: 'iana' },
          'text/ecmascript': { source: 'iana' },
          'text/encaprtp': { source: 'iana' },
          'text/enriched': { source: 'iana' },
          'text/fhirpath': { source: 'iana' },
          'text/flexfec': { source: 'iana' },
          'text/fwdred': { source: 'iana' },
          'text/gff3': { source: 'iana' },
          'text/grammar-ref-list': { source: 'iana' },
          'text/html': {
            source: 'iana',
            compressible: true,
            extensions: ['html', 'htm', 'shtml'],
          },
          'text/jade': { extensions: ['jade'] },
          'text/javascript': { source: 'iana', compressible: true },
          'text/jcr-cnd': { source: 'iana' },
          'text/jsx': { compressible: true, extensions: ['jsx'] },
          'text/less': { compressible: true, extensions: ['less'] },
          'text/markdown': {
            source: 'iana',
            compressible: true,
            extensions: ['markdown', 'md'],
          },
          'text/mathml': { source: 'nginx', extensions: ['mml'] },
          'text/mdx': { compressible: true, extensions: ['mdx'] },
          'text/mizar': { source: 'iana' },
          'text/n3': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['n3'],
          },
          'text/parameters': { source: 'iana', charset: 'UTF-8' },
          'text/parityfec': { source: 'iana' },
          'text/plain': {
            source: 'iana',
            compressible: true,
            extensions: [
              'txt',
              'text',
              'conf',
              'def',
              'list',
              'log',
              'in',
              'ini',
            ],
          },
          'text/provenance-notation': {
            source: 'iana',
            charset: 'UTF-8',
          },
          'text/prs.fallenstein.rst': { source: 'iana' },
          'text/prs.lines.tag': {
            source: 'iana',
            extensions: ['dsc'],
          },
          'text/prs.prop.logic': { source: 'iana' },
          'text/raptorfec': { source: 'iana' },
          'text/red': { source: 'iana' },
          'text/rfc822-headers': { source: 'iana' },
          'text/richtext': {
            source: 'iana',
            compressible: true,
            extensions: ['rtx'],
          },
          'text/rtf': {
            source: 'iana',
            compressible: true,
            extensions: ['rtf'],
          },
          'text/rtp-enc-aescm128': { source: 'iana' },
          'text/rtploopback': { source: 'iana' },
          'text/rtx': { source: 'iana' },
          'text/sgml': {
            source: 'iana',
            extensions: ['sgml', 'sgm'],
          },
          'text/shaclc': { source: 'iana' },
          'text/shex': { source: 'iana', extensions: ['shex'] },
          'text/slim': { extensions: ['slim', 'slm'] },
          'text/spdx': { source: 'iana', extensions: ['spdx'] },
          'text/strings': { source: 'iana' },
          'text/stylus': { extensions: ['stylus', 'styl'] },
          'text/t140': { source: 'iana' },
          'text/tab-separated-values': {
            source: 'iana',
            compressible: true,
            extensions: ['tsv'],
          },
          'text/troff': {
            source: 'iana',
            extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms'],
          },
          'text/turtle': {
            source: 'iana',
            charset: 'UTF-8',
            extensions: ['ttl'],
          },
          'text/ulpfec': { source: 'iana' },
          'text/uri-list': {
            source: 'iana',
            compressible: true,
            extensions: ['uri', 'uris', 'urls'],
          },
          'text/vcard': {
            source: 'iana',
            compressible: true,
            extensions: ['vcard'],
          },
          'text/vnd.a': { source: 'iana' },
          'text/vnd.abc': { source: 'iana' },
          'text/vnd.ascii-art': { source: 'iana' },
          'text/vnd.curl': { source: 'iana', extensions: ['curl'] },
          'text/vnd.curl.dcurl': {
            source: 'apache',
            extensions: ['dcurl'],
          },
          'text/vnd.curl.mcurl': {
            source: 'apache',
            extensions: ['mcurl'],
          },
          'text/vnd.curl.scurl': {
            source: 'apache',
            extensions: ['scurl'],
          },
          'text/vnd.debian.copyright': {
            source: 'iana',
            charset: 'UTF-8',
          },
          'text/vnd.dmclientscript': { source: 'iana' },
          'text/vnd.dvb.subtitle': {
            source: 'iana',
            extensions: ['sub'],
          },
          'text/vnd.esmertec.theme-descriptor': {
            source: 'iana',
            charset: 'UTF-8',
          },
          'text/vnd.familysearch.gedcom': {
            source: 'iana',
            extensions: ['ged'],
          },
          'text/vnd.ficlab.flt': { source: 'iana' },
          'text/vnd.fly': { source: 'iana', extensions: ['fly'] },
          'text/vnd.fmi.flexstor': {
            source: 'iana',
            extensions: ['flx'],
          },
          'text/vnd.gml': { source: 'iana' },
          'text/vnd.graphviz': { source: 'iana', extensions: ['gv'] },
          'text/vnd.hans': { source: 'iana' },
          'text/vnd.hgl': { source: 'iana' },
          'text/vnd.in3d.3dml': {
            source: 'iana',
            extensions: ['3dml'],
          },
          'text/vnd.in3d.spot': {
            source: 'iana',
            extensions: ['spot'],
          },
          'text/vnd.iptc.newsml': { source: 'iana' },
          'text/vnd.iptc.nitf': { source: 'iana' },
          'text/vnd.latex-z': { source: 'iana' },
          'text/vnd.motorola.reflex': { source: 'iana' },
          'text/vnd.ms-mediapackage': { source: 'iana' },
          'text/vnd.net2phone.commcenter.command': { source: 'iana' },
          'text/vnd.radisys.msml-basic-layout': { source: 'iana' },
          'text/vnd.senx.warpscript': { source: 'iana' },
          'text/vnd.si.uricatalogue': { source: 'iana' },
          'text/vnd.sosi': { source: 'iana' },
          'text/vnd.sun.j2me.app-descriptor': {
            source: 'iana',
            charset: 'UTF-8',
            extensions: ['jad'],
          },
          'text/vnd.trolltech.linguist': {
            source: 'iana',
            charset: 'UTF-8',
          },
          'text/vnd.wap.si': { source: 'iana' },
          'text/vnd.wap.sl': { source: 'iana' },
          'text/vnd.wap.wml': { source: 'iana', extensions: ['wml'] },
          'text/vnd.wap.wmlscript': {
            source: 'iana',
            extensions: ['wmls'],
          },
          'text/vtt': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['vtt'],
          },
          'text/x-asm': {
            source: 'apache',
            extensions: ['s', 'asm'],
          },
          'text/x-c': {
            source: 'apache',
            extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic'],
          },
          'text/x-component': {
            source: 'nginx',
            extensions: ['htc'],
          },
          'text/x-fortran': {
            source: 'apache',
            extensions: ['f', 'for', 'f77', 'f90'],
          },
          'text/x-gwt-rpc': { compressible: true },
          'text/x-handlebars-template': { extensions: ['hbs'] },
          'text/x-java-source': {
            source: 'apache',
            extensions: ['java'],
          },
          'text/x-jquery-tmpl': { compressible: true },
          'text/x-lua': { extensions: ['lua'] },
          'text/x-markdown': {
            compressible: true,
            extensions: ['mkd'],
          },
          'text/x-nfo': { source: 'apache', extensions: ['nfo'] },
          'text/x-opml': { source: 'apache', extensions: ['opml'] },
          'text/x-org': { compressible: true, extensions: ['org'] },
          'text/x-pascal': {
            source: 'apache',
            extensions: ['p', 'pas'],
          },
          'text/x-processing': {
            compressible: true,
            extensions: ['pde'],
          },
          'text/x-sass': { extensions: ['sass'] },
          'text/x-scss': { extensions: ['scss'] },
          'text/x-setext': { source: 'apache', extensions: ['etx'] },
          'text/x-sfv': { source: 'apache', extensions: ['sfv'] },
          'text/x-suse-ymp': {
            compressible: true,
            extensions: ['ymp'],
          },
          'text/x-uuencode': { source: 'apache', extensions: ['uu'] },
          'text/x-vcalendar': {
            source: 'apache',
            extensions: ['vcs'],
          },
          'text/x-vcard': { source: 'apache', extensions: ['vcf'] },
          'text/xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xml'],
          },
          'text/xml-external-parsed-entity': { source: 'iana' },
          'text/yaml': {
            compressible: true,
            extensions: ['yaml', 'yml'],
          },
          'video/1d-interleaved-parityfec': { source: 'iana' },
          'video/3gpp': {
            source: 'iana',
            extensions: ['3gp', '3gpp'],
          },
          'video/3gpp-tt': { source: 'iana' },
          'video/3gpp2': { source: 'iana', extensions: ['3g2'] },
          'video/av1': { source: 'iana' },
          'video/bmpeg': { source: 'iana' },
          'video/bt656': { source: 'iana' },
          'video/celb': { source: 'iana' },
          'video/dv': { source: 'iana' },
          'video/encaprtp': { source: 'iana' },
          'video/ffv1': { source: 'iana' },
          'video/flexfec': { source: 'iana' },
          'video/h261': { source: 'iana', extensions: ['h261'] },
          'video/h263': { source: 'iana', extensions: ['h263'] },
          'video/h263-1998': { source: 'iana' },
          'video/h263-2000': { source: 'iana' },
          'video/h264': { source: 'iana', extensions: ['h264'] },
          'video/h264-rcdo': { source: 'iana' },
          'video/h264-svc': { source: 'iana' },
          'video/h265': { source: 'iana' },
          'video/iso.segment': {
            source: 'iana',
            extensions: ['m4s'],
          },
          'video/jpeg': { source: 'iana', extensions: ['jpgv'] },
          'video/jpeg2000': { source: 'iana' },
          'video/jpm': {
            source: 'apache',
            extensions: ['jpm', 'jpgm'],
          },
          'video/jxsv': { source: 'iana' },
          'video/mj2': {
            source: 'iana',
            extensions: ['mj2', 'mjp2'],
          },
          'video/mp1s': { source: 'iana' },
          'video/mp2p': { source: 'iana' },
          'video/mp2t': { source: 'iana', extensions: ['ts'] },
          'video/mp4': {
            source: 'iana',
            compressible: false,
            extensions: ['mp4', 'mp4v', 'mpg4'],
          },
          'video/mp4v-es': { source: 'iana' },
          'video/mpeg': {
            source: 'iana',
            compressible: false,
            extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v'],
          },
          'video/mpeg4-generic': { source: 'iana' },
          'video/mpv': { source: 'iana' },
          'video/nv': { source: 'iana' },
          'video/ogg': {
            source: 'iana',
            compressible: false,
            extensions: ['ogv'],
          },
          'video/parityfec': { source: 'iana' },
          'video/pointer': { source: 'iana' },
          'video/quicktime': {
            source: 'iana',
            compressible: false,
            extensions: ['qt', 'mov'],
          },
          'video/raptorfec': { source: 'iana' },
          'video/raw': { source: 'iana' },
          'video/rtp-enc-aescm128': { source: 'iana' },
          'video/rtploopback': { source: 'iana' },
          'video/rtx': { source: 'iana' },
          'video/scip': { source: 'iana' },
          'video/smpte291': { source: 'iana' },
          'video/smpte292m': { source: 'iana' },
          'video/ulpfec': { source: 'iana' },
          'video/vc1': { source: 'iana' },
          'video/vc2': { source: 'iana' },
          'video/vnd.cctv': { source: 'iana' },
          'video/vnd.dece.hd': {
            source: 'iana',
            extensions: ['uvh', 'uvvh'],
          },
          'video/vnd.dece.mobile': {
            source: 'iana',
            extensions: ['uvm', 'uvvm'],
          },
          'video/vnd.dece.mp4': { source: 'iana' },
          'video/vnd.dece.pd': {
            source: 'iana',
            extensions: ['uvp', 'uvvp'],
          },
          'video/vnd.dece.sd': {
            source: 'iana',
            extensions: ['uvs', 'uvvs'],
          },
          'video/vnd.dece.video': {
            source: 'iana',
            extensions: ['uvv', 'uvvv'],
          },
          'video/vnd.directv.mpeg': { source: 'iana' },
          'video/vnd.directv.mpeg-tts': { source: 'iana' },
          'video/vnd.dlna.mpeg-tts': { source: 'iana' },
          'video/vnd.dvb.file': {
            source: 'iana',
            extensions: ['dvb'],
          },
          'video/vnd.fvt': { source: 'iana', extensions: ['fvt'] },
          'video/vnd.hns.video': { source: 'iana' },
          'video/vnd.iptvforum.1dparityfec-1010': { source: 'iana' },
          'video/vnd.iptvforum.1dparityfec-2005': { source: 'iana' },
          'video/vnd.iptvforum.2dparityfec-1010': { source: 'iana' },
          'video/vnd.iptvforum.2dparityfec-2005': { source: 'iana' },
          'video/vnd.iptvforum.ttsavc': { source: 'iana' },
          'video/vnd.iptvforum.ttsmpeg2': { source: 'iana' },
          'video/vnd.motorola.video': { source: 'iana' },
          'video/vnd.motorola.videop': { source: 'iana' },
          'video/vnd.mpegurl': {
            source: 'iana',
            extensions: ['mxu', 'm4u'],
          },
          'video/vnd.ms-playready.media.pyv': {
            source: 'iana',
            extensions: ['pyv'],
          },
          'video/vnd.nokia.interleaved-multimedia': {
            source: 'iana',
          },
          'video/vnd.nokia.mp4vr': { source: 'iana' },
          'video/vnd.nokia.videovoip': { source: 'iana' },
          'video/vnd.objectvideo': { source: 'iana' },
          'video/vnd.radgamettools.bink': { source: 'iana' },
          'video/vnd.radgamettools.smacker': { source: 'iana' },
          'video/vnd.sealed.mpeg1': { source: 'iana' },
          'video/vnd.sealed.mpeg4': { source: 'iana' },
          'video/vnd.sealed.swf': { source: 'iana' },
          'video/vnd.sealedmedia.softseal.mov': { source: 'iana' },
          'video/vnd.uvvu.mp4': {
            source: 'iana',
            extensions: ['uvu', 'uvvu'],
          },
          'video/vnd.vivo': { source: 'iana', extensions: ['viv'] },
          'video/vnd.youtube.yt': { source: 'iana' },
          'video/vp8': { source: 'iana' },
          'video/vp9': { source: 'iana' },
          'video/webm': {
            source: 'apache',
            compressible: false,
            extensions: ['webm'],
          },
          'video/x-f4v': { source: 'apache', extensions: ['f4v'] },
          'video/x-fli': { source: 'apache', extensions: ['fli'] },
          'video/x-flv': {
            source: 'apache',
            compressible: false,
            extensions: ['flv'],
          },
          'video/x-m4v': { source: 'apache', extensions: ['m4v'] },
          'video/x-matroska': {
            source: 'apache',
            compressible: false,
            extensions: ['mkv', 'mk3d', 'mks'],
          },
          'video/x-mng': { source: 'apache', extensions: ['mng'] },
          'video/x-ms-asf': {
            source: 'apache',
            extensions: ['asf', 'asx'],
          },
          'video/x-ms-vob': { source: 'apache', extensions: ['vob'] },
          'video/x-ms-wm': { source: 'apache', extensions: ['wm'] },
          'video/x-ms-wmv': {
            source: 'apache',
            compressible: false,
            extensions: ['wmv'],
          },
          'video/x-ms-wmx': { source: 'apache', extensions: ['wmx'] },
          'video/x-ms-wvx': { source: 'apache', extensions: ['wvx'] },
          'video/x-msvideo': {
            source: 'apache',
            extensions: ['avi'],
          },
          'video/x-sgi-movie': {
            source: 'apache',
            extensions: ['movie'],
          },
          'video/x-smv': { source: 'apache', extensions: ['smv'] },
          'x-conference/x-cooltalk': {
            source: 'apache',
            extensions: ['ice'],
          },
          'x-shader/x-fragment': { compressible: true },
          'x-shader/x-vertex': { compressible: true },
        }
      },
    })
    var require_mime_db2 = __commonJS22({
      'node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js'(
        exports2,
        module2,
      ) {
        module2.exports = require_db2()
      },
    })
    var main_exports = {}
    __export2(main_exports, {
      PreviewController: () => PreviewController2,
      getExtension: () => getExtension2,
      joinFilepath: () => joinFilepath,
      normalizeFilepath: () => normalizeFilepath,
    })
    module.exports = __toCommonJS(main_exports)
    var CHANNEL_NAME2 = '$CSB_RELAY'
    var import_mime_db2 = __toESM22(require_mime_db2())
    var extensionMap2 = /* @__PURE__ */ new Map()
    var entries2 = Object.entries(import_mime_db2.default)
    for (const [mimetype2, entry2] of entries2) {
      const extensions2 = entry2.extensions
      if (
        extensions2 === null || extensions2 === void 0
          ? void 0
          : extensions2.length
      ) {
        for (const ext2 of extensions2) {
          extensionMap2.set(ext2, mimetype2)
        }
      }
    }
    var EXTENSIONS_MAP2 = extensionMap2
    var counter2 = 0
    function generateRandomId22() {
      const now = Date.now()
      const randomNumber = Math.round(Math.random() * 1e4)
      const count = (counter2 += 1)
      return (+`${now}${randomNumber}${count}`).toString(16)
    }
    function normalizeFilepath(filepath) {
      const split = filepath.split('/').filter(Boolean)
      const normalized = split.join('/')
      return '/' + normalized
    }
    function joinFilepath(filepath, addition) {
      return normalizeFilepath(filepath + '/' + addition)
    }
    function getExtension2(filepath) {
      const parts = filepath.split('.')
      if (parts.length <= 1) {
        return ''
      } else {
        const ext2 = parts[parts.length - 1]
        return ext2
      }
    }
    var PreviewController2 = class {
      async getIndexAtPath(filepath) {
        for (const index of this.indexFiles) {
          try {
            const content = await this.getFileContent(
              joinFilepath(filepath, index),
            )
            return content
          } catch (err) {}
        }
        throw new Error('No index file not found')
      }
      async handleWorkerRequest(request) {
        if (!this.initPromise) {
          throw new Error('Init promise is null')
        }
        const [previewRoot, port] = await this.initPromise
        try {
          const filepath = normalizeFilepath(
            new URL(request.url, previewRoot).pathname,
          )
          let body = null
          const headers = {}
          try {
            body = await this.getFileContent(filepath)
          } catch (err) {}
          if (body == null) {
            body = await this.getIndexAtPath(filepath)
            headers['Content-Type'] = 'text/html; charset=utf-8'
          }
          if (body == null) {
            throw new Error('File not found')
          }
          if (!headers['Content-Type']) {
            const extension = getExtension2(filepath)
            const foundMimetype = EXTENSIONS_MAP2.get(extension)
            if (foundMimetype) {
              headers['Content-Type'] = foundMimetype
            }
          }
          const responseMessage = {
            $channel: CHANNEL_NAME2,
            $type: 'preview/response',
            id: request.id,
            headers,
            status: 200,
            body,
          }
          port.postMessage(responseMessage)
        } catch (err) {
          const responseMessage = {
            $channel: CHANNEL_NAME2,
            $type: 'preview/response',
            id: request.id,
            headers: {
              ['Content-Type']: 'text/html; charset=utf-8',
            },
            status: 404,
            body: 'File not found',
          }
          port.postMessage(responseMessage)
        }
      }
      getRelayUrl(previewUrl) {
        const relayUrl = new URL(previewUrl)
        relayUrl.pathname = '/__csb_relay/'
        return relayUrl.toString()
      }
      async _initPreview() {
        const id = generateRandomId22()
        const previewUrl = new URL(this.baseUrl)
        previewUrl.hostname = id + '-' + previewUrl.hostname
        previewUrl.pathname = '/'
        const relayUrl = this.getRelayUrl(previewUrl.toString())
        const iframe = document.createElement('iframe')
        iframe.setAttribute('src', relayUrl.toString())
        iframe.style.display = 'none'
        document.body.appendChild(iframe)
        const channel = new MessageChannel()
        const iframeContentWindow = iframe.contentWindow
        if (!iframeContentWindow) {
          throw new Error('Could not get iframe contentWindow')
        }
        return new Promise((resolve) => {
          const port = channel.port1
          port.onmessage = (evt) => {
            if (
              typeof evt.data === 'object' &&
              evt.data.$channel === CHANNEL_NAME2
            ) {
              switch (evt.data.$type) {
                case 'preview/ready':
                  resolve([previewUrl.toString(), port, iframe])
                  break
                case 'preview/request':
                  this.handleWorkerRequest(evt.data)
                  break
              }
            }
          }
          iframe.onload = () => {
            const initMsg = {
              $channel: CHANNEL_NAME2,
              $type: 'preview/init',
            }
            iframeContentWindow.postMessage(initMsg, '*', [channel.port2])
          }
        })
      }
      /**
       * Initialize a preview and return the url at which the preview is being served
       **/
      initPreview() {
        if (!this.initPromise) {
          this.initPromise = this._initPreview()
        }
        return this.initPromise.then((v2) => v2[0])
      }
      destroy() {
        if (this.initPromise) {
          const p2 = this.initPromise
          p2.then((val) => {
            val[1].close()
            const url = this.getRelayUrl(val[0])
            const foundElements = document.body.querySelectorAll(`src="${url}"`)
            foundElements.forEach((el) => el.remove())
          })
          this.initPromise = null
        }
      }
      constructor(options) {
        this.initPromise = null
        this.baseUrl = new URL(options.baseUrl)
        this.getFileContent = options.getFileContent
        var _options_indexFiles
        this.indexFiles =
          (_options_indexFiles = options.indexFiles) !== null &&
          _options_indexFiles !== void 0
            ? _options_indexFiles
            : ['index.html', 'index.html']
      }
    }
  },
})
var index_599aeaf7_exports = {}
__export(index_599aeaf7_exports, { SandpackStatic: () => SandpackStatic })
var import_static_browser_server
var insertHtmlAfterRegex
var readBuffer2
var validateHtml
var SandpackStatic
var init_index_599aeaf7 = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/index-599aeaf7.mjs'() {
    init_utils_52664384()
    import_static_browser_server = __toESM2(require_main(), 1)
    init_consoleHook_59e792cb()
    init_base_80a1f760()
    init_lib()
    init_dist()
    insertHtmlAfterRegex = function (regex, content, insertable) {
      var match = regex.exec(content)
      if (match && match.length >= 1) {
        var offset = match.index + match[0].length
        var prefix = content.substring(0, offset)
        var suffix = content.substring(offset)
        return prefix + insertable + suffix
      }
    }
    readBuffer2 = function (content) {
      if (typeof content === 'string') {
        return content
      } else {
        return new TextDecoder().decode(content)
      }
    }
    validateHtml = function (content) {
      var contentString = readBuffer2(content)
      var domParser = new DOMParser()
      var doc = domParser.parseFromString(contentString, 'text/html')
      if (!doc.documentElement.getAttribute('lang')) {
        doc.documentElement.setAttribute('lang', 'en')
      }
      var html2 = doc.documentElement.outerHTML
      return '<!DOCTYPE html>\n'.concat(html2)
    }
    SandpackStatic =
      /** @class */
      (function (_super) {
        __extends(SandpackStatic2, _super)
        function SandpackStatic2(selector, sandboxSetup, options) {
          if (options === void 0) {
            options = {}
          }
          var _a22
          var _this = _super.call(this, selector, sandboxSetup, options) || this
          _this.files = /* @__PURE__ */ new Map()
          _this.status = 'initializing'
          _this.emitter = new EventEmitter()
          _this.previewController =
            new import_static_browser_server.PreviewController({
              baseUrl:
                (_a22 = options.bundlerURL) !== null && _a22 !== void 0
                  ? _a22
                  : 'https://preview.sandpack-static-server.codesandbox.io',
              // filepath is always normalized to start with / and not end with a slash
              getFileContent: function (filepath) {
                var content = _this.files.get(filepath)
                if (!content) {
                  throw new Error('File not found')
                }
                if (filepath.endsWith('.html') || filepath.endsWith('.htm')) {
                  try {
                    content = validateHtml(content)
                    content = _this.injectProtocolScript(content)
                    content = _this.injectExternalResources(
                      content,
                      options.externalResources,
                    )
                    content = _this.injectScriptIntoHead(content, {
                      script: consoleHook,
                      scope: {
                        channelId: generateRandomId(),
                      },
                    })
                  } catch (err) {
                    console.error('Runtime injection failed', err)
                  }
                }
                return content
              },
            })
          if (typeof selector === 'string') {
            _this.selector = selector
            var element = document.querySelector(selector)
            _this.element = element
            _this.iframe = document.createElement('iframe')
          } else {
            _this.element = selector
            _this.iframe = selector
          }
          if (!_this.iframe.getAttribute('sandbox')) {
            _this.iframe.setAttribute(
              'sandbox',
              'allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock',
            )
            _this.iframe.setAttribute(
              'allow',
              'accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-read; clipboard-write; xr-spatial-tracking;',
            )
          }
          _this.eventListener = _this.eventListener.bind(_this)
          if (typeof window !== 'undefined') {
            window.addEventListener('message', _this.eventListener)
          }
          _this.updateSandbox()
          return _this
        }
        SandpackStatic2.prototype.injectContentIntoHead = function (
          content,
          contentToInsert,
        ) {
          var _a22
          content = readBuffer2(content)
          content =
            (_a22 = insertHtmlAfterRegex(
              /<head[^<>]*>/g,
              content,
              '\n' + contentToInsert,
            )) !== null && _a22 !== void 0
              ? _a22
              : contentToInsert + '\n' + content
          return content
        }
        SandpackStatic2.prototype.injectProtocolScript = function (content) {
          var scriptToInsert =
            '<script>\n  window.addEventListener("message", (message) => {\n    if(message.data.type === "refresh") {\n      window.location.reload();\n    }\n  })\n<\/script>'
          return this.injectContentIntoHead(content, scriptToInsert)
        }
        SandpackStatic2.prototype.injectExternalResources = function (
          content,
          externalResources,
        ) {
          if (externalResources === void 0) {
            externalResources = []
          }
          var tagsToInsert = externalResources
            .map(function (resource) {
              var match = resource.match(/\.([^.]*)$/)
              var fileType =
                match === null || match === void 0 ? void 0 : match[1]
              if (fileType === 'css' || resource.includes('fonts.googleapis')) {
                return '<link rel="stylesheet" href="'.concat(resource, '">')
              }
              if (fileType === 'js') {
                return '<script src="'.concat(resource, '"><\/script>')
              }
              throw new Error(
                'Unable to determine file type for external resource: '.concat(
                  resource,
                ),
              )
            })
            .join('\n')
          return this.injectContentIntoHead(content, tagsToInsert)
        }
        SandpackStatic2.prototype.injectScriptIntoHead = function (
          content,
          opts,
        ) {
          var script = opts.script,
            _a22 = opts.scope,
            scope = _a22 === void 0 ? {} : _a22
          var scriptToInsert = '\n    <script>\n      const scope = '
            .concat(JSON.stringify(scope), ';\n      ')
            .concat(script, '\n    <\/script>\n    ')
            .trim()
          return this.injectContentIntoHead(content, scriptToInsert)
        }
        SandpackStatic2.prototype.updateSandbox = function (
          setup,
          _isInitializationCompile,
        ) {
          if (setup === void 0) {
            setup = this.sandboxSetup
          }
          var modules = fromBundlerFilesToFS(setup.files)
          this.dispatch({
            codesandbox: true,
            modules,
            template: setup.template,
            type: 'compile',
          })
        }
        SandpackStatic2.prototype.compile = function (files) {
          return __awaiter(this, void 0, void 0, function () {
            var previewUrl
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  this.files = new Map(Object.entries(files))
                  return [4, this.previewController.initPreview()]
                case 1:
                  previewUrl = _a22.sent()
                  this.iframe.setAttribute('src', previewUrl)
                  this.status = 'done'
                  this.dispatch({
                    type: 'done',
                    compilatonError: false,
                  })
                  this.dispatch({
                    type: 'urlchange',
                    url: previewUrl,
                    back: false,
                    forward: false,
                  })
                  return [2]
              }
            })
          })
        }
        SandpackStatic2.prototype.eventListener = function (evt) {
          if (evt.source !== this.iframe.contentWindow) {
            return
          }
          var message = evt.data
          if (!message.codesandbox) {
            return
          }
          this.dispatch(message)
        }
        SandpackStatic2.prototype.dispatch = function (message) {
          var _a22
          switch (message.type) {
            case 'compile':
              this.compile(message.modules)
              break
            default:
              ;(_a22 = this.iframe.contentWindow) === null || _a22 === void 0
                ? void 0
                : _a22.postMessage(message, '*')
              this.emitter.dispatch(message)
          }
        }
        SandpackStatic2.prototype.listen = function (listener) {
          return this.emitter.listener(listener)
        }
        SandpackStatic2.prototype.destroy = function () {
          this.emitter.cleanup()
          if (typeof window !== 'undefined') {
            window.removeEventListener('message', this.eventListener)
          }
        }
        return SandpackStatic2
      })(SandpackClient)
  },
})
var require_db = __commonJS2({
  '../../node_modules/mime-db/db.json'(exports, module) {
    module.exports = {
      'application/1d-interleaved-parityfec': { source: 'iana' },
      'application/3gpdash-qoe-report+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/3gpp-ims+xml': { source: 'iana', compressible: true },
      'application/3gpphal+json': { source: 'iana', compressible: true },
      'application/3gpphalforms+json': {
        source: 'iana',
        compressible: true,
      },
      'application/a2l': { source: 'iana' },
      'application/ace+cbor': { source: 'iana' },
      'application/activemessage': { source: 'iana' },
      'application/activity+json': { source: 'iana', compressible: true },
      'application/alto-costmap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-costmapfilter+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-directory+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointcost+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointcostparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointprop+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointpropparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-error+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-networkmap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-networkmapfilter+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-updatestreamcontrol+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-updatestreamparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/aml': { source: 'iana' },
      'application/andrew-inset': { source: 'iana', extensions: ['ez'] },
      'application/applefile': { source: 'iana' },
      'application/applixware': { source: 'apache', extensions: ['aw'] },
      'application/at+jwt': { source: 'iana' },
      'application/atf': { source: 'iana' },
      'application/atfx': { source: 'iana' },
      'application/atom+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atom'],
      },
      'application/atomcat+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomcat'],
      },
      'application/atomdeleted+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomdeleted'],
      },
      'application/atomicmail': { source: 'iana' },
      'application/atomsvc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomsvc'],
      },
      'application/atsc-dwd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dwd'],
      },
      'application/atsc-dynamic-event-message': { source: 'iana' },
      'application/atsc-held+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['held'],
      },
      'application/atsc-rdt+json': { source: 'iana', compressible: true },
      'application/atsc-rsat+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rsat'],
      },
      'application/atxml': { source: 'iana' },
      'application/auth-policy+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/bacnet-xdd+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/batch-smtp': { source: 'iana' },
      'application/bdoc': { compressible: false, extensions: ['bdoc'] },
      'application/beep+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/calendar+json': { source: 'iana', compressible: true },
      'application/calendar+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xcs'],
      },
      'application/call-completion': { source: 'iana' },
      'application/cals-1840': { source: 'iana' },
      'application/captive+json': { source: 'iana', compressible: true },
      'application/cbor': { source: 'iana' },
      'application/cbor-seq': { source: 'iana' },
      'application/cccex': { source: 'iana' },
      'application/ccmp+xml': { source: 'iana', compressible: true },
      'application/ccxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ccxml'],
      },
      'application/cdfx+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cdfx'],
      },
      'application/cdmi-capability': {
        source: 'iana',
        extensions: ['cdmia'],
      },
      'application/cdmi-container': {
        source: 'iana',
        extensions: ['cdmic'],
      },
      'application/cdmi-domain': {
        source: 'iana',
        extensions: ['cdmid'],
      },
      'application/cdmi-object': {
        source: 'iana',
        extensions: ['cdmio'],
      },
      'application/cdmi-queue': { source: 'iana', extensions: ['cdmiq'] },
      'application/cdni': { source: 'iana' },
      'application/cea': { source: 'iana' },
      'application/cea-2018+xml': { source: 'iana', compressible: true },
      'application/cellml+xml': { source: 'iana', compressible: true },
      'application/cfw': { source: 'iana' },
      'application/city+json': { source: 'iana', compressible: true },
      'application/clr': { source: 'iana' },
      'application/clue+xml': { source: 'iana', compressible: true },
      'application/clue_info+xml': { source: 'iana', compressible: true },
      'application/cms': { source: 'iana' },
      'application/cnrp+xml': { source: 'iana', compressible: true },
      'application/coap-group+json': {
        source: 'iana',
        compressible: true,
      },
      'application/coap-payload': { source: 'iana' },
      'application/commonground': { source: 'iana' },
      'application/conference-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cose': { source: 'iana' },
      'application/cose-key': { source: 'iana' },
      'application/cose-key-set': { source: 'iana' },
      'application/cpl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cpl'],
      },
      'application/csrattrs': { source: 'iana' },
      'application/csta+xml': { source: 'iana', compressible: true },
      'application/cstadata+xml': { source: 'iana', compressible: true },
      'application/csvm+json': { source: 'iana', compressible: true },
      'application/cu-seeme': { source: 'apache', extensions: ['cu'] },
      'application/cwt': { source: 'iana' },
      'application/cybercash': { source: 'iana' },
      'application/dart': { compressible: true },
      'application/dash+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpd'],
      },
      'application/dash-patch+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpp'],
      },
      'application/dashdelta': { source: 'iana' },
      'application/davmount+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['davmount'],
      },
      'application/dca-rft': { source: 'iana' },
      'application/dcd': { source: 'iana' },
      'application/dec-dx': { source: 'iana' },
      'application/dialog-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/dicom': { source: 'iana' },
      'application/dicom+json': { source: 'iana', compressible: true },
      'application/dicom+xml': { source: 'iana', compressible: true },
      'application/dii': { source: 'iana' },
      'application/dit': { source: 'iana' },
      'application/dns': { source: 'iana' },
      'application/dns+json': { source: 'iana', compressible: true },
      'application/dns-message': { source: 'iana' },
      'application/docbook+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['dbk'],
      },
      'application/dots+cbor': { source: 'iana' },
      'application/dskpp+xml': { source: 'iana', compressible: true },
      'application/dssc+der': { source: 'iana', extensions: ['dssc'] },
      'application/dssc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdssc'],
      },
      'application/dvcs': { source: 'iana' },
      'application/ecmascript': {
        source: 'iana',
        compressible: true,
        extensions: ['es', 'ecma'],
      },
      'application/edi-consent': { source: 'iana' },
      'application/edi-x12': { source: 'iana', compressible: false },
      'application/edifact': { source: 'iana', compressible: false },
      'application/efi': { source: 'iana' },
      'application/elm+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/elm+xml': { source: 'iana', compressible: true },
      'application/emergencycalldata.cap+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/emergencycalldata.comment+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.deviceinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.ecall.msd': { source: 'iana' },
      'application/emergencycalldata.providerinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.serviceinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.subscriberinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.veds+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emma+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['emma'],
      },
      'application/emotionml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['emotionml'],
      },
      'application/encaprtp': { source: 'iana' },
      'application/epp+xml': { source: 'iana', compressible: true },
      'application/epub+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['epub'],
      },
      'application/eshop': { source: 'iana' },
      'application/exi': { source: 'iana', extensions: ['exi'] },
      'application/expect-ct-report+json': {
        source: 'iana',
        compressible: true,
      },
      'application/express': { source: 'iana', extensions: ['exp'] },
      'application/fastinfoset': { source: 'iana' },
      'application/fastsoap': { source: 'iana' },
      'application/fdt+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['fdt'],
      },
      'application/fhir+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/fhir+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/fido.trusted-apps+json': { compressible: true },
      'application/fits': { source: 'iana' },
      'application/flexfec': { source: 'iana' },
      'application/font-sfnt': { source: 'iana' },
      'application/font-tdpfr': { source: 'iana', extensions: ['pfr'] },
      'application/font-woff': { source: 'iana', compressible: false },
      'application/framework-attributes+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/geo+json': {
        source: 'iana',
        compressible: true,
        extensions: ['geojson'],
      },
      'application/geo+json-seq': { source: 'iana' },
      'application/geopackage+sqlite3': { source: 'iana' },
      'application/geoxacml+xml': { source: 'iana', compressible: true },
      'application/gltf-buffer': { source: 'iana' },
      'application/gml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['gml'],
      },
      'application/gpx+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['gpx'],
      },
      'application/gxf': { source: 'apache', extensions: ['gxf'] },
      'application/gzip': {
        source: 'iana',
        compressible: false,
        extensions: ['gz'],
      },
      'application/h224': { source: 'iana' },
      'application/held+xml': { source: 'iana', compressible: true },
      'application/hjson': { extensions: ['hjson'] },
      'application/http': { source: 'iana' },
      'application/hyperstudio': { source: 'iana', extensions: ['stk'] },
      'application/ibe-key-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ibe-pkg-reply+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ibe-pp-data': { source: 'iana' },
      'application/iges': { source: 'iana' },
      'application/im-iscomposing+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/index': { source: 'iana' },
      'application/index.cmd': { source: 'iana' },
      'application/index.obj': { source: 'iana' },
      'application/index.response': { source: 'iana' },
      'application/index.vnd': { source: 'iana' },
      'application/inkml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ink', 'inkml'],
      },
      'application/iotp': { source: 'iana' },
      'application/ipfix': { source: 'iana', extensions: ['ipfix'] },
      'application/ipp': { source: 'iana' },
      'application/isup': { source: 'iana' },
      'application/its+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['its'],
      },
      'application/java-archive': {
        source: 'apache',
        compressible: false,
        extensions: ['jar', 'war', 'ear'],
      },
      'application/java-serialized-object': {
        source: 'apache',
        compressible: false,
        extensions: ['ser'],
      },
      'application/java-vm': {
        source: 'apache',
        compressible: false,
        extensions: ['class'],
      },
      'application/javascript': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['js', 'mjs'],
      },
      'application/jf2feed+json': { source: 'iana', compressible: true },
      'application/jose': { source: 'iana' },
      'application/jose+json': { source: 'iana', compressible: true },
      'application/jrd+json': { source: 'iana', compressible: true },
      'application/jscalendar+json': {
        source: 'iana',
        compressible: true,
      },
      'application/json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['json', 'map'],
      },
      'application/json-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/json-seq': { source: 'iana' },
      'application/json5': { extensions: ['json5'] },
      'application/jsonml+json': {
        source: 'apache',
        compressible: true,
        extensions: ['jsonml'],
      },
      'application/jwk+json': { source: 'iana', compressible: true },
      'application/jwk-set+json': { source: 'iana', compressible: true },
      'application/jwt': { source: 'iana' },
      'application/kpml-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/kpml-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ld+json': {
        source: 'iana',
        compressible: true,
        extensions: ['jsonld'],
      },
      'application/lgr+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lgr'],
      },
      'application/link-format': { source: 'iana' },
      'application/load-control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/lost+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lostxml'],
      },
      'application/lostsync+xml': { source: 'iana', compressible: true },
      'application/lpf+zip': { source: 'iana', compressible: false },
      'application/lxf': { source: 'iana' },
      'application/mac-binhex40': { source: 'iana', extensions: ['hqx'] },
      'application/mac-compactpro': {
        source: 'apache',
        extensions: ['cpt'],
      },
      'application/macwriteii': { source: 'iana' },
      'application/mads+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mads'],
      },
      'application/manifest+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['webmanifest'],
      },
      'application/marc': { source: 'iana', extensions: ['mrc'] },
      'application/marcxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mrcx'],
      },
      'application/mathematica': {
        source: 'iana',
        extensions: ['ma', 'nb', 'mb'],
      },
      'application/mathml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mathml'],
      },
      'application/mathml-content+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mathml-presentation+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-associated-procedure-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-deregister+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-envelope+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-msk+xml': { source: 'iana', compressible: true },
      'application/mbms-msk-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-protection-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-reception-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-register+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-register-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-schedule+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-user-service-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbox': { source: 'iana', extensions: ['mbox'] },
      'application/media-policy-dataset+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpf'],
      },
      'application/media_control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mediaservercontrol+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mscml'],
      },
      'application/merge-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/metalink+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['metalink'],
      },
      'application/metalink4+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['meta4'],
      },
      'application/mets+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mets'],
      },
      'application/mf4': { source: 'iana' },
      'application/mikey': { source: 'iana' },
      'application/mipc': { source: 'iana' },
      'application/missing-blocks+cbor-seq': { source: 'iana' },
      'application/mmt-aei+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['maei'],
      },
      'application/mmt-usd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['musd'],
      },
      'application/mods+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mods'],
      },
      'application/moss-keys': { source: 'iana' },
      'application/moss-signature': { source: 'iana' },
      'application/mosskey-data': { source: 'iana' },
      'application/mosskey-request': { source: 'iana' },
      'application/mp21': { source: 'iana', extensions: ['m21', 'mp21'] },
      'application/mp4': { source: 'iana', extensions: ['mp4s', 'm4p'] },
      'application/mpeg4-generic': { source: 'iana' },
      'application/mpeg4-iod': { source: 'iana' },
      'application/mpeg4-iod-xmt': { source: 'iana' },
      'application/mrb-consumer+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mrb-publish+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/msc-ivr+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/msc-mixer+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/msword': {
        source: 'iana',
        compressible: false,
        extensions: ['doc', 'dot'],
      },
      'application/mud+json': { source: 'iana', compressible: true },
      'application/multipart-core': { source: 'iana' },
      'application/mxf': { source: 'iana', extensions: ['mxf'] },
      'application/n-quads': { source: 'iana', extensions: ['nq'] },
      'application/n-triples': { source: 'iana', extensions: ['nt'] },
      'application/nasdata': { source: 'iana' },
      'application/news-checkgroups': {
        source: 'iana',
        charset: 'US-ASCII',
      },
      'application/news-groupinfo': {
        source: 'iana',
        charset: 'US-ASCII',
      },
      'application/news-transmission': { source: 'iana' },
      'application/nlsml+xml': { source: 'iana', compressible: true },
      'application/node': { source: 'iana', extensions: ['cjs'] },
      'application/nss': { source: 'iana' },
      'application/oauth-authz-req+jwt': { source: 'iana' },
      'application/oblivious-dns-message': { source: 'iana' },
      'application/ocsp-request': { source: 'iana' },
      'application/ocsp-response': { source: 'iana' },
      'application/octet-stream': {
        source: 'iana',
        compressible: false,
        extensions: [
          'bin',
          'dms',
          'lrf',
          'mar',
          'so',
          'dist',
          'distz',
          'pkg',
          'bpk',
          'dump',
          'elc',
          'deploy',
          'exe',
          'dll',
          'deb',
          'dmg',
          'iso',
          'img',
          'msi',
          'msp',
          'msm',
          'buffer',
        ],
      },
      'application/oda': { source: 'iana', extensions: ['oda'] },
      'application/odm+xml': { source: 'iana', compressible: true },
      'application/odx': { source: 'iana' },
      'application/oebps-package+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['opf'],
      },
      'application/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['ogx'],
      },
      'application/omdoc+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['omdoc'],
      },
      'application/onenote': {
        source: 'apache',
        extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg'],
      },
      'application/opc-nodeset+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/oscore': { source: 'iana' },
      'application/oxps': { source: 'iana', extensions: ['oxps'] },
      'application/p21': { source: 'iana' },
      'application/p21+zip': { source: 'iana', compressible: false },
      'application/p2p-overlay+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['relo'],
      },
      'application/parityfec': { source: 'iana' },
      'application/passport': { source: 'iana' },
      'application/patch-ops-error+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xer'],
      },
      'application/pdf': {
        source: 'iana',
        compressible: false,
        extensions: ['pdf'],
      },
      'application/pdx': { source: 'iana' },
      'application/pem-certificate-chain': { source: 'iana' },
      'application/pgp-encrypted': {
        source: 'iana',
        compressible: false,
        extensions: ['pgp'],
      },
      'application/pgp-keys': { source: 'iana', extensions: ['asc'] },
      'application/pgp-signature': {
        source: 'iana',
        extensions: ['asc', 'sig'],
      },
      'application/pics-rules': { source: 'apache', extensions: ['prf'] },
      'application/pidf+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/pidf-diff+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/pkcs10': { source: 'iana', extensions: ['p10'] },
      'application/pkcs12': { source: 'iana' },
      'application/pkcs7-mime': {
        source: 'iana',
        extensions: ['p7m', 'p7c'],
      },
      'application/pkcs7-signature': {
        source: 'iana',
        extensions: ['p7s'],
      },
      'application/pkcs8': { source: 'iana', extensions: ['p8'] },
      'application/pkcs8-encrypted': { source: 'iana' },
      'application/pkix-attr-cert': {
        source: 'iana',
        extensions: ['ac'],
      },
      'application/pkix-cert': { source: 'iana', extensions: ['cer'] },
      'application/pkix-crl': { source: 'iana', extensions: ['crl'] },
      'application/pkix-pkipath': {
        source: 'iana',
        extensions: ['pkipath'],
      },
      'application/pkixcmp': { source: 'iana', extensions: ['pki'] },
      'application/pls+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['pls'],
      },
      'application/poc-settings+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/postscript': {
        source: 'iana',
        compressible: true,
        extensions: ['ai', 'eps', 'ps'],
      },
      'application/ppsp-tracker+json': {
        source: 'iana',
        compressible: true,
      },
      'application/problem+json': { source: 'iana', compressible: true },
      'application/problem+xml': { source: 'iana', compressible: true },
      'application/provenance+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['provx'],
      },
      'application/prs.alvestrand.titrax-sheet': { source: 'iana' },
      'application/prs.cww': { source: 'iana', extensions: ['cww'] },
      'application/prs.cyn': { source: 'iana', charset: '7-BIT' },
      'application/prs.hpub+zip': { source: 'iana', compressible: false },
      'application/prs.nprend': { source: 'iana' },
      'application/prs.plucker': { source: 'iana' },
      'application/prs.rdf-xml-crypt': { source: 'iana' },
      'application/prs.xsf+xml': { source: 'iana', compressible: true },
      'application/pskc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['pskcxml'],
      },
      'application/pvd+json': { source: 'iana', compressible: true },
      'application/qsig': { source: 'iana' },
      'application/raml+yaml': {
        compressible: true,
        extensions: ['raml'],
      },
      'application/raptorfec': { source: 'iana' },
      'application/rdap+json': { source: 'iana', compressible: true },
      'application/rdf+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rdf', 'owl'],
      },
      'application/reginfo+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rif'],
      },
      'application/relax-ng-compact-syntax': {
        source: 'iana',
        extensions: ['rnc'],
      },
      'application/remote-printing': { source: 'iana' },
      'application/reputon+json': { source: 'iana', compressible: true },
      'application/resource-lists+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rl'],
      },
      'application/resource-lists-diff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rld'],
      },
      'application/rfc+xml': { source: 'iana', compressible: true },
      'application/riscos': { source: 'iana' },
      'application/rlmi+xml': { source: 'iana', compressible: true },
      'application/rls-services+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rs'],
      },
      'application/route-apd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rapd'],
      },
      'application/route-s-tsid+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sls'],
      },
      'application/route-usd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rusd'],
      },
      'application/rpki-ghostbusters': {
        source: 'iana',
        extensions: ['gbr'],
      },
      'application/rpki-manifest': {
        source: 'iana',
        extensions: ['mft'],
      },
      'application/rpki-publication': { source: 'iana' },
      'application/rpki-roa': { source: 'iana', extensions: ['roa'] },
      'application/rpki-updown': { source: 'iana' },
      'application/rsd+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['rsd'],
      },
      'application/rss+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['rss'],
      },
      'application/rtf': {
        source: 'iana',
        compressible: true,
        extensions: ['rtf'],
      },
      'application/rtploopback': { source: 'iana' },
      'application/rtx': { source: 'iana' },
      'application/samlassertion+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/samlmetadata+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sarif+json': { source: 'iana', compressible: true },
      'application/sarif-external-properties+json': {
        source: 'iana',
        compressible: true,
      },
      'application/sbe': { source: 'iana' },
      'application/sbml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sbml'],
      },
      'application/scaip+xml': { source: 'iana', compressible: true },
      'application/scim+json': { source: 'iana', compressible: true },
      'application/scvp-cv-request': {
        source: 'iana',
        extensions: ['scq'],
      },
      'application/scvp-cv-response': {
        source: 'iana',
        extensions: ['scs'],
      },
      'application/scvp-vp-request': {
        source: 'iana',
        extensions: ['spq'],
      },
      'application/scvp-vp-response': {
        source: 'iana',
        extensions: ['spp'],
      },
      'application/sdp': { source: 'iana', extensions: ['sdp'] },
      'application/secevent+jwt': { source: 'iana' },
      'application/senml+cbor': { source: 'iana' },
      'application/senml+json': { source: 'iana', compressible: true },
      'application/senml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['senmlx'],
      },
      'application/senml-etch+cbor': { source: 'iana' },
      'application/senml-etch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/senml-exi': { source: 'iana' },
      'application/sensml+cbor': { source: 'iana' },
      'application/sensml+json': { source: 'iana', compressible: true },
      'application/sensml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sensmlx'],
      },
      'application/sensml-exi': { source: 'iana' },
      'application/sep+xml': { source: 'iana', compressible: true },
      'application/sep-exi': { source: 'iana' },
      'application/session-info': { source: 'iana' },
      'application/set-payment': { source: 'iana' },
      'application/set-payment-initiation': {
        source: 'iana',
        extensions: ['setpay'],
      },
      'application/set-registration': { source: 'iana' },
      'application/set-registration-initiation': {
        source: 'iana',
        extensions: ['setreg'],
      },
      'application/sgml': { source: 'iana' },
      'application/sgml-open-catalog': { source: 'iana' },
      'application/shf+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['shf'],
      },
      'application/sieve': {
        source: 'iana',
        extensions: ['siv', 'sieve'],
      },
      'application/simple-filter+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/simple-message-summary': { source: 'iana' },
      'application/simplesymbolcontainer': { source: 'iana' },
      'application/sipc': { source: 'iana' },
      'application/slate': { source: 'iana' },
      'application/smil': { source: 'iana' },
      'application/smil+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['smi', 'smil'],
      },
      'application/smpte336m': { source: 'iana' },
      'application/soap+fastinfoset': { source: 'iana' },
      'application/soap+xml': { source: 'iana', compressible: true },
      'application/sparql-query': { source: 'iana', extensions: ['rq'] },
      'application/sparql-results+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['srx'],
      },
      'application/spdx+json': { source: 'iana', compressible: true },
      'application/spirits-event+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sql': { source: 'iana' },
      'application/srgs': { source: 'iana', extensions: ['gram'] },
      'application/srgs+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['grxml'],
      },
      'application/sru+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sru'],
      },
      'application/ssdl+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['ssdl'],
      },
      'application/ssml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ssml'],
      },
      'application/stix+json': { source: 'iana', compressible: true },
      'application/swid+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['swidtag'],
      },
      'application/tamp-apex-update': { source: 'iana' },
      'application/tamp-apex-update-confirm': { source: 'iana' },
      'application/tamp-community-update': { source: 'iana' },
      'application/tamp-community-update-confirm': { source: 'iana' },
      'application/tamp-error': { source: 'iana' },
      'application/tamp-sequence-adjust': { source: 'iana' },
      'application/tamp-sequence-adjust-confirm': { source: 'iana' },
      'application/tamp-status-query': { source: 'iana' },
      'application/tamp-status-response': { source: 'iana' },
      'application/tamp-update': { source: 'iana' },
      'application/tamp-update-confirm': { source: 'iana' },
      'application/tar': { compressible: true },
      'application/taxii+json': { source: 'iana', compressible: true },
      'application/td+json': { source: 'iana', compressible: true },
      'application/tei+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['tei', 'teicorpus'],
      },
      'application/tetra_isi': { source: 'iana' },
      'application/thraud+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['tfi'],
      },
      'application/timestamp-query': { source: 'iana' },
      'application/timestamp-reply': { source: 'iana' },
      'application/timestamped-data': {
        source: 'iana',
        extensions: ['tsd'],
      },
      'application/tlsrpt+gzip': { source: 'iana' },
      'application/tlsrpt+json': { source: 'iana', compressible: true },
      'application/tnauthlist': { source: 'iana' },
      'application/token-introspection+jwt': { source: 'iana' },
      'application/toml': { compressible: true, extensions: ['toml'] },
      'application/trickle-ice-sdpfrag': { source: 'iana' },
      'application/trig': { source: 'iana', extensions: ['trig'] },
      'application/ttml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ttml'],
      },
      'application/tve-trigger': { source: 'iana' },
      'application/tzif': { source: 'iana' },
      'application/tzif-leap': { source: 'iana' },
      'application/ubjson': { compressible: false, extensions: ['ubj'] },
      'application/ulpfec': { source: 'iana' },
      'application/urc-grpsheet+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/urc-ressheet+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rsheet'],
      },
      'application/urc-targetdesc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['td'],
      },
      'application/urc-uisocketdesc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vcard+json': { source: 'iana', compressible: true },
      'application/vcard+xml': { source: 'iana', compressible: true },
      'application/vemmi': { source: 'iana' },
      'application/vividence.scriptfile': { source: 'apache' },
      'application/vnd.1000minds.decision-model+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['1km'],
      },
      'application/vnd.3gpp-prose+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp-prose-pc3ch+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp-v2x-local-service-information': {
        source: 'iana',
      },
      'application/vnd.3gpp.5gnas': { source: 'iana' },
      'application/vnd.3gpp.access-transfer-events+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.bsf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.gmop+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.gtpc': { source: 'iana' },
      'application/vnd.3gpp.interworking-data': { source: 'iana' },
      'application/vnd.3gpp.lpp': { source: 'iana' },
      'application/vnd.3gpp.mc-signalling-ear': { source: 'iana' },
      'application/vnd.3gpp.mcdata-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-payload': { source: 'iana' },
      'application/vnd.3gpp.mcdata-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-signalling': { source: 'iana' },
      'application/vnd.3gpp.mcdata-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-floor-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-location-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-mbms-usage-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-signed+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-ue-init-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-affiliation-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-location-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-mbms-usage-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-transmission-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mid-call+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.ngap': { source: 'iana' },
      'application/vnd.3gpp.pfcp': { source: 'iana' },
      'application/vnd.3gpp.pic-bw-large': {
        source: 'iana',
        extensions: ['plb'],
      },
      'application/vnd.3gpp.pic-bw-small': {
        source: 'iana',
        extensions: ['psb'],
      },
      'application/vnd.3gpp.pic-bw-var': {
        source: 'iana',
        extensions: ['pvb'],
      },
      'application/vnd.3gpp.s1ap': { source: 'iana' },
      'application/vnd.3gpp.sms': { source: 'iana' },
      'application/vnd.3gpp.sms+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.srvcc-ext+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.srvcc-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.state-and-event-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.ussd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp2.bcmcsinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp2.sms': { source: 'iana' },
      'application/vnd.3gpp2.tcap': {
        source: 'iana',
        extensions: ['tcap'],
      },
      'application/vnd.3lightssoftware.imagescal': { source: 'iana' },
      'application/vnd.3m.post-it-notes': {
        source: 'iana',
        extensions: ['pwn'],
      },
      'application/vnd.accpac.simply.aso': {
        source: 'iana',
        extensions: ['aso'],
      },
      'application/vnd.accpac.simply.imp': {
        source: 'iana',
        extensions: ['imp'],
      },
      'application/vnd.acucobol': { source: 'iana', extensions: ['acu'] },
      'application/vnd.acucorp': {
        source: 'iana',
        extensions: ['atc', 'acutc'],
      },
      'application/vnd.adobe.air-application-installer-package+zip': {
        source: 'apache',
        compressible: false,
        extensions: ['air'],
      },
      'application/vnd.adobe.flash.movie': { source: 'iana' },
      'application/vnd.adobe.formscentral.fcdt': {
        source: 'iana',
        extensions: ['fcdt'],
      },
      'application/vnd.adobe.fxp': {
        source: 'iana',
        extensions: ['fxp', 'fxpl'],
      },
      'application/vnd.adobe.partial-upload': { source: 'iana' },
      'application/vnd.adobe.xdp+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdp'],
      },
      'application/vnd.adobe.xfdf': {
        source: 'iana',
        extensions: ['xfdf'],
      },
      'application/vnd.aether.imp': { source: 'iana' },
      'application/vnd.afpc.afplinedata': { source: 'iana' },
      'application/vnd.afpc.afplinedata-pagedef': { source: 'iana' },
      'application/vnd.afpc.cmoca-cmresource': { source: 'iana' },
      'application/vnd.afpc.foca-charset': { source: 'iana' },
      'application/vnd.afpc.foca-codedfont': { source: 'iana' },
      'application/vnd.afpc.foca-codepage': { source: 'iana' },
      'application/vnd.afpc.modca': { source: 'iana' },
      'application/vnd.afpc.modca-cmtable': { source: 'iana' },
      'application/vnd.afpc.modca-formdef': { source: 'iana' },
      'application/vnd.afpc.modca-mediummap': { source: 'iana' },
      'application/vnd.afpc.modca-objectcontainer': { source: 'iana' },
      'application/vnd.afpc.modca-overlay': { source: 'iana' },
      'application/vnd.afpc.modca-pagesegment': { source: 'iana' },
      'application/vnd.age': { source: 'iana', extensions: ['age'] },
      'application/vnd.ah-barcode': { source: 'iana' },
      'application/vnd.ahead.space': {
        source: 'iana',
        extensions: ['ahead'],
      },
      'application/vnd.airzip.filesecure.azf': {
        source: 'iana',
        extensions: ['azf'],
      },
      'application/vnd.airzip.filesecure.azs': {
        source: 'iana',
        extensions: ['azs'],
      },
      'application/vnd.amadeus+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.amazon.ebook': {
        source: 'apache',
        extensions: ['azw'],
      },
      'application/vnd.amazon.mobi8-ebook': { source: 'iana' },
      'application/vnd.americandynamics.acc': {
        source: 'iana',
        extensions: ['acc'],
      },
      'application/vnd.amiga.ami': {
        source: 'iana',
        extensions: ['ami'],
      },
      'application/vnd.amundsen.maze+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.android.ota': { source: 'iana' },
      'application/vnd.android.package-archive': {
        source: 'apache',
        compressible: false,
        extensions: ['apk'],
      },
      'application/vnd.anki': { source: 'iana' },
      'application/vnd.anser-web-certificate-issue-initiation': {
        source: 'iana',
        extensions: ['cii'],
      },
      'application/vnd.anser-web-funds-transfer-initiation': {
        source: 'apache',
        extensions: ['fti'],
      },
      'application/vnd.antix.game-component': {
        source: 'iana',
        extensions: ['atx'],
      },
      'application/vnd.apache.arrow.file': { source: 'iana' },
      'application/vnd.apache.arrow.stream': { source: 'iana' },
      'application/vnd.apache.thrift.binary': { source: 'iana' },
      'application/vnd.apache.thrift.compact': { source: 'iana' },
      'application/vnd.apache.thrift.json': { source: 'iana' },
      'application/vnd.api+json': { source: 'iana', compressible: true },
      'application/vnd.aplextor.warrp+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.apothekende.reservation+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.apple.installer+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpkg'],
      },
      'application/vnd.apple.keynote': {
        source: 'iana',
        extensions: ['key'],
      },
      'application/vnd.apple.mpegurl': {
        source: 'iana',
        extensions: ['m3u8'],
      },
      'application/vnd.apple.numbers': {
        source: 'iana',
        extensions: ['numbers'],
      },
      'application/vnd.apple.pages': {
        source: 'iana',
        extensions: ['pages'],
      },
      'application/vnd.apple.pkpass': {
        compressible: false,
        extensions: ['pkpass'],
      },
      'application/vnd.arastra.swi': { source: 'iana' },
      'application/vnd.aristanetworks.swi': {
        source: 'iana',
        extensions: ['swi'],
      },
      'application/vnd.artisan+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.artsquare': { source: 'iana' },
      'application/vnd.astraea-software.iota': {
        source: 'iana',
        extensions: ['iota'],
      },
      'application/vnd.audiograph': {
        source: 'iana',
        extensions: ['aep'],
      },
      'application/vnd.autopackage': { source: 'iana' },
      'application/vnd.avalon+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.avistar+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.balsamiq.bmml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['bmml'],
      },
      'application/vnd.balsamiq.bmpr': { source: 'iana' },
      'application/vnd.banana-accounting': { source: 'iana' },
      'application/vnd.bbf.usp.error': { source: 'iana' },
      'application/vnd.bbf.usp.msg': { source: 'iana' },
      'application/vnd.bbf.usp.msg+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.bekitzur-stech+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.bint.med-content': { source: 'iana' },
      'application/vnd.biopax.rdf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.blink-idb-value-wrapper': { source: 'iana' },
      'application/vnd.blueice.multipass': {
        source: 'iana',
        extensions: ['mpm'],
      },
      'application/vnd.bluetooth.ep.oob': { source: 'iana' },
      'application/vnd.bluetooth.le.oob': { source: 'iana' },
      'application/vnd.bmi': { source: 'iana', extensions: ['bmi'] },
      'application/vnd.bpf': { source: 'iana' },
      'application/vnd.bpf3': { source: 'iana' },
      'application/vnd.businessobjects': {
        source: 'iana',
        extensions: ['rep'],
      },
      'application/vnd.byu.uapi+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cab-jscript': { source: 'iana' },
      'application/vnd.canon-cpdl': { source: 'iana' },
      'application/vnd.canon-lips': { source: 'iana' },
      'application/vnd.capasystems-pg+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cendio.thinlinc.clientconf': { source: 'iana' },
      'application/vnd.century-systems.tcp_stream': { source: 'iana' },
      'application/vnd.chemdraw+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cdxml'],
      },
      'application/vnd.chess-pgn': { source: 'iana' },
      'application/vnd.chipnuts.karaoke-mmd': {
        source: 'iana',
        extensions: ['mmd'],
      },
      'application/vnd.ciedi': { source: 'iana' },
      'application/vnd.cinderella': {
        source: 'iana',
        extensions: ['cdy'],
      },
      'application/vnd.cirpack.isdn-ext': { source: 'iana' },
      'application/vnd.citationstyles.style+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['csl'],
      },
      'application/vnd.claymore': { source: 'iana', extensions: ['cla'] },
      'application/vnd.cloanto.rp9': {
        source: 'iana',
        extensions: ['rp9'],
      },
      'application/vnd.clonk.c4group': {
        source: 'iana',
        extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u'],
      },
      'application/vnd.cluetrust.cartomobile-config': {
        source: 'iana',
        extensions: ['c11amc'],
      },
      'application/vnd.cluetrust.cartomobile-config-pkg': {
        source: 'iana',
        extensions: ['c11amz'],
      },
      'application/vnd.coffeescript': { source: 'iana' },
      'application/vnd.collabio.xodocuments.document': { source: 'iana' },
      'application/vnd.collabio.xodocuments.document-template': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.presentation': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.presentation-template': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.spreadsheet': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.spreadsheet-template': {
        source: 'iana',
      },
      'application/vnd.collection+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.collection.doc+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.collection.next+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.comicbook+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.comicbook-rar': { source: 'iana' },
      'application/vnd.commerce-battelle': { source: 'iana' },
      'application/vnd.commonspace': {
        source: 'iana',
        extensions: ['csp'],
      },
      'application/vnd.contact.cmsg': {
        source: 'iana',
        extensions: ['cdbcmsg'],
      },
      'application/vnd.coreos.ignition+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cosmocaller': {
        source: 'iana',
        extensions: ['cmc'],
      },
      'application/vnd.crick.clicker': {
        source: 'iana',
        extensions: ['clkx'],
      },
      'application/vnd.crick.clicker.keyboard': {
        source: 'iana',
        extensions: ['clkk'],
      },
      'application/vnd.crick.clicker.palette': {
        source: 'iana',
        extensions: ['clkp'],
      },
      'application/vnd.crick.clicker.template': {
        source: 'iana',
        extensions: ['clkt'],
      },
      'application/vnd.crick.clicker.wordbank': {
        source: 'iana',
        extensions: ['clkw'],
      },
      'application/vnd.criticaltools.wbs+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wbs'],
      },
      'application/vnd.cryptii.pipe+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.crypto-shade-file': { source: 'iana' },
      'application/vnd.cryptomator.encrypted': { source: 'iana' },
      'application/vnd.cryptomator.vault': { source: 'iana' },
      'application/vnd.ctc-posml': {
        source: 'iana',
        extensions: ['pml'],
      },
      'application/vnd.ctct.ws+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cups-pdf': { source: 'iana' },
      'application/vnd.cups-postscript': { source: 'iana' },
      'application/vnd.cups-ppd': { source: 'iana', extensions: ['ppd'] },
      'application/vnd.cups-raster': { source: 'iana' },
      'application/vnd.cups-raw': { source: 'iana' },
      'application/vnd.curl': { source: 'iana' },
      'application/vnd.curl.car': {
        source: 'apache',
        extensions: ['car'],
      },
      'application/vnd.curl.pcurl': {
        source: 'apache',
        extensions: ['pcurl'],
      },
      'application/vnd.cyan.dean.root+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cybank': { source: 'iana' },
      'application/vnd.cyclonedx+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cyclonedx+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.d2l.coursepackage1p0+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.d3m-dataset': { source: 'iana' },
      'application/vnd.d3m-problem': { source: 'iana' },
      'application/vnd.dart': {
        source: 'iana',
        compressible: true,
        extensions: ['dart'],
      },
      'application/vnd.data-vision.rdz': {
        source: 'iana',
        extensions: ['rdz'],
      },
      'application/vnd.datapackage+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dataresource+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dbf': { source: 'iana', extensions: ['dbf'] },
      'application/vnd.debian.binary-package': { source: 'iana' },
      'application/vnd.dece.data': {
        source: 'iana',
        extensions: ['uvf', 'uvvf', 'uvd', 'uvvd'],
      },
      'application/vnd.dece.ttml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['uvt', 'uvvt'],
      },
      'application/vnd.dece.unspecified': {
        source: 'iana',
        extensions: ['uvx', 'uvvx'],
      },
      'application/vnd.dece.zip': {
        source: 'iana',
        extensions: ['uvz', 'uvvz'],
      },
      'application/vnd.denovo.fcselayout-link': {
        source: 'iana',
        extensions: ['fe_launch'],
      },
      'application/vnd.desmume.movie': { source: 'iana' },
      'application/vnd.dir-bi.plate-dl-nosuffix': { source: 'iana' },
      'application/vnd.dm.delegation+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dna': { source: 'iana', extensions: ['dna'] },
      'application/vnd.document+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dolby.mlp': {
        source: 'apache',
        extensions: ['mlp'],
      },
      'application/vnd.dolby.mobile.1': { source: 'iana' },
      'application/vnd.dolby.mobile.2': { source: 'iana' },
      'application/vnd.doremir.scorecloud-binary-document': {
        source: 'iana',
      },
      'application/vnd.dpgraph': { source: 'iana', extensions: ['dpg'] },
      'application/vnd.dreamfactory': {
        source: 'iana',
        extensions: ['dfac'],
      },
      'application/vnd.drive+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ds-keypoint': {
        source: 'apache',
        extensions: ['kpxx'],
      },
      'application/vnd.dtg.local': { source: 'iana' },
      'application/vnd.dtg.local.flash': { source: 'iana' },
      'application/vnd.dtg.local.html': { source: 'iana' },
      'application/vnd.dvb.ait': { source: 'iana', extensions: ['ait'] },
      'application/vnd.dvb.dvbisl+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.dvbj': { source: 'iana' },
      'application/vnd.dvb.esgcontainer': { source: 'iana' },
      'application/vnd.dvb.ipdcdftnotifaccess': { source: 'iana' },
      'application/vnd.dvb.ipdcesgaccess': { source: 'iana' },
      'application/vnd.dvb.ipdcesgaccess2': { source: 'iana' },
      'application/vnd.dvb.ipdcesgpdd': { source: 'iana' },
      'application/vnd.dvb.ipdcroaming': { source: 'iana' },
      'application/vnd.dvb.iptv.alfec-base': { source: 'iana' },
      'application/vnd.dvb.iptv.alfec-enhancement': { source: 'iana' },
      'application/vnd.dvb.notif-aggregate-root+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-container+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-generic+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-msglist+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-registration-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-registration-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-init+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.pfr': { source: 'iana' },
      'application/vnd.dvb.service': {
        source: 'iana',
        extensions: ['svc'],
      },
      'application/vnd.dxr': { source: 'iana' },
      'application/vnd.dynageo': { source: 'iana', extensions: ['geo'] },
      'application/vnd.dzr': { source: 'iana' },
      'application/vnd.easykaraoke.cdgdownload': { source: 'iana' },
      'application/vnd.ecdis-update': { source: 'iana' },
      'application/vnd.ecip.rlp': { source: 'iana' },
      'application/vnd.eclipse.ditto+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ecowin.chart': {
        source: 'iana',
        extensions: ['mag'],
      },
      'application/vnd.ecowin.filerequest': { source: 'iana' },
      'application/vnd.ecowin.fileupdate': { source: 'iana' },
      'application/vnd.ecowin.series': { source: 'iana' },
      'application/vnd.ecowin.seriesrequest': { source: 'iana' },
      'application/vnd.ecowin.seriesupdate': { source: 'iana' },
      'application/vnd.efi.img': { source: 'iana' },
      'application/vnd.efi.iso': { source: 'iana' },
      'application/vnd.emclient.accessrequest+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.enliven': { source: 'iana', extensions: ['nml'] },
      'application/vnd.enphase.envoy': { source: 'iana' },
      'application/vnd.eprints.data+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.epson.esf': {
        source: 'iana',
        extensions: ['esf'],
      },
      'application/vnd.epson.msf': {
        source: 'iana',
        extensions: ['msf'],
      },
      'application/vnd.epson.quickanime': {
        source: 'iana',
        extensions: ['qam'],
      },
      'application/vnd.epson.salt': {
        source: 'iana',
        extensions: ['slt'],
      },
      'application/vnd.epson.ssf': {
        source: 'iana',
        extensions: ['ssf'],
      },
      'application/vnd.ericsson.quickcall': { source: 'iana' },
      'application/vnd.espass-espass+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.eszigno3+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['es3', 'et3'],
      },
      'application/vnd.etsi.aoc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.asic-e+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.etsi.asic-s+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.etsi.cug+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvcommand+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvdiscovery+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-bc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-cod+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-npvr+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvservice+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsync+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvueprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.mcid+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.mheg5': { source: 'iana' },
      'application/vnd.etsi.overload-control-policy-dataset+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.pstn+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.sci+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.simservs+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.timestamp-token': { source: 'iana' },
      'application/vnd.etsi.tsl+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.tsl.der': { source: 'iana' },
      'application/vnd.eu.kasparian.car+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.eudora.data': { source: 'iana' },
      'application/vnd.evolv.ecig.profile': { source: 'iana' },
      'application/vnd.evolv.ecig.settings': { source: 'iana' },
      'application/vnd.evolv.ecig.theme': { source: 'iana' },
      'application/vnd.exstream-empower+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.exstream-package': { source: 'iana' },
      'application/vnd.ezpix-album': {
        source: 'iana',
        extensions: ['ez2'],
      },
      'application/vnd.ezpix-package': {
        source: 'iana',
        extensions: ['ez3'],
      },
      'application/vnd.f-secure.mobile': { source: 'iana' },
      'application/vnd.familysearch.gedcom+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.fastcopy-disk-image': { source: 'iana' },
      'application/vnd.fdf': { source: 'iana', extensions: ['fdf'] },
      'application/vnd.fdsn.mseed': {
        source: 'iana',
        extensions: ['mseed'],
      },
      'application/vnd.fdsn.seed': {
        source: 'iana',
        extensions: ['seed', 'dataless'],
      },
      'application/vnd.ffsns': { source: 'iana' },
      'application/vnd.ficlab.flb+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.filmit.zfc': { source: 'iana' },
      'application/vnd.fints': { source: 'iana' },
      'application/vnd.firemonkeys.cloudcell': { source: 'iana' },
      'application/vnd.flographit': {
        source: 'iana',
        extensions: ['gph'],
      },
      'application/vnd.fluxtime.clip': {
        source: 'iana',
        extensions: ['ftc'],
      },
      'application/vnd.font-fontforge-sfd': { source: 'iana' },
      'application/vnd.framemaker': {
        source: 'iana',
        extensions: ['fm', 'frame', 'maker', 'book'],
      },
      'application/vnd.frogans.fnc': {
        source: 'iana',
        extensions: ['fnc'],
      },
      'application/vnd.frogans.ltf': {
        source: 'iana',
        extensions: ['ltf'],
      },
      'application/vnd.fsc.weblaunch': {
        source: 'iana',
        extensions: ['fsc'],
      },
      'application/vnd.fujifilm.fb.docuworks': { source: 'iana' },
      'application/vnd.fujifilm.fb.docuworks.binder': { source: 'iana' },
      'application/vnd.fujifilm.fb.docuworks.container': {
        source: 'iana',
      },
      'application/vnd.fujifilm.fb.jfi+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.fujitsu.oasys': {
        source: 'iana',
        extensions: ['oas'],
      },
      'application/vnd.fujitsu.oasys2': {
        source: 'iana',
        extensions: ['oa2'],
      },
      'application/vnd.fujitsu.oasys3': {
        source: 'iana',
        extensions: ['oa3'],
      },
      'application/vnd.fujitsu.oasysgp': {
        source: 'iana',
        extensions: ['fg5'],
      },
      'application/vnd.fujitsu.oasysprs': {
        source: 'iana',
        extensions: ['bh2'],
      },
      'application/vnd.fujixerox.art-ex': { source: 'iana' },
      'application/vnd.fujixerox.art4': { source: 'iana' },
      'application/vnd.fujixerox.ddd': {
        source: 'iana',
        extensions: ['ddd'],
      },
      'application/vnd.fujixerox.docuworks': {
        source: 'iana',
        extensions: ['xdw'],
      },
      'application/vnd.fujixerox.docuworks.binder': {
        source: 'iana',
        extensions: ['xbd'],
      },
      'application/vnd.fujixerox.docuworks.container': { source: 'iana' },
      'application/vnd.fujixerox.hbpl': { source: 'iana' },
      'application/vnd.fut-misnet': { source: 'iana' },
      'application/vnd.futoin+cbor': { source: 'iana' },
      'application/vnd.futoin+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.fuzzysheet': {
        source: 'iana',
        extensions: ['fzs'],
      },
      'application/vnd.genomatix.tuxedo': {
        source: 'iana',
        extensions: ['txd'],
      },
      'application/vnd.gentics.grd+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.geo+json': { source: 'iana', compressible: true },
      'application/vnd.geocube+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.geogebra.file': {
        source: 'iana',
        extensions: ['ggb'],
      },
      'application/vnd.geogebra.slides': { source: 'iana' },
      'application/vnd.geogebra.tool': {
        source: 'iana',
        extensions: ['ggt'],
      },
      'application/vnd.geometry-explorer': {
        source: 'iana',
        extensions: ['gex', 'gre'],
      },
      'application/vnd.geonext': { source: 'iana', extensions: ['gxt'] },
      'application/vnd.geoplan': { source: 'iana', extensions: ['g2w'] },
      'application/vnd.geospace': { source: 'iana', extensions: ['g3w'] },
      'application/vnd.gerber': { source: 'iana' },
      'application/vnd.globalplatform.card-content-mgt': {
        source: 'iana',
      },
      'application/vnd.globalplatform.card-content-mgt-response': {
        source: 'iana',
      },
      'application/vnd.gmx': { source: 'iana', extensions: ['gmx'] },
      'application/vnd.google-apps.document': {
        compressible: false,
        extensions: ['gdoc'],
      },
      'application/vnd.google-apps.presentation': {
        compressible: false,
        extensions: ['gslides'],
      },
      'application/vnd.google-apps.spreadsheet': {
        compressible: false,
        extensions: ['gsheet'],
      },
      'application/vnd.google-earth.kml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['kml'],
      },
      'application/vnd.google-earth.kmz': {
        source: 'iana',
        compressible: false,
        extensions: ['kmz'],
      },
      'application/vnd.gov.sk.e-form+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.gov.sk.e-form+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.gov.sk.xmldatacontainer+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.grafeq': {
        source: 'iana',
        extensions: ['gqf', 'gqs'],
      },
      'application/vnd.gridmp': { source: 'iana' },
      'application/vnd.groove-account': {
        source: 'iana',
        extensions: ['gac'],
      },
      'application/vnd.groove-help': {
        source: 'iana',
        extensions: ['ghf'],
      },
      'application/vnd.groove-identity-message': {
        source: 'iana',
        extensions: ['gim'],
      },
      'application/vnd.groove-injector': {
        source: 'iana',
        extensions: ['grv'],
      },
      'application/vnd.groove-tool-message': {
        source: 'iana',
        extensions: ['gtm'],
      },
      'application/vnd.groove-tool-template': {
        source: 'iana',
        extensions: ['tpl'],
      },
      'application/vnd.groove-vcard': {
        source: 'iana',
        extensions: ['vcg'],
      },
      'application/vnd.hal+json': { source: 'iana', compressible: true },
      'application/vnd.hal+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['hal'],
      },
      'application/vnd.handheld-entertainment+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['zmm'],
      },
      'application/vnd.hbci': { source: 'iana', extensions: ['hbci'] },
      'application/vnd.hc+json': { source: 'iana', compressible: true },
      'application/vnd.hcl-bireports': { source: 'iana' },
      'application/vnd.hdt': { source: 'iana' },
      'application/vnd.heroku+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hhe.lesson-player': {
        source: 'iana',
        extensions: ['les'],
      },
      'application/vnd.hl7cda+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.hl7v2+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.hp-hpgl': { source: 'iana', extensions: ['hpgl'] },
      'application/vnd.hp-hpid': { source: 'iana', extensions: ['hpid'] },
      'application/vnd.hp-hps': { source: 'iana', extensions: ['hps'] },
      'application/vnd.hp-jlyt': { source: 'iana', extensions: ['jlt'] },
      'application/vnd.hp-pcl': { source: 'iana', extensions: ['pcl'] },
      'application/vnd.hp-pclxl': {
        source: 'iana',
        extensions: ['pclxl'],
      },
      'application/vnd.httphone': { source: 'iana' },
      'application/vnd.hydrostatix.sof-data': {
        source: 'iana',
        extensions: ['sfd-hdstx'],
      },
      'application/vnd.hyper+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hyper-item+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hyperdrive+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hzn-3d-crossword': { source: 'iana' },
      'application/vnd.ibm.afplinedata': { source: 'iana' },
      'application/vnd.ibm.electronic-media': { source: 'iana' },
      'application/vnd.ibm.minipay': {
        source: 'iana',
        extensions: ['mpy'],
      },
      'application/vnd.ibm.modcap': {
        source: 'iana',
        extensions: ['afp', 'listafp', 'list3820'],
      },
      'application/vnd.ibm.rights-management': {
        source: 'iana',
        extensions: ['irm'],
      },
      'application/vnd.ibm.secure-container': {
        source: 'iana',
        extensions: ['sc'],
      },
      'application/vnd.iccprofile': {
        source: 'iana',
        extensions: ['icc', 'icm'],
      },
      'application/vnd.ieee.1905': { source: 'iana' },
      'application/vnd.igloader': { source: 'iana', extensions: ['igl'] },
      'application/vnd.imagemeter.folder+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.imagemeter.image+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.immervision-ivp': {
        source: 'iana',
        extensions: ['ivp'],
      },
      'application/vnd.immervision-ivu': {
        source: 'iana',
        extensions: ['ivu'],
      },
      'application/vnd.ims.imsccv1p1': { source: 'iana' },
      'application/vnd.ims.imsccv1p2': { source: 'iana' },
      'application/vnd.ims.imsccv1p3': { source: 'iana' },
      'application/vnd.ims.lis.v2.result+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolproxy+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolproxy.id+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolsettings+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolsettings.simple+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.informedcontrol.rms+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.informix-visionary': { source: 'iana' },
      'application/vnd.infotech.project': { source: 'iana' },
      'application/vnd.infotech.project+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.innopath.wamp.notification': { source: 'iana' },
      'application/vnd.insors.igm': {
        source: 'iana',
        extensions: ['igm'],
      },
      'application/vnd.intercon.formnet': {
        source: 'iana',
        extensions: ['xpw', 'xpx'],
      },
      'application/vnd.intergeo': { source: 'iana', extensions: ['i2g'] },
      'application/vnd.intertrust.digibox': { source: 'iana' },
      'application/vnd.intertrust.nncp': { source: 'iana' },
      'application/vnd.intu.qbo': { source: 'iana', extensions: ['qbo'] },
      'application/vnd.intu.qfx': { source: 'iana', extensions: ['qfx'] },
      'application/vnd.iptc.g2.catalogitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.conceptitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.knowledgeitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.newsitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.newsmessage+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.packageitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.planningitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ipunplugged.rcprofile': {
        source: 'iana',
        extensions: ['rcprofile'],
      },
      'application/vnd.irepository.package+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['irp'],
      },
      'application/vnd.is-xpr': { source: 'iana', extensions: ['xpr'] },
      'application/vnd.isac.fcs': { source: 'iana', extensions: ['fcs'] },
      'application/vnd.iso11783-10+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.jam': { source: 'iana', extensions: ['jam'] },
      'application/vnd.japannet-directory-service': { source: 'iana' },
      'application/vnd.japannet-jpnstore-wakeup': { source: 'iana' },
      'application/vnd.japannet-payment-wakeup': { source: 'iana' },
      'application/vnd.japannet-registration': { source: 'iana' },
      'application/vnd.japannet-registration-wakeup': { source: 'iana' },
      'application/vnd.japannet-setstore-wakeup': { source: 'iana' },
      'application/vnd.japannet-verification': { source: 'iana' },
      'application/vnd.japannet-verification-wakeup': { source: 'iana' },
      'application/vnd.jcp.javame.midlet-rms': {
        source: 'iana',
        extensions: ['rms'],
      },
      'application/vnd.jisp': { source: 'iana', extensions: ['jisp'] },
      'application/vnd.joost.joda-archive': {
        source: 'iana',
        extensions: ['joda'],
      },
      'application/vnd.jsk.isdn-ngn': { source: 'iana' },
      'application/vnd.kahootz': {
        source: 'iana',
        extensions: ['ktz', 'ktr'],
      },
      'application/vnd.kde.karbon': {
        source: 'iana',
        extensions: ['karbon'],
      },
      'application/vnd.kde.kchart': {
        source: 'iana',
        extensions: ['chrt'],
      },
      'application/vnd.kde.kformula': {
        source: 'iana',
        extensions: ['kfo'],
      },
      'application/vnd.kde.kivio': {
        source: 'iana',
        extensions: ['flw'],
      },
      'application/vnd.kde.kontour': {
        source: 'iana',
        extensions: ['kon'],
      },
      'application/vnd.kde.kpresenter': {
        source: 'iana',
        extensions: ['kpr', 'kpt'],
      },
      'application/vnd.kde.kspread': {
        source: 'iana',
        extensions: ['ksp'],
      },
      'application/vnd.kde.kword': {
        source: 'iana',
        extensions: ['kwd', 'kwt'],
      },
      'application/vnd.kenameaapp': {
        source: 'iana',
        extensions: ['htke'],
      },
      'application/vnd.kidspiration': {
        source: 'iana',
        extensions: ['kia'],
      },
      'application/vnd.kinar': {
        source: 'iana',
        extensions: ['kne', 'knp'],
      },
      'application/vnd.koan': {
        source: 'iana',
        extensions: ['skp', 'skd', 'skt', 'skm'],
      },
      'application/vnd.kodak-descriptor': {
        source: 'iana',
        extensions: ['sse'],
      },
      'application/vnd.las': { source: 'iana' },
      'application/vnd.las.las+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.las.las+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lasxml'],
      },
      'application/vnd.laszip': { source: 'iana' },
      'application/vnd.leap+json': { source: 'iana', compressible: true },
      'application/vnd.liberty-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.llamagraphics.life-balance.desktop': {
        source: 'iana',
        extensions: ['lbd'],
      },
      'application/vnd.llamagraphics.life-balance.exchange+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lbe'],
      },
      'application/vnd.logipipe.circuit+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.loom': { source: 'iana' },
      'application/vnd.lotus-1-2-3': {
        source: 'iana',
        extensions: ['123'],
      },
      'application/vnd.lotus-approach': {
        source: 'iana',
        extensions: ['apr'],
      },
      'application/vnd.lotus-freelance': {
        source: 'iana',
        extensions: ['pre'],
      },
      'application/vnd.lotus-notes': {
        source: 'iana',
        extensions: ['nsf'],
      },
      'application/vnd.lotus-organizer': {
        source: 'iana',
        extensions: ['org'],
      },
      'application/vnd.lotus-screencam': {
        source: 'iana',
        extensions: ['scm'],
      },
      'application/vnd.lotus-wordpro': {
        source: 'iana',
        extensions: ['lwp'],
      },
      'application/vnd.macports.portpkg': {
        source: 'iana',
        extensions: ['portpkg'],
      },
      'application/vnd.mapbox-vector-tile': {
        source: 'iana',
        extensions: ['mvt'],
      },
      'application/vnd.marlin.drm.actiontoken+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.conftoken+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.license+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.mdcf': { source: 'iana' },
      'application/vnd.mason+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.maxar.archive.3tz+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.maxmind.maxmind-db': { source: 'iana' },
      'application/vnd.mcd': { source: 'iana', extensions: ['mcd'] },
      'application/vnd.medcalcdata': {
        source: 'iana',
        extensions: ['mc1'],
      },
      'application/vnd.mediastation.cdkey': {
        source: 'iana',
        extensions: ['cdkey'],
      },
      'application/vnd.meridian-slingshot': { source: 'iana' },
      'application/vnd.mfer': { source: 'iana', extensions: ['mwf'] },
      'application/vnd.mfmp': { source: 'iana', extensions: ['mfm'] },
      'application/vnd.micro+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.micrografx.flo': {
        source: 'iana',
        extensions: ['flo'],
      },
      'application/vnd.micrografx.igx': {
        source: 'iana',
        extensions: ['igx'],
      },
      'application/vnd.microsoft.portable-executable': { source: 'iana' },
      'application/vnd.microsoft.windows.thumbnail-cache': {
        source: 'iana',
      },
      'application/vnd.miele+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.mif': { source: 'iana', extensions: ['mif'] },
      'application/vnd.minisoft-hp3000-save': { source: 'iana' },
      'application/vnd.mitsubishi.misty-guard.trustweb': {
        source: 'iana',
      },
      'application/vnd.mobius.daf': {
        source: 'iana',
        extensions: ['daf'],
      },
      'application/vnd.mobius.dis': {
        source: 'iana',
        extensions: ['dis'],
      },
      'application/vnd.mobius.mbk': {
        source: 'iana',
        extensions: ['mbk'],
      },
      'application/vnd.mobius.mqy': {
        source: 'iana',
        extensions: ['mqy'],
      },
      'application/vnd.mobius.msl': {
        source: 'iana',
        extensions: ['msl'],
      },
      'application/vnd.mobius.plc': {
        source: 'iana',
        extensions: ['plc'],
      },
      'application/vnd.mobius.txf': {
        source: 'iana',
        extensions: ['txf'],
      },
      'application/vnd.mophun.application': {
        source: 'iana',
        extensions: ['mpn'],
      },
      'application/vnd.mophun.certificate': {
        source: 'iana',
        extensions: ['mpc'],
      },
      'application/vnd.motorola.flexsuite': { source: 'iana' },
      'application/vnd.motorola.flexsuite.adsi': { source: 'iana' },
      'application/vnd.motorola.flexsuite.fis': { source: 'iana' },
      'application/vnd.motorola.flexsuite.gotap': { source: 'iana' },
      'application/vnd.motorola.flexsuite.kmr': { source: 'iana' },
      'application/vnd.motorola.flexsuite.ttc': { source: 'iana' },
      'application/vnd.motorola.flexsuite.wem': { source: 'iana' },
      'application/vnd.motorola.iprm': { source: 'iana' },
      'application/vnd.mozilla.xul+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xul'],
      },
      'application/vnd.ms-3mfdocument': { source: 'iana' },
      'application/vnd.ms-artgalry': {
        source: 'iana',
        extensions: ['cil'],
      },
      'application/vnd.ms-asf': { source: 'iana' },
      'application/vnd.ms-cab-compressed': {
        source: 'iana',
        extensions: ['cab'],
      },
      'application/vnd.ms-color.iccprofile': { source: 'apache' },
      'application/vnd.ms-excel': {
        source: 'iana',
        compressible: false,
        extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw'],
      },
      'application/vnd.ms-excel.addin.macroenabled.12': {
        source: 'iana',
        extensions: ['xlam'],
      },
      'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
        source: 'iana',
        extensions: ['xlsb'],
      },
      'application/vnd.ms-excel.sheet.macroenabled.12': {
        source: 'iana',
        extensions: ['xlsm'],
      },
      'application/vnd.ms-excel.template.macroenabled.12': {
        source: 'iana',
        extensions: ['xltm'],
      },
      'application/vnd.ms-fontobject': {
        source: 'iana',
        compressible: true,
        extensions: ['eot'],
      },
      'application/vnd.ms-htmlhelp': {
        source: 'iana',
        extensions: ['chm'],
      },
      'application/vnd.ms-ims': { source: 'iana', extensions: ['ims'] },
      'application/vnd.ms-lrm': { source: 'iana', extensions: ['lrm'] },
      'application/vnd.ms-office.activex+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-officetheme': {
        source: 'iana',
        extensions: ['thmx'],
      },
      'application/vnd.ms-opentype': {
        source: 'apache',
        compressible: true,
      },
      'application/vnd.ms-outlook': {
        compressible: false,
        extensions: ['msg'],
      },
      'application/vnd.ms-package.obfuscated-opentype': {
        source: 'apache',
      },
      'application/vnd.ms-pki.seccat': {
        source: 'apache',
        extensions: ['cat'],
      },
      'application/vnd.ms-pki.stl': {
        source: 'apache',
        extensions: ['stl'],
      },
      'application/vnd.ms-playready.initiator+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-powerpoint': {
        source: 'iana',
        compressible: false,
        extensions: ['ppt', 'pps', 'pot'],
      },
      'application/vnd.ms-powerpoint.addin.macroenabled.12': {
        source: 'iana',
        extensions: ['ppam'],
      },
      'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
        source: 'iana',
        extensions: ['pptm'],
      },
      'application/vnd.ms-powerpoint.slide.macroenabled.12': {
        source: 'iana',
        extensions: ['sldm'],
      },
      'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
        source: 'iana',
        extensions: ['ppsm'],
      },
      'application/vnd.ms-powerpoint.template.macroenabled.12': {
        source: 'iana',
        extensions: ['potm'],
      },
      'application/vnd.ms-printdevicecapabilities+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-printing.printticket+xml': {
        source: 'apache',
        compressible: true,
      },
      'application/vnd.ms-printschematicket+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-project': {
        source: 'iana',
        extensions: ['mpp', 'mpt'],
      },
      'application/vnd.ms-tnef': { source: 'iana' },
      'application/vnd.ms-windows.devicepairing': { source: 'iana' },
      'application/vnd.ms-windows.nwprinting.oob': { source: 'iana' },
      'application/vnd.ms-windows.printerpairing': { source: 'iana' },
      'application/vnd.ms-windows.wsd.oob': { source: 'iana' },
      'application/vnd.ms-wmdrm.lic-chlg-req': { source: 'iana' },
      'application/vnd.ms-wmdrm.lic-resp': { source: 'iana' },
      'application/vnd.ms-wmdrm.meter-chlg-req': { source: 'iana' },
      'application/vnd.ms-wmdrm.meter-resp': { source: 'iana' },
      'application/vnd.ms-word.document.macroenabled.12': {
        source: 'iana',
        extensions: ['docm'],
      },
      'application/vnd.ms-word.template.macroenabled.12': {
        source: 'iana',
        extensions: ['dotm'],
      },
      'application/vnd.ms-works': {
        source: 'iana',
        extensions: ['wps', 'wks', 'wcm', 'wdb'],
      },
      'application/vnd.ms-wpl': { source: 'iana', extensions: ['wpl'] },
      'application/vnd.ms-xpsdocument': {
        source: 'iana',
        compressible: false,
        extensions: ['xps'],
      },
      'application/vnd.msa-disk-image': { source: 'iana' },
      'application/vnd.mseq': { source: 'iana', extensions: ['mseq'] },
      'application/vnd.msign': { source: 'iana' },
      'application/vnd.multiad.creator': { source: 'iana' },
      'application/vnd.multiad.creator.cif': { source: 'iana' },
      'application/vnd.music-niff': { source: 'iana' },
      'application/vnd.musician': { source: 'iana', extensions: ['mus'] },
      'application/vnd.muvee.style': {
        source: 'iana',
        extensions: ['msty'],
      },
      'application/vnd.mynfc': { source: 'iana', extensions: ['taglet'] },
      'application/vnd.nacamar.ybrid+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ncd.control': { source: 'iana' },
      'application/vnd.ncd.reference': { source: 'iana' },
      'application/vnd.nearst.inv+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nebumind.line': { source: 'iana' },
      'application/vnd.nervana': { source: 'iana' },
      'application/vnd.netfpx': { source: 'iana' },
      'application/vnd.neurolanguage.nlu': {
        source: 'iana',
        extensions: ['nlu'],
      },
      'application/vnd.nimn': { source: 'iana' },
      'application/vnd.nintendo.nitro.rom': { source: 'iana' },
      'application/vnd.nintendo.snes.rom': { source: 'iana' },
      'application/vnd.nitf': {
        source: 'iana',
        extensions: ['ntf', 'nitf'],
      },
      'application/vnd.noblenet-directory': {
        source: 'iana',
        extensions: ['nnd'],
      },
      'application/vnd.noblenet-sealer': {
        source: 'iana',
        extensions: ['nns'],
      },
      'application/vnd.noblenet-web': {
        source: 'iana',
        extensions: ['nnw'],
      },
      'application/vnd.nokia.catalogs': { source: 'iana' },
      'application/vnd.nokia.conml+wbxml': { source: 'iana' },
      'application/vnd.nokia.conml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.iptv.config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.isds-radio-presets': { source: 'iana' },
      'application/vnd.nokia.landmark+wbxml': { source: 'iana' },
      'application/vnd.nokia.landmark+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.landmarkcollection+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.n-gage.ac+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ac'],
      },
      'application/vnd.nokia.n-gage.data': {
        source: 'iana',
        extensions: ['ngdat'],
      },
      'application/vnd.nokia.n-gage.symbian.install': {
        source: 'iana',
        extensions: ['n-gage'],
      },
      'application/vnd.nokia.ncd': { source: 'iana' },
      'application/vnd.nokia.pcd+wbxml': { source: 'iana' },
      'application/vnd.nokia.pcd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.radio-preset': {
        source: 'iana',
        extensions: ['rpst'],
      },
      'application/vnd.nokia.radio-presets': {
        source: 'iana',
        extensions: ['rpss'],
      },
      'application/vnd.novadigm.edm': {
        source: 'iana',
        extensions: ['edm'],
      },
      'application/vnd.novadigm.edx': {
        source: 'iana',
        extensions: ['edx'],
      },
      'application/vnd.novadigm.ext': {
        source: 'iana',
        extensions: ['ext'],
      },
      'application/vnd.ntt-local.content-share': { source: 'iana' },
      'application/vnd.ntt-local.file-transfer': { source: 'iana' },
      'application/vnd.ntt-local.ogw_remote-access': { source: 'iana' },
      'application/vnd.ntt-local.sip-ta_remote': { source: 'iana' },
      'application/vnd.ntt-local.sip-ta_tcp_stream': { source: 'iana' },
      'application/vnd.oasis.opendocument.chart': {
        source: 'iana',
        extensions: ['odc'],
      },
      'application/vnd.oasis.opendocument.chart-template': {
        source: 'iana',
        extensions: ['otc'],
      },
      'application/vnd.oasis.opendocument.database': {
        source: 'iana',
        extensions: ['odb'],
      },
      'application/vnd.oasis.opendocument.formula': {
        source: 'iana',
        extensions: ['odf'],
      },
      'application/vnd.oasis.opendocument.formula-template': {
        source: 'iana',
        extensions: ['odft'],
      },
      'application/vnd.oasis.opendocument.graphics': {
        source: 'iana',
        compressible: false,
        extensions: ['odg'],
      },
      'application/vnd.oasis.opendocument.graphics-template': {
        source: 'iana',
        extensions: ['otg'],
      },
      'application/vnd.oasis.opendocument.image': {
        source: 'iana',
        extensions: ['odi'],
      },
      'application/vnd.oasis.opendocument.image-template': {
        source: 'iana',
        extensions: ['oti'],
      },
      'application/vnd.oasis.opendocument.presentation': {
        source: 'iana',
        compressible: false,
        extensions: ['odp'],
      },
      'application/vnd.oasis.opendocument.presentation-template': {
        source: 'iana',
        extensions: ['otp'],
      },
      'application/vnd.oasis.opendocument.spreadsheet': {
        source: 'iana',
        compressible: false,
        extensions: ['ods'],
      },
      'application/vnd.oasis.opendocument.spreadsheet-template': {
        source: 'iana',
        extensions: ['ots'],
      },
      'application/vnd.oasis.opendocument.text': {
        source: 'iana',
        compressible: false,
        extensions: ['odt'],
      },
      'application/vnd.oasis.opendocument.text-master': {
        source: 'iana',
        extensions: ['odm'],
      },
      'application/vnd.oasis.opendocument.text-template': {
        source: 'iana',
        extensions: ['ott'],
      },
      'application/vnd.oasis.opendocument.text-web': {
        source: 'iana',
        extensions: ['oth'],
      },
      'application/vnd.obn': { source: 'iana' },
      'application/vnd.ocf+cbor': { source: 'iana' },
      'application/vnd.oci.image.manifest.v1+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oftn.l10n+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.contentaccessdownload+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.contentaccessstreaming+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.cspg-hexbinary': { source: 'iana' },
      'application/vnd.oipf.dae.svg+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.dae.xhtml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.mippvcontrolmessage+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.pae.gem': { source: 'iana' },
      'application/vnd.oipf.spdiscovery+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.spdlist+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.ueprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.userprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.olpc-sugar': {
        source: 'iana',
        extensions: ['xo'],
      },
      'application/vnd.oma-scws-config': { source: 'iana' },
      'application/vnd.oma-scws-http-request': { source: 'iana' },
      'application/vnd.oma-scws-http-response': { source: 'iana' },
      'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.drm-trigger+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.imd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.ltkm': { source: 'iana' },
      'application/vnd.oma.bcast.notification+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.provisioningtrigger': { source: 'iana' },
      'application/vnd.oma.bcast.sgboot': { source: 'iana' },
      'application/vnd.oma.bcast.sgdd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.sgdu': { source: 'iana' },
      'application/vnd.oma.bcast.simple-symbol-container': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.smartcard-trigger+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.sprov+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.stkm': { source: 'iana' },
      'application/vnd.oma.cab-address-book+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-feature-handler+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-pcc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-subs-invite+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-user-prefs+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.dcd': { source: 'iana' },
      'application/vnd.oma.dcdc': { source: 'iana' },
      'application/vnd.oma.dd2+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dd2'],
      },
      'application/vnd.oma.drm.risd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.group-usage-list+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.lwm2m+cbor': { source: 'iana' },
      'application/vnd.oma.lwm2m+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.lwm2m+tlv': { source: 'iana' },
      'application/vnd.oma.pal+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.detailed-progress-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.final-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.groups+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.invocation-descriptor+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.optimized-progress-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.push': { source: 'iana' },
      'application/vnd.oma.scidm.messages+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.xcap-directory+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.omads-email+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omads-file+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omads-folder+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omaloc-supl-init': { source: 'iana' },
      'application/vnd.onepager': { source: 'iana' },
      'application/vnd.onepagertamp': { source: 'iana' },
      'application/vnd.onepagertamx': { source: 'iana' },
      'application/vnd.onepagertat': { source: 'iana' },
      'application/vnd.onepagertatp': { source: 'iana' },
      'application/vnd.onepagertatx': { source: 'iana' },
      'application/vnd.openblox.game+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['obgx'],
      },
      'application/vnd.openblox.game-binary': { source: 'iana' },
      'application/vnd.openeye.oeb': { source: 'iana' },
      'application/vnd.openofficeorg.extension': {
        source: 'apache',
        extensions: ['oxt'],
      },
      'application/vnd.openstreetmap.data+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['osm'],
      },
      'application/vnd.opentimestamps.ots': { source: 'iana' },
      'application/vnd.openxmlformats-officedocument.custom-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.customxmlproperties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawing+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.extended-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.comments+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.presentation':
        { source: 'iana', compressible: false, extensions: ['pptx'] },
      'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.slide': {
        source: 'iana',
        extensions: ['sldx'],
      },
      'application/vnd.openxmlformats-officedocument.presentationml.slide+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.slideshow':
        { source: 'iana', extensions: ['ppsx'] },
      'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.tags+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.presentationml.template': {
        source: 'iana',
        extensions: ['potx'],
      },
      'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
        source: 'iana',
        compressible: false,
        extensions: ['xlsx'],
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
        source: 'iana',
        extensions: ['xltx'],
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.theme+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.vmldrawing': {
        source: 'iana',
      },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        { source: 'iana', compressible: false, extensions: ['docx'] },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.template':
        { source: 'iana', extensions: ['dotx'] },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-package.core-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml':
        { source: 'iana', compressible: true },
      'application/vnd.openxmlformats-package.relationships+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oracle.resource+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.orange.indata': { source: 'iana' },
      'application/vnd.osa.netdeploy': { source: 'iana' },
      'application/vnd.osgeo.mapguide.package': {
        source: 'iana',
        extensions: ['mgp'],
      },
      'application/vnd.osgi.bundle': { source: 'iana' },
      'application/vnd.osgi.dp': { source: 'iana', extensions: ['dp'] },
      'application/vnd.osgi.subsystem': {
        source: 'iana',
        extensions: ['esa'],
      },
      'application/vnd.otps.ct-kip+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oxli.countgraph': { source: 'iana' },
      'application/vnd.pagerduty+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.palm': {
        source: 'iana',
        extensions: ['pdb', 'pqa', 'oprc'],
      },
      'application/vnd.panoply': { source: 'iana' },
      'application/vnd.paos.xml': { source: 'iana' },
      'application/vnd.patentdive': { source: 'iana' },
      'application/vnd.patientecommsdoc': { source: 'iana' },
      'application/vnd.pawaafile': {
        source: 'iana',
        extensions: ['paw'],
      },
      'application/vnd.pcos': { source: 'iana' },
      'application/vnd.pg.format': {
        source: 'iana',
        extensions: ['str'],
      },
      'application/vnd.pg.osasli': {
        source: 'iana',
        extensions: ['ei6'],
      },
      'application/vnd.piaccess.application-licence': { source: 'iana' },
      'application/vnd.picsel': { source: 'iana', extensions: ['efif'] },
      'application/vnd.pmi.widget': {
        source: 'iana',
        extensions: ['wg'],
      },
      'application/vnd.poc.group-advertisement+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.pocketlearn': {
        source: 'iana',
        extensions: ['plf'],
      },
      'application/vnd.powerbuilder6': {
        source: 'iana',
        extensions: ['pbd'],
      },
      'application/vnd.powerbuilder6-s': { source: 'iana' },
      'application/vnd.powerbuilder7': { source: 'iana' },
      'application/vnd.powerbuilder7-s': { source: 'iana' },
      'application/vnd.powerbuilder75': { source: 'iana' },
      'application/vnd.powerbuilder75-s': { source: 'iana' },
      'application/vnd.preminet': { source: 'iana' },
      'application/vnd.previewsystems.box': {
        source: 'iana',
        extensions: ['box'],
      },
      'application/vnd.proteus.magazine': {
        source: 'iana',
        extensions: ['mgz'],
      },
      'application/vnd.psfs': { source: 'iana' },
      'application/vnd.publishare-delta-tree': {
        source: 'iana',
        extensions: ['qps'],
      },
      'application/vnd.pvi.ptid1': {
        source: 'iana',
        extensions: ['ptid'],
      },
      'application/vnd.pwg-multiplexed': { source: 'iana' },
      'application/vnd.pwg-xhtml-print+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.qualcomm.brew-app-res': { source: 'iana' },
      'application/vnd.quarantainenet': { source: 'iana' },
      'application/vnd.quark.quarkxpress': {
        source: 'iana',
        extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb'],
      },
      'application/vnd.quobject-quoxdocument': { source: 'iana' },
      'application/vnd.radisys.moml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-conf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-conn+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-dialog+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-stream+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-conf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-base+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-fax-detect+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-group+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-speech+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-transform+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.rainstor.data': { source: 'iana' },
      'application/vnd.rapid': { source: 'iana' },
      'application/vnd.rar': { source: 'iana', extensions: ['rar'] },
      'application/vnd.realvnc.bed': {
        source: 'iana',
        extensions: ['bed'],
      },
      'application/vnd.recordare.musicxml': {
        source: 'iana',
        extensions: ['mxl'],
      },
      'application/vnd.recordare.musicxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['musicxml'],
      },
      'application/vnd.renlearn.rlprint': { source: 'iana' },
      'application/vnd.resilient.logic': { source: 'iana' },
      'application/vnd.restful+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.rig.cryptonote': {
        source: 'iana',
        extensions: ['cryptonote'],
      },
      'application/vnd.rim.cod': {
        source: 'apache',
        extensions: ['cod'],
      },
      'application/vnd.rn-realmedia': {
        source: 'apache',
        extensions: ['rm'],
      },
      'application/vnd.rn-realmedia-vbr': {
        source: 'apache',
        extensions: ['rmvb'],
      },
      'application/vnd.route66.link66+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['link66'],
      },
      'application/vnd.rs-274x': { source: 'iana' },
      'application/vnd.ruckus.download': { source: 'iana' },
      'application/vnd.s3sms': { source: 'iana' },
      'application/vnd.sailingtracker.track': {
        source: 'iana',
        extensions: ['st'],
      },
      'application/vnd.sar': { source: 'iana' },
      'application/vnd.sbm.cid': { source: 'iana' },
      'application/vnd.sbm.mid2': { source: 'iana' },
      'application/vnd.scribus': { source: 'iana' },
      'application/vnd.sealed.3df': { source: 'iana' },
      'application/vnd.sealed.csf': { source: 'iana' },
      'application/vnd.sealed.doc': { source: 'iana' },
      'application/vnd.sealed.eml': { source: 'iana' },
      'application/vnd.sealed.mht': { source: 'iana' },
      'application/vnd.sealed.net': { source: 'iana' },
      'application/vnd.sealed.ppt': { source: 'iana' },
      'application/vnd.sealed.tiff': { source: 'iana' },
      'application/vnd.sealed.xls': { source: 'iana' },
      'application/vnd.sealedmedia.softseal.html': { source: 'iana' },
      'application/vnd.sealedmedia.softseal.pdf': { source: 'iana' },
      'application/vnd.seemail': { source: 'iana', extensions: ['see'] },
      'application/vnd.seis+json': { source: 'iana', compressible: true },
      'application/vnd.sema': { source: 'iana', extensions: ['sema'] },
      'application/vnd.semd': { source: 'iana', extensions: ['semd'] },
      'application/vnd.semf': { source: 'iana', extensions: ['semf'] },
      'application/vnd.shade-save-file': { source: 'iana' },
      'application/vnd.shana.informed.formdata': {
        source: 'iana',
        extensions: ['ifm'],
      },
      'application/vnd.shana.informed.formtemplate': {
        source: 'iana',
        extensions: ['itp'],
      },
      'application/vnd.shana.informed.interchange': {
        source: 'iana',
        extensions: ['iif'],
      },
      'application/vnd.shana.informed.package': {
        source: 'iana',
        extensions: ['ipk'],
      },
      'application/vnd.shootproof+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.shopkick+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.shp': { source: 'iana' },
      'application/vnd.shx': { source: 'iana' },
      'application/vnd.sigrok.session': { source: 'iana' },
      'application/vnd.simtech-mindmapper': {
        source: 'iana',
        extensions: ['twd', 'twds'],
      },
      'application/vnd.siren+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.smaf': { source: 'iana', extensions: ['mmf'] },
      'application/vnd.smart.notebook': { source: 'iana' },
      'application/vnd.smart.teacher': {
        source: 'iana',
        extensions: ['teacher'],
      },
      'application/vnd.snesdev-page-table': { source: 'iana' },
      'application/vnd.software602.filler.form+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['fo'],
      },
      'application/vnd.software602.filler.form-xml-zip': {
        source: 'iana',
      },
      'application/vnd.solent.sdkm+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sdkm', 'sdkd'],
      },
      'application/vnd.spotfire.dxp': {
        source: 'iana',
        extensions: ['dxp'],
      },
      'application/vnd.spotfire.sfs': {
        source: 'iana',
        extensions: ['sfs'],
      },
      'application/vnd.sqlite3': { source: 'iana' },
      'application/vnd.sss-cod': { source: 'iana' },
      'application/vnd.sss-dtf': { source: 'iana' },
      'application/vnd.sss-ntf': { source: 'iana' },
      'application/vnd.stardivision.calc': {
        source: 'apache',
        extensions: ['sdc'],
      },
      'application/vnd.stardivision.draw': {
        source: 'apache',
        extensions: ['sda'],
      },
      'application/vnd.stardivision.impress': {
        source: 'apache',
        extensions: ['sdd'],
      },
      'application/vnd.stardivision.math': {
        source: 'apache',
        extensions: ['smf'],
      },
      'application/vnd.stardivision.writer': {
        source: 'apache',
        extensions: ['sdw', 'vor'],
      },
      'application/vnd.stardivision.writer-global': {
        source: 'apache',
        extensions: ['sgl'],
      },
      'application/vnd.stepmania.package': {
        source: 'iana',
        extensions: ['smzip'],
      },
      'application/vnd.stepmania.stepchart': {
        source: 'iana',
        extensions: ['sm'],
      },
      'application/vnd.street-stream': { source: 'iana' },
      'application/vnd.sun.wadl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wadl'],
      },
      'application/vnd.sun.xml.calc': {
        source: 'apache',
        extensions: ['sxc'],
      },
      'application/vnd.sun.xml.calc.template': {
        source: 'apache',
        extensions: ['stc'],
      },
      'application/vnd.sun.xml.draw': {
        source: 'apache',
        extensions: ['sxd'],
      },
      'application/vnd.sun.xml.draw.template': {
        source: 'apache',
        extensions: ['std'],
      },
      'application/vnd.sun.xml.impress': {
        source: 'apache',
        extensions: ['sxi'],
      },
      'application/vnd.sun.xml.impress.template': {
        source: 'apache',
        extensions: ['sti'],
      },
      'application/vnd.sun.xml.math': {
        source: 'apache',
        extensions: ['sxm'],
      },
      'application/vnd.sun.xml.writer': {
        source: 'apache',
        extensions: ['sxw'],
      },
      'application/vnd.sun.xml.writer.global': {
        source: 'apache',
        extensions: ['sxg'],
      },
      'application/vnd.sun.xml.writer.template': {
        source: 'apache',
        extensions: ['stw'],
      },
      'application/vnd.sus-calendar': {
        source: 'iana',
        extensions: ['sus', 'susp'],
      },
      'application/vnd.svd': { source: 'iana', extensions: ['svd'] },
      'application/vnd.swiftview-ics': { source: 'iana' },
      'application/vnd.sycle+xml': { source: 'iana', compressible: true },
      'application/vnd.syft+json': { source: 'iana', compressible: true },
      'application/vnd.symbian.install': {
        source: 'apache',
        extensions: ['sis', 'sisx'],
      },
      'application/vnd.syncml+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['xsm'],
      },
      'application/vnd.syncml.dm+wbxml': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['bdm'],
      },
      'application/vnd.syncml.dm+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['xdm'],
      },
      'application/vnd.syncml.dm.notification': { source: 'iana' },
      'application/vnd.syncml.dmddf+wbxml': { source: 'iana' },
      'application/vnd.syncml.dmddf+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['ddf'],
      },
      'application/vnd.syncml.dmtnds+wbxml': { source: 'iana' },
      'application/vnd.syncml.dmtnds+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.syncml.ds.notification': { source: 'iana' },
      'application/vnd.tableschema+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tao.intent-module-archive': {
        source: 'iana',
        extensions: ['tao'],
      },
      'application/vnd.tcpdump.pcap': {
        source: 'iana',
        extensions: ['pcap', 'cap', 'dmp'],
      },
      'application/vnd.think-cell.ppttc+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tmd.mediaflex.api+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tml': { source: 'iana' },
      'application/vnd.tmobile-livetv': {
        source: 'iana',
        extensions: ['tmo'],
      },
      'application/vnd.tri.onesource': { source: 'iana' },
      'application/vnd.trid.tpt': { source: 'iana', extensions: ['tpt'] },
      'application/vnd.triscape.mxs': {
        source: 'iana',
        extensions: ['mxs'],
      },
      'application/vnd.trueapp': { source: 'iana', extensions: ['tra'] },
      'application/vnd.truedoc': { source: 'iana' },
      'application/vnd.ubisoft.webplayer': { source: 'iana' },
      'application/vnd.ufdl': {
        source: 'iana',
        extensions: ['ufd', 'ufdl'],
      },
      'application/vnd.uiq.theme': {
        source: 'iana',
        extensions: ['utz'],
      },
      'application/vnd.umajin': { source: 'iana', extensions: ['umj'] },
      'application/vnd.unity': {
        source: 'iana',
        extensions: ['unityweb'],
      },
      'application/vnd.uoml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['uoml'],
      },
      'application/vnd.uplanet.alert': { source: 'iana' },
      'application/vnd.uplanet.alert-wbxml': { source: 'iana' },
      'application/vnd.uplanet.bearer-choice': { source: 'iana' },
      'application/vnd.uplanet.bearer-choice-wbxml': { source: 'iana' },
      'application/vnd.uplanet.cacheop': { source: 'iana' },
      'application/vnd.uplanet.cacheop-wbxml': { source: 'iana' },
      'application/vnd.uplanet.channel': { source: 'iana' },
      'application/vnd.uplanet.channel-wbxml': { source: 'iana' },
      'application/vnd.uplanet.list': { source: 'iana' },
      'application/vnd.uplanet.list-wbxml': { source: 'iana' },
      'application/vnd.uplanet.listcmd': { source: 'iana' },
      'application/vnd.uplanet.listcmd-wbxml': { source: 'iana' },
      'application/vnd.uplanet.signal': { source: 'iana' },
      'application/vnd.uri-map': { source: 'iana' },
      'application/vnd.valve.source.material': { source: 'iana' },
      'application/vnd.vcx': { source: 'iana', extensions: ['vcx'] },
      'application/vnd.vd-study': { source: 'iana' },
      'application/vnd.vectorworks': { source: 'iana' },
      'application/vnd.vel+json': { source: 'iana', compressible: true },
      'application/vnd.verimatrix.vcas': { source: 'iana' },
      'application/vnd.veritone.aion+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.veryant.thin': { source: 'iana' },
      'application/vnd.ves.encrypted': { source: 'iana' },
      'application/vnd.vidsoft.vidconference': { source: 'iana' },
      'application/vnd.visio': {
        source: 'iana',
        extensions: ['vsd', 'vst', 'vss', 'vsw'],
      },
      'application/vnd.visionary': {
        source: 'iana',
        extensions: ['vis'],
      },
      'application/vnd.vividence.scriptfile': { source: 'iana' },
      'application/vnd.vsf': { source: 'iana', extensions: ['vsf'] },
      'application/vnd.wap.sic': { source: 'iana' },
      'application/vnd.wap.slc': { source: 'iana' },
      'application/vnd.wap.wbxml': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['wbxml'],
      },
      'application/vnd.wap.wmlc': {
        source: 'iana',
        extensions: ['wmlc'],
      },
      'application/vnd.wap.wmlscriptc': {
        source: 'iana',
        extensions: ['wmlsc'],
      },
      'application/vnd.webturbo': { source: 'iana', extensions: ['wtb'] },
      'application/vnd.wfa.dpp': { source: 'iana' },
      'application/vnd.wfa.p2p': { source: 'iana' },
      'application/vnd.wfa.wsc': { source: 'iana' },
      'application/vnd.windows.devicepairing': { source: 'iana' },
      'application/vnd.wmc': { source: 'iana' },
      'application/vnd.wmf.bootstrap': { source: 'iana' },
      'application/vnd.wolfram.mathematica': { source: 'iana' },
      'application/vnd.wolfram.mathematica.package': { source: 'iana' },
      'application/vnd.wolfram.player': {
        source: 'iana',
        extensions: ['nbp'],
      },
      'application/vnd.wordperfect': {
        source: 'iana',
        extensions: ['wpd'],
      },
      'application/vnd.wqd': { source: 'iana', extensions: ['wqd'] },
      'application/vnd.wrq-hp3000-labelled': { source: 'iana' },
      'application/vnd.wt.stf': { source: 'iana', extensions: ['stf'] },
      'application/vnd.wv.csp+wbxml': { source: 'iana' },
      'application/vnd.wv.csp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.wv.ssp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.xacml+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.xara': { source: 'iana', extensions: ['xar'] },
      'application/vnd.xfdl': { source: 'iana', extensions: ['xfdl'] },
      'application/vnd.xfdl.webform': { source: 'iana' },
      'application/vnd.xmi+xml': { source: 'iana', compressible: true },
      'application/vnd.xmpie.cpkg': { source: 'iana' },
      'application/vnd.xmpie.dpkg': { source: 'iana' },
      'application/vnd.xmpie.plan': { source: 'iana' },
      'application/vnd.xmpie.ppkg': { source: 'iana' },
      'application/vnd.xmpie.xlim': { source: 'iana' },
      'application/vnd.yamaha.hv-dic': {
        source: 'iana',
        extensions: ['hvd'],
      },
      'application/vnd.yamaha.hv-script': {
        source: 'iana',
        extensions: ['hvs'],
      },
      'application/vnd.yamaha.hv-voice': {
        source: 'iana',
        extensions: ['hvp'],
      },
      'application/vnd.yamaha.openscoreformat': {
        source: 'iana',
        extensions: ['osf'],
      },
      'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['osfpvg'],
      },
      'application/vnd.yamaha.remote-setup': { source: 'iana' },
      'application/vnd.yamaha.smaf-audio': {
        source: 'iana',
        extensions: ['saf'],
      },
      'application/vnd.yamaha.smaf-phrase': {
        source: 'iana',
        extensions: ['spf'],
      },
      'application/vnd.yamaha.through-ngn': { source: 'iana' },
      'application/vnd.yamaha.tunnel-udpencap': { source: 'iana' },
      'application/vnd.yaoweme': { source: 'iana' },
      'application/vnd.yellowriver-custom-menu': {
        source: 'iana',
        extensions: ['cmp'],
      },
      'application/vnd.youtube.yt': { source: 'iana' },
      'application/vnd.zul': {
        source: 'iana',
        extensions: ['zir', 'zirz'],
      },
      'application/vnd.zzazz.deck+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['zaz'],
      },
      'application/voicexml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['vxml'],
      },
      'application/voucher-cms+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vq-rtcpxr': { source: 'iana' },
      'application/wasm': {
        source: 'iana',
        compressible: true,
        extensions: ['wasm'],
      },
      'application/watcherinfo+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wif'],
      },
      'application/webpush-options+json': {
        source: 'iana',
        compressible: true,
      },
      'application/whoispp-query': { source: 'iana' },
      'application/whoispp-response': { source: 'iana' },
      'application/widget': { source: 'iana', extensions: ['wgt'] },
      'application/winhlp': { source: 'apache', extensions: ['hlp'] },
      'application/wita': { source: 'iana' },
      'application/wordperfect5.1': { source: 'iana' },
      'application/wsdl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wsdl'],
      },
      'application/wspolicy+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wspolicy'],
      },
      'application/x-7z-compressed': {
        source: 'apache',
        compressible: false,
        extensions: ['7z'],
      },
      'application/x-abiword': { source: 'apache', extensions: ['abw'] },
      'application/x-ace-compressed': {
        source: 'apache',
        extensions: ['ace'],
      },
      'application/x-amf': { source: 'apache' },
      'application/x-apple-diskimage': {
        source: 'apache',
        extensions: ['dmg'],
      },
      'application/x-arj': { compressible: false, extensions: ['arj'] },
      'application/x-authorware-bin': {
        source: 'apache',
        extensions: ['aab', 'x32', 'u32', 'vox'],
      },
      'application/x-authorware-map': {
        source: 'apache',
        extensions: ['aam'],
      },
      'application/x-authorware-seg': {
        source: 'apache',
        extensions: ['aas'],
      },
      'application/x-bcpio': { source: 'apache', extensions: ['bcpio'] },
      'application/x-bdoc': { compressible: false, extensions: ['bdoc'] },
      'application/x-bittorrent': {
        source: 'apache',
        extensions: ['torrent'],
      },
      'application/x-blorb': {
        source: 'apache',
        extensions: ['blb', 'blorb'],
      },
      'application/x-bzip': {
        source: 'apache',
        compressible: false,
        extensions: ['bz'],
      },
      'application/x-bzip2': {
        source: 'apache',
        compressible: false,
        extensions: ['bz2', 'boz'],
      },
      'application/x-cbr': {
        source: 'apache',
        extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7'],
      },
      'application/x-cdlink': { source: 'apache', extensions: ['vcd'] },
      'application/x-cfs-compressed': {
        source: 'apache',
        extensions: ['cfs'],
      },
      'application/x-chat': { source: 'apache', extensions: ['chat'] },
      'application/x-chess-pgn': {
        source: 'apache',
        extensions: ['pgn'],
      },
      'application/x-chrome-extension': { extensions: ['crx'] },
      'application/x-cocoa': { source: 'nginx', extensions: ['cco'] },
      'application/x-compress': { source: 'apache' },
      'application/x-conference': {
        source: 'apache',
        extensions: ['nsc'],
      },
      'application/x-cpio': { source: 'apache', extensions: ['cpio'] },
      'application/x-csh': { source: 'apache', extensions: ['csh'] },
      'application/x-deb': { compressible: false },
      'application/x-debian-package': {
        source: 'apache',
        extensions: ['deb', 'udeb'],
      },
      'application/x-dgc-compressed': {
        source: 'apache',
        extensions: ['dgc'],
      },
      'application/x-director': {
        source: 'apache',
        extensions: [
          'dir',
          'dcr',
          'dxr',
          'cst',
          'cct',
          'cxt',
          'w3d',
          'fgd',
          'swa',
        ],
      },
      'application/x-doom': { source: 'apache', extensions: ['wad'] },
      'application/x-dtbncx+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['ncx'],
      },
      'application/x-dtbook+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['dtb'],
      },
      'application/x-dtbresource+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['res'],
      },
      'application/x-dvi': {
        source: 'apache',
        compressible: false,
        extensions: ['dvi'],
      },
      'application/x-envoy': { source: 'apache', extensions: ['evy'] },
      'application/x-eva': { source: 'apache', extensions: ['eva'] },
      'application/x-font-bdf': { source: 'apache', extensions: ['bdf'] },
      'application/x-font-dos': { source: 'apache' },
      'application/x-font-framemaker': { source: 'apache' },
      'application/x-font-ghostscript': {
        source: 'apache',
        extensions: ['gsf'],
      },
      'application/x-font-libgrx': { source: 'apache' },
      'application/x-font-linux-psf': {
        source: 'apache',
        extensions: ['psf'],
      },
      'application/x-font-pcf': { source: 'apache', extensions: ['pcf'] },
      'application/x-font-snf': { source: 'apache', extensions: ['snf'] },
      'application/x-font-speedo': { source: 'apache' },
      'application/x-font-sunos-news': { source: 'apache' },
      'application/x-font-type1': {
        source: 'apache',
        extensions: ['pfa', 'pfb', 'pfm', 'afm'],
      },
      'application/x-font-vfont': { source: 'apache' },
      'application/x-freearc': { source: 'apache', extensions: ['arc'] },
      'application/x-futuresplash': {
        source: 'apache',
        extensions: ['spl'],
      },
      'application/x-gca-compressed': {
        source: 'apache',
        extensions: ['gca'],
      },
      'application/x-glulx': { source: 'apache', extensions: ['ulx'] },
      'application/x-gnumeric': {
        source: 'apache',
        extensions: ['gnumeric'],
      },
      'application/x-gramps-xml': {
        source: 'apache',
        extensions: ['gramps'],
      },
      'application/x-gtar': { source: 'apache', extensions: ['gtar'] },
      'application/x-gzip': { source: 'apache' },
      'application/x-hdf': { source: 'apache', extensions: ['hdf'] },
      'application/x-httpd-php': {
        compressible: true,
        extensions: ['php'],
      },
      'application/x-install-instructions': {
        source: 'apache',
        extensions: ['install'],
      },
      'application/x-iso9660-image': {
        source: 'apache',
        extensions: ['iso'],
      },
      'application/x-iwork-keynote-sffkey': { extensions: ['key'] },
      'application/x-iwork-numbers-sffnumbers': {
        extensions: ['numbers'],
      },
      'application/x-iwork-pages-sffpages': { extensions: ['pages'] },
      'application/x-java-archive-diff': {
        source: 'nginx',
        extensions: ['jardiff'],
      },
      'application/x-java-jnlp-file': {
        source: 'apache',
        compressible: false,
        extensions: ['jnlp'],
      },
      'application/x-javascript': { compressible: true },
      'application/x-keepass2': { extensions: ['kdbx'] },
      'application/x-latex': {
        source: 'apache',
        compressible: false,
        extensions: ['latex'],
      },
      'application/x-lua-bytecode': { extensions: ['luac'] },
      'application/x-lzh-compressed': {
        source: 'apache',
        extensions: ['lzh', 'lha'],
      },
      'application/x-makeself': { source: 'nginx', extensions: ['run'] },
      'application/x-mie': { source: 'apache', extensions: ['mie'] },
      'application/x-mobipocket-ebook': {
        source: 'apache',
        extensions: ['prc', 'mobi'],
      },
      'application/x-mpegurl': { compressible: false },
      'application/x-ms-application': {
        source: 'apache',
        extensions: ['application'],
      },
      'application/x-ms-shortcut': {
        source: 'apache',
        extensions: ['lnk'],
      },
      'application/x-ms-wmd': { source: 'apache', extensions: ['wmd'] },
      'application/x-ms-wmz': { source: 'apache', extensions: ['wmz'] },
      'application/x-ms-xbap': { source: 'apache', extensions: ['xbap'] },
      'application/x-msaccess': { source: 'apache', extensions: ['mdb'] },
      'application/x-msbinder': { source: 'apache', extensions: ['obd'] },
      'application/x-mscardfile': {
        source: 'apache',
        extensions: ['crd'],
      },
      'application/x-msclip': { source: 'apache', extensions: ['clp'] },
      'application/x-msdos-program': { extensions: ['exe'] },
      'application/x-msdownload': {
        source: 'apache',
        extensions: ['exe', 'dll', 'com', 'bat', 'msi'],
      },
      'application/x-msmediaview': {
        source: 'apache',
        extensions: ['mvb', 'm13', 'm14'],
      },
      'application/x-msmetafile': {
        source: 'apache',
        extensions: ['wmf', 'wmz', 'emf', 'emz'],
      },
      'application/x-msmoney': { source: 'apache', extensions: ['mny'] },
      'application/x-mspublisher': {
        source: 'apache',
        extensions: ['pub'],
      },
      'application/x-msschedule': {
        source: 'apache',
        extensions: ['scd'],
      },
      'application/x-msterminal': {
        source: 'apache',
        extensions: ['trm'],
      },
      'application/x-mswrite': { source: 'apache', extensions: ['wri'] },
      'application/x-netcdf': {
        source: 'apache',
        extensions: ['nc', 'cdf'],
      },
      'application/x-ns-proxy-autoconfig': {
        compressible: true,
        extensions: ['pac'],
      },
      'application/x-nzb': { source: 'apache', extensions: ['nzb'] },
      'application/x-perl': { source: 'nginx', extensions: ['pl', 'pm'] },
      'application/x-pilot': {
        source: 'nginx',
        extensions: ['prc', 'pdb'],
      },
      'application/x-pkcs12': {
        source: 'apache',
        compressible: false,
        extensions: ['p12', 'pfx'],
      },
      'application/x-pkcs7-certificates': {
        source: 'apache',
        extensions: ['p7b', 'spc'],
      },
      'application/x-pkcs7-certreqresp': {
        source: 'apache',
        extensions: ['p7r'],
      },
      'application/x-pki-message': { source: 'iana' },
      'application/x-rar-compressed': {
        source: 'apache',
        compressible: false,
        extensions: ['rar'],
      },
      'application/x-redhat-package-manager': {
        source: 'nginx',
        extensions: ['rpm'],
      },
      'application/x-research-info-systems': {
        source: 'apache',
        extensions: ['ris'],
      },
      'application/x-sea': { source: 'nginx', extensions: ['sea'] },
      'application/x-sh': {
        source: 'apache',
        compressible: true,
        extensions: ['sh'],
      },
      'application/x-shar': { source: 'apache', extensions: ['shar'] },
      'application/x-shockwave-flash': {
        source: 'apache',
        compressible: false,
        extensions: ['swf'],
      },
      'application/x-silverlight-app': {
        source: 'apache',
        extensions: ['xap'],
      },
      'application/x-sql': { source: 'apache', extensions: ['sql'] },
      'application/x-stuffit': {
        source: 'apache',
        compressible: false,
        extensions: ['sit'],
      },
      'application/x-stuffitx': {
        source: 'apache',
        extensions: ['sitx'],
      },
      'application/x-subrip': { source: 'apache', extensions: ['srt'] },
      'application/x-sv4cpio': {
        source: 'apache',
        extensions: ['sv4cpio'],
      },
      'application/x-sv4crc': {
        source: 'apache',
        extensions: ['sv4crc'],
      },
      'application/x-t3vm-image': {
        source: 'apache',
        extensions: ['t3'],
      },
      'application/x-tads': { source: 'apache', extensions: ['gam'] },
      'application/x-tar': {
        source: 'apache',
        compressible: true,
        extensions: ['tar'],
      },
      'application/x-tcl': {
        source: 'apache',
        extensions: ['tcl', 'tk'],
      },
      'application/x-tex': { source: 'apache', extensions: ['tex'] },
      'application/x-tex-tfm': { source: 'apache', extensions: ['tfm'] },
      'application/x-texinfo': {
        source: 'apache',
        extensions: ['texinfo', 'texi'],
      },
      'application/x-tgif': { source: 'apache', extensions: ['obj'] },
      'application/x-ustar': { source: 'apache', extensions: ['ustar'] },
      'application/x-virtualbox-hdd': {
        compressible: true,
        extensions: ['hdd'],
      },
      'application/x-virtualbox-ova': {
        compressible: true,
        extensions: ['ova'],
      },
      'application/x-virtualbox-ovf': {
        compressible: true,
        extensions: ['ovf'],
      },
      'application/x-virtualbox-vbox': {
        compressible: true,
        extensions: ['vbox'],
      },
      'application/x-virtualbox-vbox-extpack': {
        compressible: false,
        extensions: ['vbox-extpack'],
      },
      'application/x-virtualbox-vdi': {
        compressible: true,
        extensions: ['vdi'],
      },
      'application/x-virtualbox-vhd': {
        compressible: true,
        extensions: ['vhd'],
      },
      'application/x-virtualbox-vmdk': {
        compressible: true,
        extensions: ['vmdk'],
      },
      'application/x-wais-source': {
        source: 'apache',
        extensions: ['src'],
      },
      'application/x-web-app-manifest+json': {
        compressible: true,
        extensions: ['webapp'],
      },
      'application/x-www-form-urlencoded': {
        source: 'iana',
        compressible: true,
      },
      'application/x-x509-ca-cert': {
        source: 'iana',
        extensions: ['der', 'crt', 'pem'],
      },
      'application/x-x509-ca-ra-cert': { source: 'iana' },
      'application/x-x509-next-ca-cert': { source: 'iana' },
      'application/x-xfig': { source: 'apache', extensions: ['fig'] },
      'application/x-xliff+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xlf'],
      },
      'application/x-xpinstall': {
        source: 'apache',
        compressible: false,
        extensions: ['xpi'],
      },
      'application/x-xz': { source: 'apache', extensions: ['xz'] },
      'application/x-zmachine': {
        source: 'apache',
        extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8'],
      },
      'application/x400-bp': { source: 'iana' },
      'application/xacml+xml': { source: 'iana', compressible: true },
      'application/xaml+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xaml'],
      },
      'application/xcap-att+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xav'],
      },
      'application/xcap-caps+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xca'],
      },
      'application/xcap-diff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdf'],
      },
      'application/xcap-el+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xel'],
      },
      'application/xcap-error+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xcap-ns+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xns'],
      },
      'application/xcon-conference-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xcon-conference-info-diff+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xenc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xenc'],
      },
      'application/xhtml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xhtml', 'xht'],
      },
      'application/xhtml-voice+xml': {
        source: 'apache',
        compressible: true,
      },
      'application/xliff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xlf'],
      },
      'application/xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xml', 'xsl', 'xsd', 'rng'],
      },
      'application/xml-dtd': {
        source: 'iana',
        compressible: true,
        extensions: ['dtd'],
      },
      'application/xml-external-parsed-entity': { source: 'iana' },
      'application/xml-patch+xml': { source: 'iana', compressible: true },
      'application/xmpp+xml': { source: 'iana', compressible: true },
      'application/xop+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xop'],
      },
      'application/xproc+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xpl'],
      },
      'application/xslt+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xsl', 'xslt'],
      },
      'application/xspf+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xspf'],
      },
      'application/xv+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mxml', 'xhvml', 'xvml', 'xvm'],
      },
      'application/yang': { source: 'iana', extensions: ['yang'] },
      'application/yang-data+json': {
        source: 'iana',
        compressible: true,
      },
      'application/yang-data+xml': { source: 'iana', compressible: true },
      'application/yang-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/yang-patch+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/yin+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['yin'],
      },
      'application/zip': {
        source: 'iana',
        compressible: false,
        extensions: ['zip'],
      },
      'application/zlib': { source: 'iana' },
      'application/zstd': { source: 'iana' },
      'audio/1d-interleaved-parityfec': { source: 'iana' },
      'audio/32kadpcm': { source: 'iana' },
      'audio/3gpp': {
        source: 'iana',
        compressible: false,
        extensions: ['3gpp'],
      },
      'audio/3gpp2': { source: 'iana' },
      'audio/aac': { source: 'iana' },
      'audio/ac3': { source: 'iana' },
      'audio/adpcm': { source: 'apache', extensions: ['adp'] },
      'audio/amr': { source: 'iana', extensions: ['amr'] },
      'audio/amr-wb': { source: 'iana' },
      'audio/amr-wb+': { source: 'iana' },
      'audio/aptx': { source: 'iana' },
      'audio/asc': { source: 'iana' },
      'audio/atrac-advanced-lossless': { source: 'iana' },
      'audio/atrac-x': { source: 'iana' },
      'audio/atrac3': { source: 'iana' },
      'audio/basic': {
        source: 'iana',
        compressible: false,
        extensions: ['au', 'snd'],
      },
      'audio/bv16': { source: 'iana' },
      'audio/bv32': { source: 'iana' },
      'audio/clearmode': { source: 'iana' },
      'audio/cn': { source: 'iana' },
      'audio/dat12': { source: 'iana' },
      'audio/dls': { source: 'iana' },
      'audio/dsr-es201108': { source: 'iana' },
      'audio/dsr-es202050': { source: 'iana' },
      'audio/dsr-es202211': { source: 'iana' },
      'audio/dsr-es202212': { source: 'iana' },
      'audio/dv': { source: 'iana' },
      'audio/dvi4': { source: 'iana' },
      'audio/eac3': { source: 'iana' },
      'audio/encaprtp': { source: 'iana' },
      'audio/evrc': { source: 'iana' },
      'audio/evrc-qcp': { source: 'iana' },
      'audio/evrc0': { source: 'iana' },
      'audio/evrc1': { source: 'iana' },
      'audio/evrcb': { source: 'iana' },
      'audio/evrcb0': { source: 'iana' },
      'audio/evrcb1': { source: 'iana' },
      'audio/evrcnw': { source: 'iana' },
      'audio/evrcnw0': { source: 'iana' },
      'audio/evrcnw1': { source: 'iana' },
      'audio/evrcwb': { source: 'iana' },
      'audio/evrcwb0': { source: 'iana' },
      'audio/evrcwb1': { source: 'iana' },
      'audio/evs': { source: 'iana' },
      'audio/flexfec': { source: 'iana' },
      'audio/fwdred': { source: 'iana' },
      'audio/g711-0': { source: 'iana' },
      'audio/g719': { source: 'iana' },
      'audio/g722': { source: 'iana' },
      'audio/g7221': { source: 'iana' },
      'audio/g723': { source: 'iana' },
      'audio/g726-16': { source: 'iana' },
      'audio/g726-24': { source: 'iana' },
      'audio/g726-32': { source: 'iana' },
      'audio/g726-40': { source: 'iana' },
      'audio/g728': { source: 'iana' },
      'audio/g729': { source: 'iana' },
      'audio/g7291': { source: 'iana' },
      'audio/g729d': { source: 'iana' },
      'audio/g729e': { source: 'iana' },
      'audio/gsm': { source: 'iana' },
      'audio/gsm-efr': { source: 'iana' },
      'audio/gsm-hr-08': { source: 'iana' },
      'audio/ilbc': { source: 'iana' },
      'audio/ip-mr_v2.5': { source: 'iana' },
      'audio/isac': { source: 'apache' },
      'audio/l16': { source: 'iana' },
      'audio/l20': { source: 'iana' },
      'audio/l24': { source: 'iana', compressible: false },
      'audio/l8': { source: 'iana' },
      'audio/lpc': { source: 'iana' },
      'audio/melp': { source: 'iana' },
      'audio/melp1200': { source: 'iana' },
      'audio/melp2400': { source: 'iana' },
      'audio/melp600': { source: 'iana' },
      'audio/mhas': { source: 'iana' },
      'audio/midi': {
        source: 'apache',
        extensions: ['mid', 'midi', 'kar', 'rmi'],
      },
      'audio/mobile-xmf': { source: 'iana', extensions: ['mxmf'] },
      'audio/mp3': { compressible: false, extensions: ['mp3'] },
      'audio/mp4': {
        source: 'iana',
        compressible: false,
        extensions: ['m4a', 'mp4a'],
      },
      'audio/mp4a-latm': { source: 'iana' },
      'audio/mpa': { source: 'iana' },
      'audio/mpa-robust': { source: 'iana' },
      'audio/mpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a'],
      },
      'audio/mpeg4-generic': { source: 'iana' },
      'audio/musepack': { source: 'apache' },
      'audio/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['oga', 'ogg', 'spx', 'opus'],
      },
      'audio/opus': { source: 'iana' },
      'audio/parityfec': { source: 'iana' },
      'audio/pcma': { source: 'iana' },
      'audio/pcma-wb': { source: 'iana' },
      'audio/pcmu': { source: 'iana' },
      'audio/pcmu-wb': { source: 'iana' },
      'audio/prs.sid': { source: 'iana' },
      'audio/qcelp': { source: 'iana' },
      'audio/raptorfec': { source: 'iana' },
      'audio/red': { source: 'iana' },
      'audio/rtp-enc-aescm128': { source: 'iana' },
      'audio/rtp-midi': { source: 'iana' },
      'audio/rtploopback': { source: 'iana' },
      'audio/rtx': { source: 'iana' },
      'audio/s3m': { source: 'apache', extensions: ['s3m'] },
      'audio/scip': { source: 'iana' },
      'audio/silk': { source: 'apache', extensions: ['sil'] },
      'audio/smv': { source: 'iana' },
      'audio/smv-qcp': { source: 'iana' },
      'audio/smv0': { source: 'iana' },
      'audio/sofa': { source: 'iana' },
      'audio/sp-midi': { source: 'iana' },
      'audio/speex': { source: 'iana' },
      'audio/t140c': { source: 'iana' },
      'audio/t38': { source: 'iana' },
      'audio/telephone-event': { source: 'iana' },
      'audio/tetra_acelp': { source: 'iana' },
      'audio/tetra_acelp_bb': { source: 'iana' },
      'audio/tone': { source: 'iana' },
      'audio/tsvcis': { source: 'iana' },
      'audio/uemclip': { source: 'iana' },
      'audio/ulpfec': { source: 'iana' },
      'audio/usac': { source: 'iana' },
      'audio/vdvi': { source: 'iana' },
      'audio/vmr-wb': { source: 'iana' },
      'audio/vnd.3gpp.iufp': { source: 'iana' },
      'audio/vnd.4sb': { source: 'iana' },
      'audio/vnd.audiokoz': { source: 'iana' },
      'audio/vnd.celp': { source: 'iana' },
      'audio/vnd.cisco.nse': { source: 'iana' },
      'audio/vnd.cmles.radio-events': { source: 'iana' },
      'audio/vnd.cns.anp1': { source: 'iana' },
      'audio/vnd.cns.inf1': { source: 'iana' },
      'audio/vnd.dece.audio': {
        source: 'iana',
        extensions: ['uva', 'uvva'],
      },
      'audio/vnd.digital-winds': { source: 'iana', extensions: ['eol'] },
      'audio/vnd.dlna.adts': { source: 'iana' },
      'audio/vnd.dolby.heaac.1': { source: 'iana' },
      'audio/vnd.dolby.heaac.2': { source: 'iana' },
      'audio/vnd.dolby.mlp': { source: 'iana' },
      'audio/vnd.dolby.mps': { source: 'iana' },
      'audio/vnd.dolby.pl2': { source: 'iana' },
      'audio/vnd.dolby.pl2x': { source: 'iana' },
      'audio/vnd.dolby.pl2z': { source: 'iana' },
      'audio/vnd.dolby.pulse.1': { source: 'iana' },
      'audio/vnd.dra': { source: 'iana', extensions: ['dra'] },
      'audio/vnd.dts': { source: 'iana', extensions: ['dts'] },
      'audio/vnd.dts.hd': { source: 'iana', extensions: ['dtshd'] },
      'audio/vnd.dts.uhd': { source: 'iana' },
      'audio/vnd.dvb.file': { source: 'iana' },
      'audio/vnd.everad.plj': { source: 'iana' },
      'audio/vnd.hns.audio': { source: 'iana' },
      'audio/vnd.lucent.voice': { source: 'iana', extensions: ['lvp'] },
      'audio/vnd.ms-playready.media.pya': {
        source: 'iana',
        extensions: ['pya'],
      },
      'audio/vnd.nokia.mobile-xmf': { source: 'iana' },
      'audio/vnd.nortel.vbk': { source: 'iana' },
      'audio/vnd.nuera.ecelp4800': {
        source: 'iana',
        extensions: ['ecelp4800'],
      },
      'audio/vnd.nuera.ecelp7470': {
        source: 'iana',
        extensions: ['ecelp7470'],
      },
      'audio/vnd.nuera.ecelp9600': {
        source: 'iana',
        extensions: ['ecelp9600'],
      },
      'audio/vnd.octel.sbc': { source: 'iana' },
      'audio/vnd.presonus.multitrack': { source: 'iana' },
      'audio/vnd.qcelp': { source: 'iana' },
      'audio/vnd.rhetorex.32kadpcm': { source: 'iana' },
      'audio/vnd.rip': { source: 'iana', extensions: ['rip'] },
      'audio/vnd.rn-realaudio': { compressible: false },
      'audio/vnd.sealedmedia.softseal.mpeg': { source: 'iana' },
      'audio/vnd.vmx.cvsd': { source: 'iana' },
      'audio/vnd.wave': { compressible: false },
      'audio/vorbis': { source: 'iana', compressible: false },
      'audio/vorbis-config': { source: 'iana' },
      'audio/wav': { compressible: false, extensions: ['wav'] },
      'audio/wave': { compressible: false, extensions: ['wav'] },
      'audio/webm': {
        source: 'apache',
        compressible: false,
        extensions: ['weba'],
      },
      'audio/x-aac': {
        source: 'apache',
        compressible: false,
        extensions: ['aac'],
      },
      'audio/x-aiff': {
        source: 'apache',
        extensions: ['aif', 'aiff', 'aifc'],
      },
      'audio/x-caf': {
        source: 'apache',
        compressible: false,
        extensions: ['caf'],
      },
      'audio/x-flac': { source: 'apache', extensions: ['flac'] },
      'audio/x-m4a': { source: 'nginx', extensions: ['m4a'] },
      'audio/x-matroska': { source: 'apache', extensions: ['mka'] },
      'audio/x-mpegurl': { source: 'apache', extensions: ['m3u'] },
      'audio/x-ms-wax': { source: 'apache', extensions: ['wax'] },
      'audio/x-ms-wma': { source: 'apache', extensions: ['wma'] },
      'audio/x-pn-realaudio': {
        source: 'apache',
        extensions: ['ram', 'ra'],
      },
      'audio/x-pn-realaudio-plugin': {
        source: 'apache',
        extensions: ['rmp'],
      },
      'audio/x-realaudio': { source: 'nginx', extensions: ['ra'] },
      'audio/x-tta': { source: 'apache' },
      'audio/x-wav': { source: 'apache', extensions: ['wav'] },
      'audio/xm': { source: 'apache', extensions: ['xm'] },
      'chemical/x-cdx': { source: 'apache', extensions: ['cdx'] },
      'chemical/x-cif': { source: 'apache', extensions: ['cif'] },
      'chemical/x-cmdf': { source: 'apache', extensions: ['cmdf'] },
      'chemical/x-cml': { source: 'apache', extensions: ['cml'] },
      'chemical/x-csml': { source: 'apache', extensions: ['csml'] },
      'chemical/x-pdb': { source: 'apache' },
      'chemical/x-xyz': { source: 'apache', extensions: ['xyz'] },
      'font/collection': { source: 'iana', extensions: ['ttc'] },
      'font/otf': {
        source: 'iana',
        compressible: true,
        extensions: ['otf'],
      },
      'font/sfnt': { source: 'iana' },
      'font/ttf': {
        source: 'iana',
        compressible: true,
        extensions: ['ttf'],
      },
      'font/woff': { source: 'iana', extensions: ['woff'] },
      'font/woff2': { source: 'iana', extensions: ['woff2'] },
      'image/aces': { source: 'iana', extensions: ['exr'] },
      'image/apng': { compressible: false, extensions: ['apng'] },
      'image/avci': { source: 'iana', extensions: ['avci'] },
      'image/avcs': { source: 'iana', extensions: ['avcs'] },
      'image/avif': {
        source: 'iana',
        compressible: false,
        extensions: ['avif'],
      },
      'image/bmp': {
        source: 'iana',
        compressible: true,
        extensions: ['bmp'],
      },
      'image/cgm': { source: 'iana', extensions: ['cgm'] },
      'image/dicom-rle': { source: 'iana', extensions: ['drle'] },
      'image/emf': { source: 'iana', extensions: ['emf'] },
      'image/fits': { source: 'iana', extensions: ['fits'] },
      'image/g3fax': { source: 'iana', extensions: ['g3'] },
      'image/gif': {
        source: 'iana',
        compressible: false,
        extensions: ['gif'],
      },
      'image/heic': { source: 'iana', extensions: ['heic'] },
      'image/heic-sequence': { source: 'iana', extensions: ['heics'] },
      'image/heif': { source: 'iana', extensions: ['heif'] },
      'image/heif-sequence': { source: 'iana', extensions: ['heifs'] },
      'image/hej2k': { source: 'iana', extensions: ['hej2'] },
      'image/hsj2': { source: 'iana', extensions: ['hsj2'] },
      'image/ief': { source: 'iana', extensions: ['ief'] },
      'image/jls': { source: 'iana', extensions: ['jls'] },
      'image/jp2': {
        source: 'iana',
        compressible: false,
        extensions: ['jp2', 'jpg2'],
      },
      'image/jpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['jpeg', 'jpg', 'jpe'],
      },
      'image/jph': { source: 'iana', extensions: ['jph'] },
      'image/jphc': { source: 'iana', extensions: ['jhc'] },
      'image/jpm': {
        source: 'iana',
        compressible: false,
        extensions: ['jpm'],
      },
      'image/jpx': {
        source: 'iana',
        compressible: false,
        extensions: ['jpx', 'jpf'],
      },
      'image/jxr': { source: 'iana', extensions: ['jxr'] },
      'image/jxra': { source: 'iana', extensions: ['jxra'] },
      'image/jxrs': { source: 'iana', extensions: ['jxrs'] },
      'image/jxs': { source: 'iana', extensions: ['jxs'] },
      'image/jxsc': { source: 'iana', extensions: ['jxsc'] },
      'image/jxsi': { source: 'iana', extensions: ['jxsi'] },
      'image/jxss': { source: 'iana', extensions: ['jxss'] },
      'image/ktx': { source: 'iana', extensions: ['ktx'] },
      'image/ktx2': { source: 'iana', extensions: ['ktx2'] },
      'image/naplps': { source: 'iana' },
      'image/pjpeg': { compressible: false },
      'image/png': {
        source: 'iana',
        compressible: false,
        extensions: ['png'],
      },
      'image/prs.btif': { source: 'iana', extensions: ['btif'] },
      'image/prs.pti': { source: 'iana', extensions: ['pti'] },
      'image/pwg-raster': { source: 'iana' },
      'image/sgi': { source: 'apache', extensions: ['sgi'] },
      'image/svg+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['svg', 'svgz'],
      },
      'image/t38': { source: 'iana', extensions: ['t38'] },
      'image/tiff': {
        source: 'iana',
        compressible: false,
        extensions: ['tif', 'tiff'],
      },
      'image/tiff-fx': { source: 'iana', extensions: ['tfx'] },
      'image/vnd.adobe.photoshop': {
        source: 'iana',
        compressible: true,
        extensions: ['psd'],
      },
      'image/vnd.airzip.accelerator.azv': {
        source: 'iana',
        extensions: ['azv'],
      },
      'image/vnd.cns.inf2': { source: 'iana' },
      'image/vnd.dece.graphic': {
        source: 'iana',
        extensions: ['uvi', 'uvvi', 'uvg', 'uvvg'],
      },
      'image/vnd.djvu': { source: 'iana', extensions: ['djvu', 'djv'] },
      'image/vnd.dvb.subtitle': { source: 'iana', extensions: ['sub'] },
      'image/vnd.dwg': { source: 'iana', extensions: ['dwg'] },
      'image/vnd.dxf': { source: 'iana', extensions: ['dxf'] },
      'image/vnd.fastbidsheet': { source: 'iana', extensions: ['fbs'] },
      'image/vnd.fpx': { source: 'iana', extensions: ['fpx'] },
      'image/vnd.fst': { source: 'iana', extensions: ['fst'] },
      'image/vnd.fujixerox.edmics-mmr': {
        source: 'iana',
        extensions: ['mmr'],
      },
      'image/vnd.fujixerox.edmics-rlc': {
        source: 'iana',
        extensions: ['rlc'],
      },
      'image/vnd.globalgraphics.pgb': { source: 'iana' },
      'image/vnd.microsoft.icon': {
        source: 'iana',
        compressible: true,
        extensions: ['ico'],
      },
      'image/vnd.mix': { source: 'iana' },
      'image/vnd.mozilla.apng': { source: 'iana' },
      'image/vnd.ms-dds': { compressible: true, extensions: ['dds'] },
      'image/vnd.ms-modi': { source: 'iana', extensions: ['mdi'] },
      'image/vnd.ms-photo': { source: 'apache', extensions: ['wdp'] },
      'image/vnd.net-fpx': { source: 'iana', extensions: ['npx'] },
      'image/vnd.pco.b16': { source: 'iana', extensions: ['b16'] },
      'image/vnd.radiance': { source: 'iana' },
      'image/vnd.sealed.png': { source: 'iana' },
      'image/vnd.sealedmedia.softseal.gif': { source: 'iana' },
      'image/vnd.sealedmedia.softseal.jpg': { source: 'iana' },
      'image/vnd.svf': { source: 'iana' },
      'image/vnd.tencent.tap': { source: 'iana', extensions: ['tap'] },
      'image/vnd.valve.source.texture': {
        source: 'iana',
        extensions: ['vtf'],
      },
      'image/vnd.wap.wbmp': { source: 'iana', extensions: ['wbmp'] },
      'image/vnd.xiff': { source: 'iana', extensions: ['xif'] },
      'image/vnd.zbrush.pcx': { source: 'iana', extensions: ['pcx'] },
      'image/webp': { source: 'apache', extensions: ['webp'] },
      'image/wmf': { source: 'iana', extensions: ['wmf'] },
      'image/x-3ds': { source: 'apache', extensions: ['3ds'] },
      'image/x-cmu-raster': { source: 'apache', extensions: ['ras'] },
      'image/x-cmx': { source: 'apache', extensions: ['cmx'] },
      'image/x-freehand': {
        source: 'apache',
        extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7'],
      },
      'image/x-icon': {
        source: 'apache',
        compressible: true,
        extensions: ['ico'],
      },
      'image/x-jng': { source: 'nginx', extensions: ['jng'] },
      'image/x-mrsid-image': { source: 'apache', extensions: ['sid'] },
      'image/x-ms-bmp': {
        source: 'nginx',
        compressible: true,
        extensions: ['bmp'],
      },
      'image/x-pcx': { source: 'apache', extensions: ['pcx'] },
      'image/x-pict': { source: 'apache', extensions: ['pic', 'pct'] },
      'image/x-portable-anymap': {
        source: 'apache',
        extensions: ['pnm'],
      },
      'image/x-portable-bitmap': {
        source: 'apache',
        extensions: ['pbm'],
      },
      'image/x-portable-graymap': {
        source: 'apache',
        extensions: ['pgm'],
      },
      'image/x-portable-pixmap': {
        source: 'apache',
        extensions: ['ppm'],
      },
      'image/x-rgb': { source: 'apache', extensions: ['rgb'] },
      'image/x-tga': { source: 'apache', extensions: ['tga'] },
      'image/x-xbitmap': { source: 'apache', extensions: ['xbm'] },
      'image/x-xcf': { compressible: false },
      'image/x-xpixmap': { source: 'apache', extensions: ['xpm'] },
      'image/x-xwindowdump': { source: 'apache', extensions: ['xwd'] },
      'message/cpim': { source: 'iana' },
      'message/delivery-status': { source: 'iana' },
      'message/disposition-notification': {
        source: 'iana',
        extensions: ['disposition-notification'],
      },
      'message/external-body': { source: 'iana' },
      'message/feedback-report': { source: 'iana' },
      'message/global': { source: 'iana', extensions: ['u8msg'] },
      'message/global-delivery-status': {
        source: 'iana',
        extensions: ['u8dsn'],
      },
      'message/global-disposition-notification': {
        source: 'iana',
        extensions: ['u8mdn'],
      },
      'message/global-headers': { source: 'iana', extensions: ['u8hdr'] },
      'message/http': { source: 'iana', compressible: false },
      'message/imdn+xml': { source: 'iana', compressible: true },
      'message/news': { source: 'iana' },
      'message/partial': { source: 'iana', compressible: false },
      'message/rfc822': {
        source: 'iana',
        compressible: true,
        extensions: ['eml', 'mime'],
      },
      'message/s-http': { source: 'iana' },
      'message/sip': { source: 'iana' },
      'message/sipfrag': { source: 'iana' },
      'message/tracking-status': { source: 'iana' },
      'message/vnd.si.simp': { source: 'iana' },
      'message/vnd.wfa.wsc': { source: 'iana', extensions: ['wsc'] },
      'model/3mf': { source: 'iana', extensions: ['3mf'] },
      'model/e57': { source: 'iana' },
      'model/gltf+json': {
        source: 'iana',
        compressible: true,
        extensions: ['gltf'],
      },
      'model/gltf-binary': {
        source: 'iana',
        compressible: true,
        extensions: ['glb'],
      },
      'model/iges': {
        source: 'iana',
        compressible: false,
        extensions: ['igs', 'iges'],
      },
      'model/mesh': {
        source: 'iana',
        compressible: false,
        extensions: ['msh', 'mesh', 'silo'],
      },
      'model/mtl': { source: 'iana', extensions: ['mtl'] },
      'model/obj': { source: 'iana', extensions: ['obj'] },
      'model/step': { source: 'iana' },
      'model/step+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['stpx'],
      },
      'model/step+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['stpz'],
      },
      'model/step-xml+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['stpxz'],
      },
      'model/stl': { source: 'iana', extensions: ['stl'] },
      'model/vnd.collada+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dae'],
      },
      'model/vnd.dwf': { source: 'iana', extensions: ['dwf'] },
      'model/vnd.flatland.3dml': { source: 'iana' },
      'model/vnd.gdl': { source: 'iana', extensions: ['gdl'] },
      'model/vnd.gs-gdl': { source: 'apache' },
      'model/vnd.gs.gdl': { source: 'iana' },
      'model/vnd.gtw': { source: 'iana', extensions: ['gtw'] },
      'model/vnd.moml+xml': { source: 'iana', compressible: true },
      'model/vnd.mts': { source: 'iana', extensions: ['mts'] },
      'model/vnd.opengex': { source: 'iana', extensions: ['ogex'] },
      'model/vnd.parasolid.transmit.binary': {
        source: 'iana',
        extensions: ['x_b'],
      },
      'model/vnd.parasolid.transmit.text': {
        source: 'iana',
        extensions: ['x_t'],
      },
      'model/vnd.pytha.pyox': { source: 'iana' },
      'model/vnd.rosette.annotated-data-model': { source: 'iana' },
      'model/vnd.sap.vds': { source: 'iana', extensions: ['vds'] },
      'model/vnd.usdz+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['usdz'],
      },
      'model/vnd.valve.source.compiled-map': {
        source: 'iana',
        extensions: ['bsp'],
      },
      'model/vnd.vtu': { source: 'iana', extensions: ['vtu'] },
      'model/vrml': {
        source: 'iana',
        compressible: false,
        extensions: ['wrl', 'vrml'],
      },
      'model/x3d+binary': {
        source: 'apache',
        compressible: false,
        extensions: ['x3db', 'x3dbz'],
      },
      'model/x3d+fastinfoset': { source: 'iana', extensions: ['x3db'] },
      'model/x3d+vrml': {
        source: 'apache',
        compressible: false,
        extensions: ['x3dv', 'x3dvz'],
      },
      'model/x3d+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['x3d', 'x3dz'],
      },
      'model/x3d-vrml': { source: 'iana', extensions: ['x3dv'] },
      'multipart/alternative': { source: 'iana', compressible: false },
      'multipart/appledouble': { source: 'iana' },
      'multipart/byteranges': { source: 'iana' },
      'multipart/digest': { source: 'iana' },
      'multipart/encrypted': { source: 'iana', compressible: false },
      'multipart/form-data': { source: 'iana', compressible: false },
      'multipart/header-set': { source: 'iana' },
      'multipart/mixed': { source: 'iana' },
      'multipart/multilingual': { source: 'iana' },
      'multipart/parallel': { source: 'iana' },
      'multipart/related': { source: 'iana', compressible: false },
      'multipart/report': { source: 'iana' },
      'multipart/signed': { source: 'iana', compressible: false },
      'multipart/vnd.bint.med-plus': { source: 'iana' },
      'multipart/voice-message': { source: 'iana' },
      'multipart/x-mixed-replace': { source: 'iana' },
      'text/1d-interleaved-parityfec': { source: 'iana' },
      'text/cache-manifest': {
        source: 'iana',
        compressible: true,
        extensions: ['appcache', 'manifest'],
      },
      'text/calendar': { source: 'iana', extensions: ['ics', 'ifb'] },
      'text/calender': { compressible: true },
      'text/cmd': { compressible: true },
      'text/coffeescript': { extensions: ['coffee', 'litcoffee'] },
      'text/cql': { source: 'iana' },
      'text/cql-expression': { source: 'iana' },
      'text/cql-identifier': { source: 'iana' },
      'text/css': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['css'],
      },
      'text/csv': {
        source: 'iana',
        compressible: true,
        extensions: ['csv'],
      },
      'text/csv-schema': { source: 'iana' },
      'text/directory': { source: 'iana' },
      'text/dns': { source: 'iana' },
      'text/ecmascript': { source: 'iana' },
      'text/encaprtp': { source: 'iana' },
      'text/enriched': { source: 'iana' },
      'text/fhirpath': { source: 'iana' },
      'text/flexfec': { source: 'iana' },
      'text/fwdred': { source: 'iana' },
      'text/gff3': { source: 'iana' },
      'text/grammar-ref-list': { source: 'iana' },
      'text/html': {
        source: 'iana',
        compressible: true,
        extensions: ['html', 'htm', 'shtml'],
      },
      'text/jade': { extensions: ['jade'] },
      'text/javascript': { source: 'iana', compressible: true },
      'text/jcr-cnd': { source: 'iana' },
      'text/jsx': { compressible: true, extensions: ['jsx'] },
      'text/less': { compressible: true, extensions: ['less'] },
      'text/markdown': {
        source: 'iana',
        compressible: true,
        extensions: ['markdown', 'md'],
      },
      'text/mathml': { source: 'nginx', extensions: ['mml'] },
      'text/mdx': { compressible: true, extensions: ['mdx'] },
      'text/mizar': { source: 'iana' },
      'text/n3': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['n3'],
      },
      'text/parameters': { source: 'iana', charset: 'UTF-8' },
      'text/parityfec': { source: 'iana' },
      'text/plain': {
        source: 'iana',
        compressible: true,
        extensions: ['txt', 'text', 'conf', 'def', 'list', 'log', 'in', 'ini'],
      },
      'text/provenance-notation': { source: 'iana', charset: 'UTF-8' },
      'text/prs.fallenstein.rst': { source: 'iana' },
      'text/prs.lines.tag': { source: 'iana', extensions: ['dsc'] },
      'text/prs.prop.logic': { source: 'iana' },
      'text/raptorfec': { source: 'iana' },
      'text/red': { source: 'iana' },
      'text/rfc822-headers': { source: 'iana' },
      'text/richtext': {
        source: 'iana',
        compressible: true,
        extensions: ['rtx'],
      },
      'text/rtf': {
        source: 'iana',
        compressible: true,
        extensions: ['rtf'],
      },
      'text/rtp-enc-aescm128': { source: 'iana' },
      'text/rtploopback': { source: 'iana' },
      'text/rtx': { source: 'iana' },
      'text/sgml': { source: 'iana', extensions: ['sgml', 'sgm'] },
      'text/shaclc': { source: 'iana' },
      'text/shex': { source: 'iana', extensions: ['shex'] },
      'text/slim': { extensions: ['slim', 'slm'] },
      'text/spdx': { source: 'iana', extensions: ['spdx'] },
      'text/strings': { source: 'iana' },
      'text/stylus': { extensions: ['stylus', 'styl'] },
      'text/t140': { source: 'iana' },
      'text/tab-separated-values': {
        source: 'iana',
        compressible: true,
        extensions: ['tsv'],
      },
      'text/troff': {
        source: 'iana',
        extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms'],
      },
      'text/turtle': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['ttl'],
      },
      'text/ulpfec': { source: 'iana' },
      'text/uri-list': {
        source: 'iana',
        compressible: true,
        extensions: ['uri', 'uris', 'urls'],
      },
      'text/vcard': {
        source: 'iana',
        compressible: true,
        extensions: ['vcard'],
      },
      'text/vnd.a': { source: 'iana' },
      'text/vnd.abc': { source: 'iana' },
      'text/vnd.ascii-art': { source: 'iana' },
      'text/vnd.curl': { source: 'iana', extensions: ['curl'] },
      'text/vnd.curl.dcurl': { source: 'apache', extensions: ['dcurl'] },
      'text/vnd.curl.mcurl': { source: 'apache', extensions: ['mcurl'] },
      'text/vnd.curl.scurl': { source: 'apache', extensions: ['scurl'] },
      'text/vnd.debian.copyright': { source: 'iana', charset: 'UTF-8' },
      'text/vnd.dmclientscript': { source: 'iana' },
      'text/vnd.dvb.subtitle': { source: 'iana', extensions: ['sub'] },
      'text/vnd.esmertec.theme-descriptor': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/vnd.familysearch.gedcom': {
        source: 'iana',
        extensions: ['ged'],
      },
      'text/vnd.ficlab.flt': { source: 'iana' },
      'text/vnd.fly': { source: 'iana', extensions: ['fly'] },
      'text/vnd.fmi.flexstor': { source: 'iana', extensions: ['flx'] },
      'text/vnd.gml': { source: 'iana' },
      'text/vnd.graphviz': { source: 'iana', extensions: ['gv'] },
      'text/vnd.hans': { source: 'iana' },
      'text/vnd.hgl': { source: 'iana' },
      'text/vnd.in3d.3dml': { source: 'iana', extensions: ['3dml'] },
      'text/vnd.in3d.spot': { source: 'iana', extensions: ['spot'] },
      'text/vnd.iptc.newsml': { source: 'iana' },
      'text/vnd.iptc.nitf': { source: 'iana' },
      'text/vnd.latex-z': { source: 'iana' },
      'text/vnd.motorola.reflex': { source: 'iana' },
      'text/vnd.ms-mediapackage': { source: 'iana' },
      'text/vnd.net2phone.commcenter.command': { source: 'iana' },
      'text/vnd.radisys.msml-basic-layout': { source: 'iana' },
      'text/vnd.senx.warpscript': { source: 'iana' },
      'text/vnd.si.uricatalogue': { source: 'iana' },
      'text/vnd.sosi': { source: 'iana' },
      'text/vnd.sun.j2me.app-descriptor': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['jad'],
      },
      'text/vnd.trolltech.linguist': { source: 'iana', charset: 'UTF-8' },
      'text/vnd.wap.si': { source: 'iana' },
      'text/vnd.wap.sl': { source: 'iana' },
      'text/vnd.wap.wml': { source: 'iana', extensions: ['wml'] },
      'text/vnd.wap.wmlscript': { source: 'iana', extensions: ['wmls'] },
      'text/vtt': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['vtt'],
      },
      'text/x-asm': { source: 'apache', extensions: ['s', 'asm'] },
      'text/x-c': {
        source: 'apache',
        extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic'],
      },
      'text/x-component': { source: 'nginx', extensions: ['htc'] },
      'text/x-fortran': {
        source: 'apache',
        extensions: ['f', 'for', 'f77', 'f90'],
      },
      'text/x-gwt-rpc': { compressible: true },
      'text/x-handlebars-template': { extensions: ['hbs'] },
      'text/x-java-source': { source: 'apache', extensions: ['java'] },
      'text/x-jquery-tmpl': { compressible: true },
      'text/x-lua': { extensions: ['lua'] },
      'text/x-markdown': { compressible: true, extensions: ['mkd'] },
      'text/x-nfo': { source: 'apache', extensions: ['nfo'] },
      'text/x-opml': { source: 'apache', extensions: ['opml'] },
      'text/x-org': { compressible: true, extensions: ['org'] },
      'text/x-pascal': { source: 'apache', extensions: ['p', 'pas'] },
      'text/x-processing': { compressible: true, extensions: ['pde'] },
      'text/x-sass': { extensions: ['sass'] },
      'text/x-scss': { extensions: ['scss'] },
      'text/x-setext': { source: 'apache', extensions: ['etx'] },
      'text/x-sfv': { source: 'apache', extensions: ['sfv'] },
      'text/x-suse-ymp': { compressible: true, extensions: ['ymp'] },
      'text/x-uuencode': { source: 'apache', extensions: ['uu'] },
      'text/x-vcalendar': { source: 'apache', extensions: ['vcs'] },
      'text/x-vcard': { source: 'apache', extensions: ['vcf'] },
      'text/xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xml'],
      },
      'text/xml-external-parsed-entity': { source: 'iana' },
      'text/yaml': { compressible: true, extensions: ['yaml', 'yml'] },
      'video/1d-interleaved-parityfec': { source: 'iana' },
      'video/3gpp': { source: 'iana', extensions: ['3gp', '3gpp'] },
      'video/3gpp-tt': { source: 'iana' },
      'video/3gpp2': { source: 'iana', extensions: ['3g2'] },
      'video/av1': { source: 'iana' },
      'video/bmpeg': { source: 'iana' },
      'video/bt656': { source: 'iana' },
      'video/celb': { source: 'iana' },
      'video/dv': { source: 'iana' },
      'video/encaprtp': { source: 'iana' },
      'video/ffv1': { source: 'iana' },
      'video/flexfec': { source: 'iana' },
      'video/h261': { source: 'iana', extensions: ['h261'] },
      'video/h263': { source: 'iana', extensions: ['h263'] },
      'video/h263-1998': { source: 'iana' },
      'video/h263-2000': { source: 'iana' },
      'video/h264': { source: 'iana', extensions: ['h264'] },
      'video/h264-rcdo': { source: 'iana' },
      'video/h264-svc': { source: 'iana' },
      'video/h265': { source: 'iana' },
      'video/iso.segment': { source: 'iana', extensions: ['m4s'] },
      'video/jpeg': { source: 'iana', extensions: ['jpgv'] },
      'video/jpeg2000': { source: 'iana' },
      'video/jpm': { source: 'apache', extensions: ['jpm', 'jpgm'] },
      'video/jxsv': { source: 'iana' },
      'video/mj2': { source: 'iana', extensions: ['mj2', 'mjp2'] },
      'video/mp1s': { source: 'iana' },
      'video/mp2p': { source: 'iana' },
      'video/mp2t': { source: 'iana', extensions: ['ts'] },
      'video/mp4': {
        source: 'iana',
        compressible: false,
        extensions: ['mp4', 'mp4v', 'mpg4'],
      },
      'video/mp4v-es': { source: 'iana' },
      'video/mpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v'],
      },
      'video/mpeg4-generic': { source: 'iana' },
      'video/mpv': { source: 'iana' },
      'video/nv': { source: 'iana' },
      'video/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['ogv'],
      },
      'video/parityfec': { source: 'iana' },
      'video/pointer': { source: 'iana' },
      'video/quicktime': {
        source: 'iana',
        compressible: false,
        extensions: ['qt', 'mov'],
      },
      'video/raptorfec': { source: 'iana' },
      'video/raw': { source: 'iana' },
      'video/rtp-enc-aescm128': { source: 'iana' },
      'video/rtploopback': { source: 'iana' },
      'video/rtx': { source: 'iana' },
      'video/scip': { source: 'iana' },
      'video/smpte291': { source: 'iana' },
      'video/smpte292m': { source: 'iana' },
      'video/ulpfec': { source: 'iana' },
      'video/vc1': { source: 'iana' },
      'video/vc2': { source: 'iana' },
      'video/vnd.cctv': { source: 'iana' },
      'video/vnd.dece.hd': {
        source: 'iana',
        extensions: ['uvh', 'uvvh'],
      },
      'video/vnd.dece.mobile': {
        source: 'iana',
        extensions: ['uvm', 'uvvm'],
      },
      'video/vnd.dece.mp4': { source: 'iana' },
      'video/vnd.dece.pd': {
        source: 'iana',
        extensions: ['uvp', 'uvvp'],
      },
      'video/vnd.dece.sd': {
        source: 'iana',
        extensions: ['uvs', 'uvvs'],
      },
      'video/vnd.dece.video': {
        source: 'iana',
        extensions: ['uvv', 'uvvv'],
      },
      'video/vnd.directv.mpeg': { source: 'iana' },
      'video/vnd.directv.mpeg-tts': { source: 'iana' },
      'video/vnd.dlna.mpeg-tts': { source: 'iana' },
      'video/vnd.dvb.file': { source: 'iana', extensions: ['dvb'] },
      'video/vnd.fvt': { source: 'iana', extensions: ['fvt'] },
      'video/vnd.hns.video': { source: 'iana' },
      'video/vnd.iptvforum.1dparityfec-1010': { source: 'iana' },
      'video/vnd.iptvforum.1dparityfec-2005': { source: 'iana' },
      'video/vnd.iptvforum.2dparityfec-1010': { source: 'iana' },
      'video/vnd.iptvforum.2dparityfec-2005': { source: 'iana' },
      'video/vnd.iptvforum.ttsavc': { source: 'iana' },
      'video/vnd.iptvforum.ttsmpeg2': { source: 'iana' },
      'video/vnd.motorola.video': { source: 'iana' },
      'video/vnd.motorola.videop': { source: 'iana' },
      'video/vnd.mpegurl': { source: 'iana', extensions: ['mxu', 'm4u'] },
      'video/vnd.ms-playready.media.pyv': {
        source: 'iana',
        extensions: ['pyv'],
      },
      'video/vnd.nokia.interleaved-multimedia': { source: 'iana' },
      'video/vnd.nokia.mp4vr': { source: 'iana' },
      'video/vnd.nokia.videovoip': { source: 'iana' },
      'video/vnd.objectvideo': { source: 'iana' },
      'video/vnd.radgamettools.bink': { source: 'iana' },
      'video/vnd.radgamettools.smacker': { source: 'iana' },
      'video/vnd.sealed.mpeg1': { source: 'iana' },
      'video/vnd.sealed.mpeg4': { source: 'iana' },
      'video/vnd.sealed.swf': { source: 'iana' },
      'video/vnd.sealedmedia.softseal.mov': { source: 'iana' },
      'video/vnd.uvvu.mp4': {
        source: 'iana',
        extensions: ['uvu', 'uvvu'],
      },
      'video/vnd.vivo': { source: 'iana', extensions: ['viv'] },
      'video/vnd.youtube.yt': { source: 'iana' },
      'video/vp8': { source: 'iana' },
      'video/vp9': { source: 'iana' },
      'video/webm': {
        source: 'apache',
        compressible: false,
        extensions: ['webm'],
      },
      'video/x-f4v': { source: 'apache', extensions: ['f4v'] },
      'video/x-fli': { source: 'apache', extensions: ['fli'] },
      'video/x-flv': {
        source: 'apache',
        compressible: false,
        extensions: ['flv'],
      },
      'video/x-m4v': { source: 'apache', extensions: ['m4v'] },
      'video/x-matroska': {
        source: 'apache',
        compressible: false,
        extensions: ['mkv', 'mk3d', 'mks'],
      },
      'video/x-mng': { source: 'apache', extensions: ['mng'] },
      'video/x-ms-asf': { source: 'apache', extensions: ['asf', 'asx'] },
      'video/x-ms-vob': { source: 'apache', extensions: ['vob'] },
      'video/x-ms-wm': { source: 'apache', extensions: ['wm'] },
      'video/x-ms-wmv': {
        source: 'apache',
        compressible: false,
        extensions: ['wmv'],
      },
      'video/x-ms-wmx': { source: 'apache', extensions: ['wmx'] },
      'video/x-ms-wvx': { source: 'apache', extensions: ['wvx'] },
      'video/x-msvideo': { source: 'apache', extensions: ['avi'] },
      'video/x-sgi-movie': { source: 'apache', extensions: ['movie'] },
      'video/x-smv': { source: 'apache', extensions: ['smv'] },
      'x-conference/x-cooltalk': {
        source: 'apache',
        extensions: ['ice'],
      },
      'x-shader/x-fragment': { compressible: true },
      'x-shader/x-vertex': { compressible: true },
    }
  },
})
var require_mime_db = __commonJS2({
  '../../node_modules/mime-db/index.js'(exports, module) {
    module.exports = require_db()
  },
})
var runtime_exports = {}
__export(runtime_exports, { SandpackRuntime: () => SandpackRuntime })
function getTemplate(pkg, modules) {
  if (!pkg) {
    return 'static'
  }
  var _a22 = pkg.dependencies,
    dependencies = _a22 === void 0 ? {} : _a22,
    _b22 = pkg.devDependencies,
    devDependencies = _b22 === void 0 ? {} : _b22
  var totalDependencies = __spreadArray(
    __spreadArray([], Object.keys(dependencies), true),
    Object.keys(devDependencies),
    true,
  )
  var moduleNames = Object.keys(modules)
  var adonis = ['@adonisjs/framework', '@adonisjs/core']
  if (
    totalDependencies.some(function (dep) {
      return adonis.indexOf(dep) > -1
    })
  ) {
    return 'adonis'
  }
  var nuxt = ['nuxt', 'nuxt-edge', 'nuxt-ts', 'nuxt-ts-edge', 'nuxt3']
  if (
    totalDependencies.some(function (dep) {
      return nuxt.indexOf(dep) > -1
    })
  ) {
    return 'nuxt'
  }
  if (totalDependencies.indexOf('next') > -1) {
    return 'next'
  }
  var apollo = [
    'apollo-server',
    'apollo-server-express',
    'apollo-server-hapi',
    'apollo-server-koa',
    'apollo-server-lambda',
    'apollo-server-micro',
  ]
  if (
    totalDependencies.some(function (dep) {
      return apollo.indexOf(dep) > -1
    })
  ) {
    return 'apollo'
  }
  if (totalDependencies.indexOf('mdx-deck') > -1) {
    return 'mdx-deck'
  }
  if (totalDependencies.indexOf('gridsome') > -1) {
    return 'gridsome'
  }
  if (totalDependencies.indexOf('vuepress') > -1) {
    return 'vuepress'
  }
  if (totalDependencies.indexOf('ember-cli') > -1) {
    return 'ember'
  }
  if (totalDependencies.indexOf('sapper') > -1) {
    return 'sapper'
  }
  if (totalDependencies.indexOf('gatsby') > -1) {
    return 'gatsby'
  }
  if (totalDependencies.indexOf('quasar') > -1) {
    return 'quasar'
  }
  if (totalDependencies.indexOf('@docusaurus/core') > -1) {
    return 'docusaurus'
  }
  if (totalDependencies.indexOf('remix') > -1) {
    return 'remix'
  }
  if (totalDependencies.indexOf('astro') > -1) {
    return 'node'
  }
  if (
    moduleNames.some(function (m2) {
      return m2.endsWith('.re')
    })
  ) {
    return 'reason'
  }
  var parcel = ['parcel-bundler', 'parcel']
  if (
    totalDependencies.some(function (dep) {
      return parcel.indexOf(dep) > -1
    })
  ) {
    return 'parcel'
  }
  var dojo = ['@dojo/core', '@dojo/framework']
  if (
    totalDependencies.some(function (dep) {
      return dojo.indexOf(dep) > -1
    })
  ) {
    return '@dojo/cli-create-app'
  }
  if (
    totalDependencies.indexOf('@nestjs/core') > -1 ||
    totalDependencies.indexOf('@nestjs/common') > -1
  ) {
    return 'nest'
  }
  if (totalDependencies.indexOf('react-styleguidist') > -1) {
    return 'styleguidist'
  }
  if (totalDependencies.indexOf('react-scripts') > -1) {
    return 'create-react-app'
  }
  if (totalDependencies.indexOf('react-scripts-ts') > -1) {
    return 'create-react-app-typescript'
  }
  if (totalDependencies.indexOf('@angular/core') > -1) {
    return 'angular-cli'
  }
  if (totalDependencies.indexOf('preact-cli') > -1) {
    return 'preact-cli'
  }
  if (
    totalDependencies.indexOf('@sveltech/routify') > -1 ||
    totalDependencies.indexOf('@roxi/routify') > -1
  ) {
    return 'node'
  }
  if (totalDependencies.indexOf('vite') > -1) {
    return 'node'
  }
  if (totalDependencies.indexOf('@frontity/core') > -1) {
    return 'node'
  }
  if (totalDependencies.indexOf('svelte') > -1) {
    return 'svelte'
  }
  if (totalDependencies.indexOf('vue') > -1) {
    return 'vue-cli'
  }
  if (totalDependencies.indexOf('cx') > -1) {
    return 'cxjs'
  }
  var nodeDeps = [
    'express',
    'koa',
    'nodemon',
    'ts-node',
    '@tensorflow/tfjs-node',
    'webpack-dev-server',
    'snowpack',
  ]
  if (
    totalDependencies.some(function (dep) {
      return nodeDeps.indexOf(dep) > -1
    })
  ) {
    return 'node'
  }
  if (Object.keys(dependencies).length >= MAX_CLIENT_DEPENDENCY_COUNT) {
    return 'node'
  }
  return void 0
}
function getExtension(filepath) {
  var parts = filepath.split('.')
  if (parts.length <= 1) {
    return ''
  } else {
    var ext2 = parts[parts.length - 1]
    return ext2
  }
}
var import_mime_db
var Protocol
var IFrameProtocol
var extensionMap
var entries
var _a$1
var mimetype
var entry
var extensions
var ext
var _b
var extensions_1
var _i
var entries_1
var EXTENSIONS_MAP
var CHANNEL_NAME
var MAX_CLIENT_DEPENDENCY_COUNT
var _a
var SUFFIX_PLACEHOLDER
var BUNDLER_URL
var SandpackRuntime
var init_runtime = __esm({
  '../../node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs'() {
    init_utils_52664384()
    init_dist()
    init_base_80a1f760()
    import_mime_db = __toESM2(require_mime_db(), 1)
    init_lib()
    Protocol =
      /** @class */
      (function () {
        function Protocol2(type, handleMessage, protocol) {
          var _this = this
          this.type = type
          this.handleMessage = handleMessage
          this.protocol = protocol
          this._disposeMessageListener = this.protocol.channelListen(
            function (msg) {
              return __awaiter(_this, void 0, void 0, function () {
                var message, result, response, err_1, response
                return __generator(this, function (_a22) {
                  switch (_a22.label) {
                    case 0:
                      if (!(msg.type === this.getTypeId() && msg.method))
                        return [3, 4]
                      message = msg
                      _a22.label = 1
                    case 1:
                      _a22.trys.push([1, 3, , 4])
                      return [4, this.handleMessage(message)]
                    case 2:
                      result = _a22.sent()
                      response = {
                        type: this.getTypeId(),
                        msgId: message.msgId,
                        result,
                      }
                      this.protocol.dispatch(response)
                      return [3, 4]
                    case 3:
                      err_1 = _a22.sent()
                      response = {
                        type: this.getTypeId(),
                        msgId: message.msgId,
                        error: {
                          message: err_1.message,
                        },
                      }
                      this.protocol.dispatch(response)
                      return [3, 4]
                    case 4:
                      return [2]
                  }
                })
              })
            },
          )
        }
        Protocol2.prototype.getTypeId = function () {
          return 'protocol-'.concat(this.type)
        }
        Protocol2.prototype.dispose = function () {
          this._disposeMessageListener()
        }
        return Protocol2
      })()
    IFrameProtocol =
      /** @class */
      (function () {
        function IFrameProtocol2(iframe, origin) {
          this.globalListeners = {}
          this.globalListenersCount = 0
          this.channelListeners = {}
          this.channelListenersCount = 0
          this.channelId = Math.floor(Math.random() * 1e6)
          this.frameWindow = iframe.contentWindow
          this.origin = origin
          this.globalListeners = []
          this.channelListeners = []
          this.eventListener = this.eventListener.bind(this)
          if (typeof window !== 'undefined') {
            window.addEventListener('message', this.eventListener)
          }
        }
        IFrameProtocol2.prototype.cleanup = function () {
          window.removeEventListener('message', this.eventListener)
          this.globalListeners = {}
          this.channelListeners = {}
          this.globalListenersCount = 0
          this.channelListenersCount = 0
        }
        IFrameProtocol2.prototype.register = function () {
          if (!this.frameWindow) {
            return
          }
          this.frameWindow.postMessage(
            {
              type: 'register-frame',
              origin: document.location.origin,
              id: this.channelId,
            },
            this.origin,
          )
        }
        IFrameProtocol2.prototype.dispatch = function (message) {
          if (!this.frameWindow) {
            return
          }
          this.frameWindow.postMessage(
            __assign({ $id: this.channelId, codesandbox: true }, message),
            this.origin,
          )
        }
        IFrameProtocol2.prototype.globalListen = function (listener) {
          var _this = this
          if (typeof listener !== 'function') {
            return function () {
              return
            }
          }
          var listenerId = this.globalListenersCount
          this.globalListeners[listenerId] = listener
          this.globalListenersCount++
          return function () {
            delete _this.globalListeners[listenerId]
          }
        }
        IFrameProtocol2.prototype.channelListen = function (listener) {
          var _this = this
          if (typeof listener !== 'function') {
            return function () {
              return
            }
          }
          var listenerId = this.channelListenersCount
          this.channelListeners[listenerId] = listener
          this.channelListenersCount++
          return function () {
            delete _this.channelListeners[listenerId]
          }
        }
        IFrameProtocol2.prototype.eventListener = function (evt) {
          if (evt.source !== this.frameWindow) {
            return
          }
          var message = evt.data
          if (!message.codesandbox) {
            return
          }
          Object.values(this.globalListeners).forEach(function (listener) {
            return listener(message)
          })
          if (message.$id !== this.channelId) {
            return
          }
          Object.values(this.channelListeners).forEach(function (listener) {
            return listener(message)
          })
        }
        return IFrameProtocol2
      })()
    extensionMap = /* @__PURE__ */ new Map()
    entries = Object.entries(import_mime_db.default)
    for (_i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      ;(_a$1 = entries_1[_i]), (mimetype = _a$1[0]), (entry = _a$1[1])
      if (!entry.extensions) {
        continue
      }
      extensions = entry.extensions
      if (extensions.length) {
        for (
          _b = 0, extensions_1 = extensions;
          _b < extensions_1.length;
          _b++
        ) {
          ext = extensions_1[_b]
          extensionMap.set(ext, mimetype)
        }
      }
    }
    EXTENSIONS_MAP = extensionMap
    CHANNEL_NAME = '$CSB_RELAY'
    MAX_CLIENT_DEPENDENCY_COUNT = 50
    SUFFIX_PLACEHOLDER = '-{{suffix}}'
    BUNDLER_URL = 'https://'
      .concat(
        (_a = '2.19.8') === null || _a === void 0
          ? void 0
          : _a.replace(/\./g, '-'),
      )
      .concat(SUFFIX_PLACEHOLDER, '-sandpack.codesandbox.io/')
    SandpackRuntime =
      /** @class */
      (function (_super) {
        __extends(SandpackRuntime2, _super)
        function SandpackRuntime2(selector, sandboxSetup, options) {
          if (options === void 0) {
            options = {}
          }
          var _this = _super.call(this, selector, sandboxSetup, options) || this
          _this.getTranspilerContext = function () {
            return new Promise(function (resolve) {
              var unsubscribe = _this.listen(function (message) {
                if (message.type === 'transpiler-context') {
                  resolve(message.data)
                  unsubscribe()
                }
              })
              _this.dispatch({ type: 'get-transpiler-context' })
            })
          }
          _this.getTranspiledFiles = function () {
            return new Promise(function (resolve) {
              var unsubscribe = _this.listen(function (message) {
                if (message.type === 'all-modules') {
                  resolve(message.data)
                  unsubscribe()
                }
              })
              _this.dispatch({ type: 'get-modules' })
            })
          }
          _this.bundlerURL = _this.createBundlerURL()
          _this.bundlerState = void 0
          _this.errors = []
          _this.status = 'initializing'
          if (typeof selector === 'string') {
            _this.selector = selector
            var element = document.querySelector(selector)
            nullthrows(
              element,
              "The element '".concat(selector, "' was not found"),
            )
            _this.element = element
            _this.iframe = document.createElement('iframe')
            _this.initializeElement()
          } else {
            _this.element = selector
            _this.iframe = selector
          }
          if (!_this.iframe.getAttribute('sandbox')) {
            _this.iframe.setAttribute(
              'sandbox',
              'allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock',
            )
            _this.iframe.setAttribute(
              'allow',
              'accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-read; clipboard-write; xr-spatial-tracking;',
            )
          }
          _this.setLocationURLIntoIFrame()
          _this.iframeProtocol = new IFrameProtocol(
            _this.iframe,
            _this.bundlerURL,
          )
          _this.unsubscribeGlobalListener = _this.iframeProtocol.globalListen(
            function (mes) {
              if (mes.type !== 'initialized' || !_this.iframe.contentWindow) {
                return
              }
              _this.iframeProtocol.register()
              if (_this.options.fileResolver) {
                _this.fileResolverProtocol = new Protocol(
                  'fs',
                  function (data) {
                    return __awaiter(_this, void 0, void 0, function () {
                      return __generator(this, function (_a22) {
                        if (data.method === 'isFile') {
                          return [
                            2,
                            this.options.fileResolver.isFile(data.params[0]),
                          ]
                        } else if (data.method === 'readFile') {
                          return [
                            2,
                            this.options.fileResolver.readFile(data.params[0]),
                          ]
                        } else {
                          throw new Error('Method not supported')
                        }
                      })
                    })
                  },
                  _this.iframeProtocol,
                )
              }
              _this.updateSandbox(_this.sandboxSetup, true)
            },
          )
          _this.unsubscribeChannelListener = _this.iframeProtocol.channelListen(
            function (mes) {
              switch (mes.type) {
                case 'start': {
                  _this.errors = []
                  break
                }
                case 'status': {
                  _this.status = mes.status
                  break
                }
                case 'action': {
                  if (mes.action === 'show-error') {
                    _this.errors = __spreadArray(
                      __spreadArray([], _this.errors, true),
                      [extractErrorDetails(mes)],
                      false,
                    )
                  }
                  break
                }
                case 'done': {
                  _this.status = 'done'
                  break
                }
                case 'state': {
                  _this.bundlerState = mes.state
                  break
                }
              }
            },
          )
          if (options.experimental_enableServiceWorker) {
            _this.serviceWorkerHandshake()
          }
          return _this
        }
        SandpackRuntime2.prototype.createBundlerURL = function () {
          var _a22
          var bundlerURL = this.options.bundlerURL || BUNDLER_URL
          if (this.options.bundlerURL) {
            return bundlerURL
          }
          if (this.options.teamId) {
            bundlerURL =
              bundlerURL.replace(
                'https://',
                'https://' + this.options.teamId + '-',
              ) + '?cache='.concat(Date.now())
          }
          if (this.options.experimental_enableServiceWorker) {
            var suffixes = []
            suffixes.push(Math.random().toString(36).slice(4))
            bundlerURL = bundlerURL.replace(
              SUFFIX_PLACEHOLDER,
              '-'.concat(
                (_a22 = this.options.experimental_stableServiceWorkerId) !==
                  null && _a22 !== void 0
                  ? _a22
                  : suffixes.join('-'),
              ),
            )
          } else {
            bundlerURL = bundlerURL.replace(SUFFIX_PLACEHOLDER, '')
          }
          return bundlerURL
        }
        SandpackRuntime2.prototype.serviceWorkerHandshake = function () {
          var _this = this
          var channel = new MessageChannel()
          var iframeContentWindow = this.iframe.contentWindow
          if (!iframeContentWindow) {
            throw new Error('Could not get iframe contentWindow')
          }
          var port = channel.port1
          port.onmessage = function (evt) {
            if (
              typeof evt.data === 'object' &&
              evt.data.$channel === CHANNEL_NAME
            ) {
              switch (evt.data.$type) {
                case 'preview/ready':
                  break
                case 'preview/request':
                  _this.handleWorkerRequest(evt.data, port)
                  break
              }
            }
          }
          var sendMessage = function () {
            var initMsg = {
              $channel: CHANNEL_NAME,
              $type: 'preview/init',
            }
            iframeContentWindow.postMessage(initMsg, '*', [channel.port2])
            _this.iframe.removeEventListener('load', sendMessage)
          }
          this.iframe.addEventListener('load', sendMessage)
        }
        SandpackRuntime2.prototype.handleWorkerRequest = function (
          request,
          port,
        ) {
          return __awaiter(this, void 0, void 0, function () {
            var notFound,
              filepath_1,
              headers,
              files,
              file,
              modulesFromManager,
              body,
              extension,
              foundMimetype,
              responseMessage,
              err_1
            return __generator(this, function (_a22) {
              switch (_a22.label) {
                case 0:
                  notFound = function () {
                    var responseMessage2 = {
                      $channel: CHANNEL_NAME,
                      $type: 'preview/response',
                      id: request.id,
                      headers: {
                        'Content-Type': 'text/html; charset=utf-8',
                      },
                      status: 404,
                      body: 'File not found',
                    }
                    port.postMessage(responseMessage2)
                  }
                  _a22.label = 1
                case 1:
                  _a22.trys.push([1, 4, , 5])
                  filepath_1 = new URL(request.url, this.bundlerURL).pathname
                  headers = {}
                  files = this.getFiles()
                  file = files[filepath_1]
                  if (!!file) return [3, 3]
                  return [4, this.getTranspiledFiles()]
                case 2:
                  modulesFromManager = _a22.sent()
                  file = modulesFromManager.find(function (item) {
                    return item.path.endsWith(filepath_1)
                  })
                  if (!file) {
                    notFound()
                    return [2]
                  }
                  _a22.label = 3
                case 3:
                  body = file.code
                  if (!headers['Content-Type']) {
                    extension = getExtension(filepath_1)
                    foundMimetype = EXTENSIONS_MAP.get(extension)
                    if (foundMimetype) {
                      headers['Content-Type'] = foundMimetype
                    }
                  }
                  responseMessage = {
                    $channel: CHANNEL_NAME,
                    $type: 'preview/response',
                    id: request.id,
                    headers,
                    status: 200,
                    body,
                  }
                  port.postMessage(responseMessage)
                  return [3, 5]
                case 4:
                  err_1 = _a22.sent()
                  console.error(err_1)
                  notFound()
                  return [3, 5]
                case 5:
                  return [2]
              }
            })
          })
        }
        SandpackRuntime2.prototype.setLocationURLIntoIFrame = function () {
          var _a22
          var urlSource = this.options.startRoute
            ? new URL(this.options.startRoute, this.bundlerURL).toString()
            : this.bundlerURL
          ;(_a22 = this.iframe.contentWindow) === null || _a22 === void 0
            ? void 0
            : _a22.location.replace(urlSource)
          this.iframe.src = urlSource
        }
        SandpackRuntime2.prototype.destroy = function () {
          this.unsubscribeChannelListener()
          this.unsubscribeGlobalListener()
          this.iframeProtocol.cleanup()
        }
        SandpackRuntime2.prototype.updateOptions = function (options) {
          if (!dequal(this.options, options)) {
            this.options = options
            this.updateSandbox()
          }
        }
        SandpackRuntime2.prototype.updateSandbox = function (
          sandboxSetup,
          isInitializationCompile,
        ) {
          var _a22, _b22, _c2, _d
          if (sandboxSetup === void 0) {
            sandboxSetup = this.sandboxSetup
          }
          this.sandboxSetup = __assign(
            __assign({}, this.sandboxSetup),
            sandboxSetup,
          )
          var files = this.getFiles()
          var modules = Object.keys(files).reduce(function (prev, next) {
            var _a3
            return __assign(
              __assign({}, prev),
              ((_a3 = {}),
              (_a3[next] = {
                code: files[next].code,
                path: next,
              }),
              _a3),
            )
          }, {})
          var packageJSON = JSON.parse(
            createPackageJSON(
              this.sandboxSetup.dependencies,
              this.sandboxSetup.devDependencies,
              this.sandboxSetup.entry,
            ),
          )
          try {
            packageJSON = JSON.parse(files['/package.json'].code)
          } catch (e2) {
            console.error(
              createError('could not parse package.json file: ' + e2.message),
            )
          }
          var normalizedModules = Object.keys(files).reduce(function (
            prev,
            next,
          ) {
            var _a3
            return __assign(
              __assign({}, prev),
              ((_a3 = {}),
              (_a3[next] = {
                content: files[next].code,
                path: next,
              }),
              _a3),
            )
          }, {})
          this.dispatch(
            __assign(__assign({}, this.options), {
              type: 'compile',
              codesandbox: true,
              version: 3,
              isInitializationCompile,
              modules,
              reactDevTools: this.options.reactDevTools,
              externalResources: this.options.externalResources || [],
              hasFileResolver: Boolean(this.options.fileResolver),
              disableDependencyPreprocessing:
                this.sandboxSetup.disableDependencyPreprocessing,
              experimental_enableServiceWorker:
                this.options.experimental_enableServiceWorker,
              template:
                this.sandboxSetup.template ||
                getTemplate(packageJSON, normalizedModules),
              showOpenInCodeSandbox:
                (_a22 = this.options.showOpenInCodeSandbox) !== null &&
                _a22 !== void 0
                  ? _a22
                  : true,
              showErrorScreen:
                (_b22 = this.options.showErrorScreen) !== null &&
                _b22 !== void 0
                  ? _b22
                  : true,
              showLoadingScreen:
                (_c2 = this.options.showLoadingScreen) !== null &&
                _c2 !== void 0
                  ? _c2
                  : false,
              skipEval: this.options.skipEval || false,
              clearConsoleDisabled: !this.options.clearConsoleOnFirstCompile,
              logLevel:
                (_d = this.options.logLevel) !== null && _d !== void 0
                  ? _d
                  : SandpackLogLevel.Info,
              customNpmRegistries: this.options.customNpmRegistries,
              teamId: this.options.teamId,
              sandboxId: this.options.sandboxId,
            }),
          )
        }
        SandpackRuntime2.prototype.dispatch = function (message) {
          if (message.type === 'refresh') {
            this.setLocationURLIntoIFrame()
            if (this.options.experimental_enableServiceWorker) {
              this.serviceWorkerHandshake()
            }
          }
          this.iframeProtocol.dispatch(message)
        }
        SandpackRuntime2.prototype.listen = function (listener) {
          return this.iframeProtocol.channelListen(listener)
        }
        SandpackRuntime2.prototype.getCodeSandboxURL = function () {
          var files = this.getFiles()
          var paramFiles = Object.keys(files).reduce(function (prev, next) {
            var _a22
            return __assign(
              __assign({}, prev),
              ((_a22 = {}),
              (_a22[next.replace('/', '')] = {
                content: files[next].code,
                isBinary: false,
              }),
              _a22),
            )
          }, {})
          return fetch(
            'https://codesandbox.io/api/v1/sandboxes/define?json=1',
            {
              method: 'POST',
              body: JSON.stringify({ files: paramFiles }),
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
              },
            },
          )
            .then(function (x2) {
              return x2.json()
            })
            .then(function (res) {
              return {
                sandboxId: res.sandbox_id,
                editorUrl: 'https://codesandbox.io/s/'.concat(res.sandbox_id),
                embedUrl: 'https://codesandbox.io/embed/'.concat(
                  res.sandbox_id,
                ),
              }
            })
        }
        SandpackRuntime2.prototype.getFiles = function () {
          var sandboxSetup = this.sandboxSetup
          if (sandboxSetup.files['/package.json'] === void 0) {
            return addPackageJSONIfNeeded(
              sandboxSetup.files,
              sandboxSetup.dependencies,
              sandboxSetup.devDependencies,
              sandboxSetup.entry,
            )
          }
          return this.sandboxSetup.files
        }
        SandpackRuntime2.prototype.initializeElement = function () {
          this.iframe.style.border = '0'
          this.iframe.style.width = this.options.width || '100%'
          this.iframe.style.height = this.options.height || '100%'
          this.iframe.style.overflow = 'hidden'
          nullthrows(
            this.element.parentNode,
            'The given iframe does not have a parent.',
          )
          this.element.parentNode.replaceChild(this.iframe, this.element)
        }
        return SandpackRuntime2
      })(SandpackClient)
  },
})
init_utils_52664384()
init_utils_52664384()
init_lib()
function loadSandpackClient(iframeSelector, sandboxSetup, options) {
  var _a22
  if (options === void 0) {
    options = {}
  }
  return __awaiter(this, void 0, void 0, function () {
    var template, Client, _b22
    return __generator(this, function (_c2) {
      switch (_c2.label) {
        case 0:
          template =
            (_a22 = sandboxSetup.template) !== null && _a22 !== void 0
              ? _a22
              : 'parcel'
          _b22 = template
          switch (_b22) {
            case 'node':
              return [3, 1]
            case 'static':
              return [3, 3]
          }
          return [3, 5]
        case 1:
          return [
            4,
            Promise.resolve()
              .then(() => (init_node(), node_exports))
              .then(function (m2) {
                return m2.SandpackNode
              }),
          ]
        case 2:
          Client = _c2.sent()
          return [3, 7]
        case 3:
          return [
            4,
            Promise.resolve()
              .then(() => (init_index_599aeaf7(), index_599aeaf7_exports))
              .then(function (m2) {
                return m2.SandpackStatic
              }),
          ]
        case 4:
          Client = _c2.sent()
          return [3, 7]
        case 5:
          return [
            4,
            Promise.resolve()
              .then(() => (init_runtime(), runtime_exports))
              .then(function (m2) {
                return m2.SandpackRuntime
              }),
          ]
        case 6:
          Client = _c2.sent()
          _c2.label = 7
        case 7:
          return [2, new Client(iframeSelector, sandboxSetup, options)]
      }
    })
  })
}

// /:https://framerusercontent.com/modules/peSgSa05KnLqaA8FHu9n/gkkQ64ZyuNEtI37xQPwx/codemirror_commands.js
var toggleComment = (target) => {
  let { state } = target,
    line = state.doc.lineAt(state.selection.main.from),
    config = getConfig(target.state, line.from)
  return config.line
    ? toggleLineComment(target)
    : config.block
      ? toggleBlockCommentByLine(target)
      : false
}
function command(f2, option) {
  return ({ state, dispatch }) => {
    if (state.readOnly) return false
    let tr = f2(option, state)
    if (!tr) return false
    dispatch(state.update(tr))
    return true
  }
}
var toggleLineComment = /* @__PURE__ */ command(changeLineComment, 0)
var toggleBlockComment = /* @__PURE__ */ command(changeBlockComment, 0)
var toggleBlockCommentByLine = /* @__PURE__ */ command(
  (o2, s2) => changeBlockComment(o2, s2, selectedLineRanges(s2)),
  0,
)
function getConfig(state, pos) {
  let data = state.languageDataAt('commentTokens', pos)
  return data.length ? data[0] : {}
}
var SearchMargin = 50
function findBlockComment(state, { open, close }, from, to) {
  let textBefore = state.sliceDoc(from - SearchMargin, from)
  let textAfter = state.sliceDoc(to, to + SearchMargin)
  let spaceBefore = /\s*$/.exec(textBefore)[0].length,
    spaceAfter = /^\s*/.exec(textAfter)[0].length
  let beforeOff = textBefore.length - spaceBefore
  if (
    textBefore.slice(beforeOff - open.length, beforeOff) == open &&
    textAfter.slice(spaceAfter, spaceAfter + close.length) == close
  ) {
    return {
      open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to + spaceAfter, margin: spaceAfter && 1 },
    }
  }
  let startText, endText
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to)
  } else {
    startText = state.sliceDoc(from, from + SearchMargin)
    endText = state.sliceDoc(to - SearchMargin, to)
  }
  let startSpace = /^\s*/.exec(startText)[0].length,
    endSpace = /\s*$/.exec(endText)[0].length
  let endOff = endText.length - endSpace - close.length
  if (
    startText.slice(startSpace, startSpace + open.length) == open &&
    endText.slice(endOff, endOff + close.length) == close
  ) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0,
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0,
      },
    }
  }
  return null
}
function selectedLineRanges(state) {
  let ranges = []
  for (let r3 of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r3.from)
    let toLine = r3.to <= fromLine.to ? fromLine : state.doc.lineAt(r3.to)
    let last = ranges.length - 1
    if (last >= 0 && ranges[last].to > fromLine.from)
      ranges[last].to = toLine.to
    else
      ranges.push({
        from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length,
        to: toLine.to,
      })
  }
  return ranges
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map((r3) => getConfig(state, r3.from).block)
  if (!tokens.every((c3) => c3)) return null
  let comments = ranges.map((r3, i3) =>
    findBlockComment(state, tokens[i3], r3.from, r3.to),
  )
  if (option != 2 && !comments.every((c3) => c3)) {
    return {
      changes: state.changes(
        ranges.map((range, i3) => {
          if (comments[i3]) return []
          return [
            { from: range.from, insert: tokens[i3].open + ' ' },
            { from: range.to, insert: ' ' + tokens[i3].close },
          ]
        }),
      ),
    }
  } else if (option != 1 && comments.some((c3) => c3)) {
    let changes = []
    for (let i3 = 0, comment; i3 < comments.length; i3++)
      if ((comment = comments[i3])) {
        let token = tokens[i3],
          { open, close } = comment
        changes.push(
          {
            from: open.pos - token.open.length,
            to: open.pos + open.margin,
          },
          {
            from: close.pos - close.margin,
            to: close.pos + token.close.length,
          },
        )
      }
    return { changes }
  }
  return null
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = []
  let prevLine = -1
  for (let { from, to } of ranges) {
    let startI = lines.length,
      minIndent = 1e9
    let token = getConfig(state, from).line
    if (!token) continue
    for (let pos = from; pos <= to; ) {
      let line = state.doc.lineAt(pos)
      if (line.from > prevLine && (from == to || to > line.from)) {
        prevLine = line.from
        let indent = /^\s*/.exec(line.text)[0].length
        let empty = indent == line.length
        let comment =
          line.text.slice(indent, indent + token.length) == token ? indent : -1
        if (indent < line.text.length && indent < minIndent) minIndent = indent
        lines.push({
          line,
          comment,
          token,
          indent,
          empty,
          single: false,
        })
      }
      pos = line.to + 1
    }
    if (minIndent < 1e9) {
      for (let i3 = startI; i3 < lines.length; i3++)
        if (lines[i3].indent < lines[i3].line.text.length)
          lines[i3].indent = minIndent
    }
    if (lines.length == startI + 1) lines[startI].single = true
  }
  if (
    option != 2 &&
    lines.some((l2) => l2.comment < 0 && (!l2.empty || l2.single))
  ) {
    let changes = []
    for (let { line, token, indent, empty, single } of lines)
      if (single || !empty)
        changes.push({ from: line.from + indent, insert: token + ' ' })
    let changeSet = state.changes(changes)
    return {
      changes: changeSet,
      selection: state.selection.map(changeSet, 1),
    }
  } else if (option != 1 && lines.some((l2) => l2.comment >= 0)) {
    let changes = []
    for (let { line, comment, token } of lines)
      if (comment >= 0) {
        let from = line.from + comment,
          to = from + token.length
        if (line.text[to - line.from] == ' ') to++
        changes.push({ from, to })
      }
    return { changes }
  }
  return null
}
var fromHistory = /* @__PURE__ */ Annotation.define()
var isolateHistory = /* @__PURE__ */ Annotation.define()
var invertedEffects = /* @__PURE__ */ Facet.define()
var historyConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(
      configs,
      {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: (_t, isAdjacent2) => isAdjacent2,
      },
      {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: (a2, b2) => (tr, adj) => a2(tr, adj) || b2(tr, adj),
      },
    )
  },
})
function changeEnd(changes) {
  let end = 0
  changes.iterChangedRanges((_, to) => (end = to))
  return end
}
var historyField_ = /* @__PURE__ */ StateField.define({
  create() {
    return HistoryState.empty
  },
  update(state, tr) {
    let config = tr.state.facet(historyConfig)
    let fromHist = tr.annotation(fromHistory)
    if (fromHist) {
      let selection = tr.docChanged
        ? EditorSelection.single(changeEnd(tr.changes))
        : void 0
      let item = HistEvent.fromTransaction(tr, selection),
        from = fromHist.side
      let other = from == 0 ? state.undone : state.done
      if (item) other = updateBranch(other, other.length, config.minDepth, item)
      else other = addSelection(other, tr.startState.selection)
      return new HistoryState(
        from == 0 ? fromHist.rest : other,
        from == 0 ? other : fromHist.rest,
      )
    }
    let isolate = tr.annotation(isolateHistory)
    if (isolate == 'full' || isolate == 'before') state = state.isolate()
    if (tr.annotation(Transaction.addToHistory) === false)
      return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state
    let event = HistEvent.fromTransaction(tr)
    let time = tr.annotation(Transaction.time),
      userEvent = tr.annotation(Transaction.userEvent)
    if (event) state = state.addChanges(event, time, userEvent, config, tr)
    else if (tr.selection)
      state = state.addSelection(
        tr.startState.selection,
        time,
        userEvent,
        config.newGroupDelay,
      )
    if (isolate == 'full' || isolate == 'after') state = state.isolate()
    return state
  },
  toJSON(value) {
    return {
      done: value.done.map((e2) => e2.toJSON()),
      undone: value.undone.map((e2) => e2.toJSON()),
    }
  },
  fromJSON(json) {
    return new HistoryState(
      json.done.map(HistEvent.fromJSON),
      json.undone.map(HistEvent.fromJSON),
    )
  },
})
function history2(config = {}) {
  return [
    historyField_,
    historyConfig.of(config),
    EditorView.domEventHandlers({
      beforeinput(e2, view) {
        let command2 =
          e2.inputType == 'historyUndo'
            ? undo
            : e2.inputType == 'historyRedo'
              ? redo
              : null
        if (!command2) return false
        e2.preventDefault()
        return command2(view)
      },
    }),
  ]
}
function cmd(side, selection) {
  return function ({ state, dispatch }) {
    if (!selection && state.readOnly) return false
    let historyState = state.field(historyField_, false)
    if (!historyState) return false
    let tr = historyState.pop(side, state, selection)
    if (!tr) return false
    dispatch(tr)
    return true
  }
}
var undo = /* @__PURE__ */ cmd(0, false)
var redo = /* @__PURE__ */ cmd(1, false)
var undoSelection = /* @__PURE__ */ cmd(0, true)
var redoSelection = /* @__PURE__ */ cmd(1, true)
var HistEvent = class {
  setSelAfter(after) {
    return new HistEvent(
      this.changes,
      this.effects,
      this.mapped,
      this.startSelection,
      after,
    )
  }
  toJSON() {
    var _a3, _b3, _c2
    return {
      changes:
        (_a3 = this.changes) === null || _a3 === void 0 ? void 0 : _a3.toJSON(),
      mapped:
        (_b3 = this.mapped) === null || _b3 === void 0 ? void 0 : _b3.toJSON(),
      startSelection:
        (_c2 = this.startSelection) === null || _c2 === void 0
          ? void 0
          : _c2.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s2) => s2.toJSON()),
    }
  }
  static fromJSON(json) {
    return new HistEvent(
      json.changes && ChangeSet.fromJSON(json.changes),
      [],
      json.mapped && ChangeDesc.fromJSON(json.mapped),
      json.startSelection && EditorSelection.fromJSON(json.startSelection),
      json.selectionsAfter.map(EditorSelection.fromJSON),
    )
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr, selection) {
    let effects = none
    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr)
      if (result.length) effects = effects.concat(result)
    }
    if (!effects.length && tr.changes.empty) return null
    return new HistEvent(
      tr.changes.invert(tr.startState.doc),
      effects,
      void 0,
      selection || tr.startState.selection,
      none,
    )
  }
  static selection(selections) {
    return new HistEvent(void 0, none, void 0, void 0, selections)
  }
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes
    this.effects = effects
    this.mapped = mapped
    this.startSelection = startSelection
    this.selectionsAfter = selectionsAfter
  }
}
function updateBranch(branch, to, maxLen, newEvent) {
  let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0
  let newBranch = branch.slice(start, to)
  newBranch.push(newEvent)
  return newBranch
}
function isAdjacent(a2, b2) {
  let ranges = [],
    isAdjacent2 = false
  a2.iterChangedRanges((f2, t3) => ranges.push(f2, t3))
  b2.iterChangedRanges((_f, _t, f2, t3) => {
    for (let i3 = 0; i3 < ranges.length; ) {
      let from = ranges[i3++],
        to = ranges[i3++]
      if (t3 >= from && f2 <= to) isAdjacent2 = true
    }
  })
  return isAdjacent2
}
function eqSelectionShape(a2, b2) {
  return (
    a2.ranges.length == b2.ranges.length &&
    a2.ranges.filter((r3, i3) => r3.empty != b2.ranges[i3].empty).length === 0
  )
}
function conc(a2, b2) {
  return !a2.length ? b2 : !b2.length ? a2 : a2.concat(b2)
}
var none = []
var MaxSelectionsPerEvent = 200
function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])]
  } else {
    let lastEvent = branch[branch.length - 1]
    let sels = lastEvent.selectionsAfter.slice(
      Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent),
    )
    if (sels.length && sels[sels.length - 1].eq(selection)) return branch
    sels.push(selection)
    return updateBranch(
      branch,
      branch.length - 1,
      1e9,
      lastEvent.setSelAfter(sels),
    )
  }
}
function popSelection(branch) {
  let last = branch[branch.length - 1]
  let newBranch = branch.slice()
  newBranch[branch.length - 1] = last.setSelAfter(
    last.selectionsAfter.slice(0, last.selectionsAfter.length - 1),
  )
  return newBranch
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length) return branch
  let length = branch.length,
    selections = none
  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections)
    if ((event.changes && !event.changes.empty) || event.effects.length) {
      let result = branch.slice(0, length)
      result[length - 1] = event
      return result
    } else {
      mapping = event.mapped
      length--
      selections = event.selectionsAfter
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(
    event.selectionsAfter.length
      ? event.selectionsAfter.map((s2) => s2.map(mapping))
      : none,
    extraSelections,
  )
  if (!event.changes) return HistEvent.selection(selections)
  let mappedChanges = event.changes.map(mapping),
    before = mapping.mapDesc(event.changes, true)
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before
  return new HistEvent(
    mappedChanges,
    StateEffect.mapEffects(event.effects, mapping),
    fullMapping,
    event.startSelection.map(before),
    selections,
  )
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/
var HistoryState = class {
  isolate() {
    return this.prevTime ? new HistoryState(this.done, this.undone) : this
  }
  addChanges(event, time, userEvent, config, tr) {
    let done = this.done,
      lastEvent = done[done.length - 1]
    if (
      lastEvent &&
      lastEvent.changes &&
      !lastEvent.changes.empty &&
      event.changes &&
      (!userEvent || joinableUserEvent.test(userEvent)) &&
      ((!lastEvent.selectionsAfter.length &&
        time - this.prevTime < config.newGroupDelay &&
        config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) || // For compose (but not compose.start) events, always join with previous event
        userEvent == 'input.type.compose')
    ) {
      done = updateBranch(
        done,
        done.length - 1,
        config.minDepth,
        new HistEvent(
          event.changes.compose(lastEvent.changes),
          conc(event.effects, lastEvent.effects),
          lastEvent.mapped,
          lastEvent.startSelection,
          none,
        ),
      )
    } else {
      done = updateBranch(done, done.length, config.minDepth, event)
    }
    return new HistoryState(done, none, time, userEvent)
  }
  addSelection(selection, time, userEvent, newGroupDelay) {
    let last = this.done.length
      ? this.done[this.done.length - 1].selectionsAfter
      : none
    if (
      last.length > 0 &&
      time - this.prevTime < newGroupDelay &&
      userEvent == this.prevUserEvent &&
      userEvent &&
      /^select($|\.)/.test(userEvent) &&
      eqSelectionShape(last[last.length - 1], selection)
    )
      return this
    return new HistoryState(
      addSelection(this.done, selection),
      this.undone,
      time,
      userEvent,
    )
  }
  addMapping(mapping) {
    return new HistoryState(
      addMappingToBranch(this.done, mapping),
      addMappingToBranch(this.undone, mapping),
      this.prevTime,
      this.prevUserEvent,
    )
  }
  pop(side, state, selection) {
    let branch = side == 0 ? this.done : this.undone
    if (branch.length == 0) return null
    let event = branch[branch.length - 1]
    if (selection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({
          side,
          rest: popSelection(branch),
        }),
        userEvent: side == 0 ? 'select.undo' : 'select.redo',
        scrollIntoView: true,
      })
    } else if (!event.changes) {
      return null
    } else {
      let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1)
      if (event.mapped) rest = addMappingToBranch(rest, event.mapped)
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest }),
        filter: false,
        userEvent: side == 0 ? 'undo' : 'redo',
        scrollIntoView: true,
      })
    }
  }
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done
    this.undone = undone
    this.prevTime = prevTime
    this.prevUserEvent = prevUserEvent
  }
}
HistoryState.empty = /* @__PURE__ */ new HistoryState(none, none)
var historyKeymap = [
  { key: 'Mod-z', run: undo, preventDefault: true },
  { key: 'Mod-y', mac: 'Mod-Shift-z', run: redo, preventDefault: true },
  { linux: 'Ctrl-Shift-z', run: redo, preventDefault: true },
  { key: 'Mod-u', run: undoSelection, preventDefault: true },
  {
    key: 'Alt-u',
    mac: 'Mod-Shift-u',
    run: redoSelection,
    preventDefault: true,
  },
]
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex)
}
function setSel(state, selection) {
  return state.update({
    selection,
    scrollIntoView: true,
    userEvent: 'select',
  })
}
function moveSel({ state, dispatch }, how) {
  let selection = updateSel(state.selection, how)
  if (selection.eq(state.selection)) return false
  dispatch(setSel(state, selection))
  return true
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from)
}
function cursorByChar(view, forward) {
  return moveSel(view, (range) =>
    range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward),
  )
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR
}
var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view))
var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view))
function cursorByGroup(view, forward) {
  return moveSel(view, (range) =>
    range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward),
  )
}
var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view))
var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view))
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp)) return true
  let len = node.to - node.from
  return (
    (len &&
      (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to)))) ||
    node.firstChild
  )
}
function moveBySyntax(state, start, forward) {
  let pos = syntaxTree(state).resolveInner(start.head)
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy
  for (let at = start.head; ; ) {
    let next = forward ? pos.childAfter(at) : pos.childBefore(at)
    if (!next) break
    if (interestingNode(state, next, bracketProp)) pos = next
    else at = forward ? next.to : next.from
  }
  let bracket = pos.type.prop(bracketProp),
    match,
    newPos
  if (
    bracket &&
    (match = forward
      ? matchBrackets(state, pos.from, 1)
      : matchBrackets(state, pos.to, -1)) &&
    match.matched
  )
    newPos = forward ? match.end.to : match.end.from
  else newPos = forward ? pos.to : pos.from
  return EditorSelection.cursor(newPos, forward ? -1 : 1)
}
var cursorSyntaxLeft = (view) =>
  moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)))
var cursorSyntaxRight = (view) =>
  moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)))
function cursorByLine(view, forward) {
  return moveSel(view, (range) => {
    if (!range.empty) return rangeEnd(range, forward)
    let moved = view.moveVertically(range, forward)
    return moved.head != range.head
      ? moved
      : view.moveToLineBoundary(range, forward)
  })
}
var cursorLineUp = (view) => cursorByLine(view, false)
var cursorLineDown = (view) => cursorByLine(view, true)
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2
  let marginTop = 0,
    marginBottom = 0,
    height
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view)
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(
          margins === null || margins === void 0 ? void 0 : margins.top,
          marginTop,
        )
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(
          margins === null || margins === void 0 ? void 0 : margins.bottom,
          marginBottom,
        )
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5),
  }
}
function cursorByPage(view, forward) {
  let page = pageInfo(view)
  let { state } = view,
    selection = updateSel(state.selection, (range) => {
      return range.empty
        ? view.moveVertically(range, forward, page.height)
        : rangeEnd(range, forward)
    })
  if (selection.eq(state.selection)) return false
  let effect
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head)
    let scrollRect = view.scrollDOM.getBoundingClientRect()
    let scrollTop = scrollRect.top + page.marginTop,
      scrollBottom = scrollRect.bottom - page.marginBottom
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection.main.head, {
        y: 'start',
        yMargin: startPos.top - scrollTop,
      })
  }
  view.dispatch(setSel(state, selection), { effects: effect })
  return true
}
var cursorPageUp = (view) => cursorByPage(view, false)
var cursorPageDown = (view) => cursorByPage(view, true)
function moveByLineBoundary(view, start, forward) {
  let line = view.lineBlockAt(start.head),
    moved = view.moveToLineBoundary(start, forward)
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
    moved = view.moveToLineBoundary(start, forward, false)
  if (!forward && moved.head == line.from && line.length) {
    let space = /^\s*/.exec(
      view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)),
    )[0].length
    if (space && start.head != line.from + space)
      moved = EditorSelection.cursor(line.from + space)
  }
  return moved
}
var cursorLineBoundaryForward = (view) =>
  moveSel(view, (range) => moveByLineBoundary(view, range, true))
var cursorLineBoundaryBackward = (view) =>
  moveSel(view, (range) => moveByLineBoundary(view, range, false))
var cursorLineBoundaryLeft = (view) =>
  moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)))
var cursorLineBoundaryRight = (view) =>
  moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)))
var cursorLineStart = (view) =>
  moveSel(view, (range) =>
    EditorSelection.cursor(view.lineBlockAt(range.head).from, 1),
  )
var cursorLineEnd = (view) =>
  moveSel(view, (range) =>
    EditorSelection.cursor(view.lineBlockAt(range.head).to, -1),
  )
function toMatchingBracket(state, dispatch, extend) {
  let found = false,
    selection = updateSel(state.selection, (range) => {
      let matching =
        matchBrackets(state, range.head, -1) ||
        matchBrackets(state, range.head, 1) ||
        (range.head > 0 && matchBrackets(state, range.head - 1, 1)) ||
        (range.head < state.doc.length &&
          matchBrackets(state, range.head + 1, -1))
      if (!matching || !matching.end) return range
      found = true
      let head =
        matching.start.from == range.head ? matching.end.to : matching.end.from
      return extend
        ? EditorSelection.range(range.anchor, head)
        : EditorSelection.cursor(head)
    })
  if (!found) return false
  dispatch(setSel(state, selection))
  return true
}
var cursorMatchingBracket = ({ state, dispatch }) =>
  toMatchingBracket(state, dispatch, false)
function extendSel(view, how) {
  let selection = updateSel(view.state.selection, (range) => {
    let head = how(range)
    return EditorSelection.range(
      range.anchor,
      head.head,
      head.goalColumn,
      head.bidiLevel || void 0,
    )
  })
  if (selection.eq(view.state.selection)) return false
  view.dispatch(setSel(view.state, selection))
  return true
}
function selectByChar(view, forward) {
  return extendSel(view, (range) => view.moveByChar(range, forward))
}
var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view))
var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view))
function selectByGroup(view, forward) {
  return extendSel(view, (range) => view.moveByGroup(range, forward))
}
var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view))
var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view))
var selectSyntaxLeft = (view) =>
  extendSel(view, (range) =>
    moveBySyntax(view.state, range, !ltrAtCursor(view)),
  )
var selectSyntaxRight = (view) =>
  extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)))
function selectByLine(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward))
}
var selectLineUp = (view) => selectByLine(view, false)
var selectLineDown = (view) => selectByLine(view, true)
function selectByPage(view, forward) {
  return extendSel(view, (range) =>
    view.moveVertically(range, forward, pageInfo(view).height),
  )
}
var selectPageUp = (view) => selectByPage(view, false)
var selectPageDown = (view) => selectByPage(view, true)
var selectLineBoundaryForward = (view) =>
  extendSel(view, (range) => moveByLineBoundary(view, range, true))
var selectLineBoundaryBackward = (view) =>
  extendSel(view, (range) => moveByLineBoundary(view, range, false))
var selectLineBoundaryLeft = (view) =>
  extendSel(view, (range) =>
    moveByLineBoundary(view, range, !ltrAtCursor(view)),
  )
var selectLineBoundaryRight = (view) =>
  extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)))
var selectLineStart = (view) =>
  extendSel(view, (range) =>
    EditorSelection.cursor(view.lineBlockAt(range.head).from),
  )
var selectLineEnd = (view) =>
  extendSel(view, (range) =>
    EditorSelection.cursor(view.lineBlockAt(range.head).to),
  )
var cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }))
  return true
}
var cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }))
  return true
}
var selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }))
  return true
}
var selectDocEnd = ({ state, dispatch }) => {
  dispatch(
    setSel(state, {
      anchor: state.selection.main.anchor,
      head: state.doc.length,
    }),
  )
  return true
}
var selectAll = ({ state, dispatch }) => {
  dispatch(
    state.update({
      selection: { anchor: 0, head: state.doc.length },
      userEvent: 'select',
    }),
  )
  return true
}
var selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from, to }) =>
    EditorSelection.range(from, Math.min(to + 1, state.doc.length)),
  )
  dispatch(
    state.update({
      selection: EditorSelection.create(ranges),
      userEvent: 'select',
    }),
  )
  return true
}
var selectParentSyntax = ({ state, dispatch }) => {
  let selection = updateSel(state.selection, (range) => {
    var _a3
    let context = syntaxTree(state).resolveInner(range.head, 1)
    while (
      !(
        (context.from < range.from && context.to >= range.to) ||
        (context.to > range.to && context.from <= range.from) ||
        !((_a3 = context.parent) === null || _a3 === void 0
          ? void 0
          : _a3.parent)
      )
    )
      context = context.parent
    return EditorSelection.range(context.to, context.from)
  })
  dispatch(setSel(state, selection))
  return true
}
var simplifySelection = ({ state, dispatch }) => {
  let cur = state.selection,
    selection = null
  if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main])
  else if (!cur.main.empty)
    selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)])
  if (!selection) return false
  dispatch(setSel(state, selection))
  return true
}
function deleteBy(target, by) {
  if (target.state.readOnly) return false
  let event = 'delete.selection',
    { state } = target
  let changes = state.changeByRange((range) => {
    let { from, to } = range
    if (from == to) {
      let towards = by(from)
      if (towards < from) {
        event = 'delete.backward'
        towards = skipAtomic(target, towards, false)
      } else if (towards > from) {
        event = 'delete.forward'
        towards = skipAtomic(target, towards, true)
      }
      from = Math.min(from, towards)
      to = Math.max(to, towards)
    } else {
      from = skipAtomic(target, from, false)
      to = skipAtomic(target, to, true)
    }
    return from == to
      ? { range }
      : { changes: { from, to }, range: EditorSelection.cursor(from) }
  })
  if (changes.changes.empty) return false
  target.dispatch(
    state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects:
        event == 'delete.selection'
          ? EditorView.announce.of(state.phrase('Selection deleted'))
          : void 0,
    }),
  )
  return true
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state
      .facet(EditorView.atomicRanges)
      .map((f2) => f2(target)))
      ranges.between(pos, pos, (from, to) => {
        if (from < pos && to > pos) pos = forward ? to : from
      })
  return pos
}
var deleteByChar = (target, forward) =>
  deleteBy(target, (pos) => {
    let { state } = target,
      line = state.doc.lineAt(pos),
      before,
      targetPos
    if (
      !forward &&
      pos > line.from &&
      pos < line.from + 200 &&
      !/[^ \t]/.test((before = line.text.slice(0, pos - line.from)))
    ) {
      if (before[before.length - 1] == '	') return pos - 1
      let col = countColumn(before, state.tabSize),
        drop = col % getIndentUnit(state) || getIndentUnit(state)
      for (let i3 = 0; i3 < drop && before[before.length - 1 - i3] == ' '; i3++)
        pos--
      targetPos = pos
    } else {
      targetPos =
        findClusterBreak(line.text, pos - line.from, forward, forward) +
        line.from
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
        targetPos += forward ? 1 : -1
    }
    return targetPos
  })
var deleteCharBackward = (view) => deleteByChar(view, false)
var deleteCharForward = (view) => deleteByChar(view, true)
var deleteByGroup = (target, forward) =>
  deleteBy(target, (start) => {
    let pos = start,
      { state } = target,
      line = state.doc.lineAt(pos)
    let categorize = state.charCategorizer(pos)
    for (let cat = null; ; ) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == start && line.number != (forward ? state.doc.lines : 1))
          pos += forward ? 1 : -1
        break
      }
      let next =
        findClusterBreak(line.text, pos - line.from, forward) + line.from
      let nextChar = line.text.slice(
        Math.min(pos, next) - line.from,
        Math.max(pos, next) - line.from,
      )
      let nextCat = categorize(nextChar)
      if (cat != null && nextCat != cat) break
      if (nextChar != ' ' || pos != start) cat = nextCat
      pos = next
    }
    return pos
  })
var deleteGroupBackward = (target) => deleteByGroup(target, false)
var deleteGroupForward = (target) => deleteByGroup(target, true)
var deleteToLineEnd = (view) =>
  deleteBy(view, (pos) => {
    let lineEnd = view.lineBlockAt(pos).to
    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1)
  })
var deleteToLineStart = (view) =>
  deleteBy(view, (pos) => {
    let lineStart = view.lineBlockAt(pos).from
    return pos > lineStart ? lineStart : Math.max(0, pos - 1)
  })
var splitLine = ({ state, dispatch }) => {
  if (state.readOnly) return false
  let changes = state.changeByRange((range) => {
    return {
      changes: {
        from: range.from,
        to: range.to,
        insert: Text.of(['', '']),
      },
      range: EditorSelection.cursor(range.from),
    }
  })
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: 'input' }))
  return true
}
var transposeChars = ({ state, dispatch }) => {
  if (state.readOnly) return false
  let changes = state.changeByRange((range) => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length)
      return { range }
    let pos = range.from,
      line = state.doc.lineAt(pos)
    let from =
      pos == line.from
        ? pos - 1
        : findClusterBreak(line.text, pos - line.from, false) + line.from
    let to =
      pos == line.to
        ? pos + 1
        : findClusterBreak(line.text, pos - line.from, true) + line.from
    return {
      changes: {
        from,
        to,
        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)),
      },
      range: EditorSelection.cursor(to),
    }
  })
  if (changes.changes.empty) return false
  dispatch(
    state.update(changes, {
      scrollIntoView: true,
      userEvent: 'move.character',
    }),
  )
  return true
}
function selectedLineBlocks(state) {
  let blocks = [],
    upto = -1
  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from),
      endLine = state.doc.lineAt(range.to)
    if (!range.empty && range.to == endLine.from)
      endLine = state.doc.lineAt(range.to - 1)
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1]
      prev.to = endLine.to
      prev.ranges.push(range)
    } else {
      blocks.push({
        from: startLine.from,
        to: endLine.to,
        ranges: [range],
      })
    }
    upto = endLine.number + 1
  }
  return blocks
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly) return false
  let changes = [],
    ranges = []
  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0) continue
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1)
    let size = nextLine.length + 1
    if (forward) {
      changes.push(
        { from: block.to, to: nextLine.to },
        { from: block.from, insert: nextLine.text + state.lineBreak },
      )
      for (let r3 of block.ranges)
        ranges.push(
          EditorSelection.range(
            Math.min(state.doc.length, r3.anchor + size),
            Math.min(state.doc.length, r3.head + size),
          ),
        )
    } else {
      changes.push(
        { from: nextLine.from, to: block.from },
        { from: block.to, insert: state.lineBreak + nextLine.text },
      )
      for (let r3 of block.ranges)
        ranges.push(EditorSelection.range(r3.anchor - size, r3.head - size))
    }
  }
  if (!changes.length) return false
  dispatch(
    state.update({
      changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: 'move.line',
    }),
  )
  return true
}
var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false)
var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true)
function copyLine(state, dispatch, forward) {
  if (state.readOnly) return false
  let changes = []
  for (let block of selectedLineBlocks(state)) {
    if (forward)
      changes.push({
        from: block.from,
        insert: state.doc.slice(block.from, block.to) + state.lineBreak,
      })
    else
      changes.push({
        from: block.to,
        insert: state.lineBreak + state.doc.slice(block.from, block.to),
      })
  }
  dispatch(
    state.update({
      changes,
      scrollIntoView: true,
      userEvent: 'input.copyline',
    }),
  )
  return true
}
var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false)
var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true)
var deleteLine = (view) => {
  if (view.state.readOnly) return false
  let { state } = view,
    changes = state.changes(
      selectedLineBlocks(state).map(({ from, to }) => {
        if (from > 0) from--
        else if (to < state.doc.length) to++
        return { from, to }
      }),
    )
  let selection = updateSel(state.selection, (range) =>
    view.moveVertically(range, true),
  ).map(changes)
  view.dispatch({
    changes,
    selection,
    scrollIntoView: true,
    userEvent: 'delete.line',
  })
  return true
}
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos }
  let context = syntaxTree(state).resolveInner(pos)
  let before = context.childBefore(pos),
    after = context.childAfter(pos),
    closedBy
  if (
    before &&
    after &&
    before.to <= pos &&
    after.from >= pos &&
    (closedBy = before.type.prop(NodeProp.closedBy)) &&
    closedBy.indexOf(after.name) > -1 &&
    state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from
  )
    return { from: before.to, to: after.from }
  return null
}
var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false)
var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true)
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly) return false
    let changes = state.changeByRange((range) => {
      let { from, to } = range,
        line = state.doc.lineAt(from)
      let explode = !atEof && from == to && isBetweenBrackets(state, from)
      if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to
      let cx = new IndentContext(state, {
        simulateBreak: from,
        simulateDoubleBreak: !!explode,
      })
      let indent = getIndentation(cx, from)
      if (indent == null)
        indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length
      while (to < line.to && /\s/.test(line.text[to - line.from])) to++
      if (explode) ({ from, to } = explode)
      else if (
        from > line.from &&
        from < line.from + 100 &&
        !/\S/.test(line.text.slice(0, from))
      )
        from = line.from
      let insert = ['', indentString(state, indent)]
      if (explode)
        insert.push(indentString(state, cx.lineIndent(line.from, -1)))
      return {
        changes: { from, to, insert: Text.of(insert) },
        range: EditorSelection.cursor(from + 1 + insert[1].length),
      }
    })
    dispatch(
      state.update(changes, { scrollIntoView: true, userEvent: 'input' }),
    )
    return true
  }
}
function changeBySelectedLine(state, f2) {
  let atLine = -1
  return state.changeByRange((range) => {
    let changes = []
    for (let pos = range.from; pos <= range.to; ) {
      let line = state.doc.lineAt(pos)
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f2(line, changes, range)
        atLine = line.number
      }
      pos = line.to + 1
    }
    let changeSet = state.changes(changes)
    return {
      changes,
      range: EditorSelection.range(
        changeSet.mapPos(range.anchor, 1),
        changeSet.mapPos(range.head, 1),
      ),
    }
  })
}
var indentSelection = ({ state, dispatch }) => {
  if (state.readOnly) return false
  let updated = /* @__PURE__ */ Object.create(null)
  let context = new IndentContext(state, {
    overrideIndentation: (start) => {
      let found = updated[start]
      return found == null ? -1 : found
    },
  })
  let changes = changeBySelectedLine(state, (line, changes2, range) => {
    let indent = getIndentation(context, line.from)
    if (indent == null) return
    if (!/\S/.test(line.text)) indent = 0
    let cur = /^\s*/.exec(line.text)[0]
    let norm = indentString(state, indent)
    if (cur != norm || range.from < line.from + cur.length) {
      updated[line.from] = indent
      changes2.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm,
      })
    }
  })
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: 'indent' }))
  return true
}
var indentMore = ({ state, dispatch }) => {
  if (state.readOnly) return false
  dispatch(
    state.update(
      changeBySelectedLine(state, (line, changes) => {
        changes.push({
          from: line.from,
          insert: state.facet(indentUnit),
        })
      }),
      { userEvent: 'input.indent' },
    ),
  )
  return true
}
var indentLess = ({ state, dispatch }) => {
  if (state.readOnly) return false
  dispatch(
    state.update(
      changeBySelectedLine(state, (line, changes) => {
        let space = /^\s*/.exec(line.text)[0]
        if (!space) return
        let col = countColumn(space, state.tabSize),
          keep = 0
        let insert = indentString(
          state,
          Math.max(0, col - getIndentUnit(state)),
        )
        while (
          keep < space.length &&
          keep < insert.length &&
          space.charCodeAt(keep) == insert.charCodeAt(keep)
        )
          keep++
        changes.push({
          from: line.from + keep,
          to: line.from + space.length,
          insert: insert.slice(keep),
        })
      }),
      { userEvent: 'delete.dedent' },
    ),
  )
  return true
}
var emacsStyleKeymap = [
  {
    key: 'Ctrl-b',
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true,
  },
  { key: 'Ctrl-f', run: cursorCharRight, shift: selectCharRight },
  { key: 'Ctrl-p', run: cursorLineUp, shift: selectLineUp },
  { key: 'Ctrl-n', run: cursorLineDown, shift: selectLineDown },
  { key: 'Ctrl-a', run: cursorLineStart, shift: selectLineStart },
  { key: 'Ctrl-e', run: cursorLineEnd, shift: selectLineEnd },
  { key: 'Ctrl-d', run: deleteCharForward },
  { key: 'Ctrl-h', run: deleteCharBackward },
  { key: 'Ctrl-k', run: deleteToLineEnd },
  { key: 'Ctrl-Alt-h', run: deleteGroupBackward },
  { key: 'Ctrl-o', run: splitLine },
  { key: 'Ctrl-t', run: transposeChars },
  { key: 'Ctrl-v', run: cursorPageDown },
]
var standardKeymap = /* @__PURE__ */ [
  {
    key: 'ArrowLeft',
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true,
  },
  {
    key: 'Mod-ArrowLeft',
    mac: 'Alt-ArrowLeft',
    run: cursorGroupLeft,
    shift: selectGroupLeft,
    preventDefault: true,
  },
  {
    mac: 'Cmd-ArrowLeft',
    run: cursorLineBoundaryLeft,
    shift: selectLineBoundaryLeft,
    preventDefault: true,
  },
  {
    key: 'ArrowRight',
    run: cursorCharRight,
    shift: selectCharRight,
    preventDefault: true,
  },
  {
    key: 'Mod-ArrowRight',
    mac: 'Alt-ArrowRight',
    run: cursorGroupRight,
    shift: selectGroupRight,
    preventDefault: true,
  },
  {
    mac: 'Cmd-ArrowRight',
    run: cursorLineBoundaryRight,
    shift: selectLineBoundaryRight,
    preventDefault: true,
  },
  {
    key: 'ArrowUp',
    run: cursorLineUp,
    shift: selectLineUp,
    preventDefault: true,
  },
  { mac: 'Cmd-ArrowUp', run: cursorDocStart, shift: selectDocStart },
  { mac: 'Ctrl-ArrowUp', run: cursorPageUp, shift: selectPageUp },
  {
    key: 'ArrowDown',
    run: cursorLineDown,
    shift: selectLineDown,
    preventDefault: true,
  },
  { mac: 'Cmd-ArrowDown', run: cursorDocEnd, shift: selectDocEnd },
  { mac: 'Ctrl-ArrowDown', run: cursorPageDown, shift: selectPageDown },
  { key: 'PageUp', run: cursorPageUp, shift: selectPageUp },
  { key: 'PageDown', run: cursorPageDown, shift: selectPageDown },
  {
    key: 'Home',
    run: cursorLineBoundaryBackward,
    shift: selectLineBoundaryBackward,
    preventDefault: true,
  },
  { key: 'Mod-Home', run: cursorDocStart, shift: selectDocStart },
  {
    key: 'End',
    run: cursorLineBoundaryForward,
    shift: selectLineBoundaryForward,
    preventDefault: true,
  },
  { key: 'Mod-End', run: cursorDocEnd, shift: selectDocEnd },
  { key: 'Enter', run: insertNewlineAndIndent },
  { key: 'Mod-a', run: selectAll },
  { key: 'Backspace', run: deleteCharBackward, shift: deleteCharBackward },
  { key: 'Delete', run: deleteCharForward },
  { key: 'Mod-Backspace', mac: 'Alt-Backspace', run: deleteGroupBackward },
  { key: 'Mod-Delete', mac: 'Alt-Delete', run: deleteGroupForward },
  { mac: 'Mod-Backspace', run: deleteToLineStart },
  { mac: 'Mod-Delete', run: deleteToLineEnd },
].concat(
  /* @__PURE__ */ emacsStyleKeymap.map((b2) => ({
    mac: b2.key,
    run: b2.run,
    shift: b2.shift,
  })),
)
var defaultKeymap = /* @__PURE__ */ [
  {
    key: 'Alt-ArrowLeft',
    mac: 'Ctrl-ArrowLeft',
    run: cursorSyntaxLeft,
    shift: selectSyntaxLeft,
  },
  {
    key: 'Alt-ArrowRight',
    mac: 'Ctrl-ArrowRight',
    run: cursorSyntaxRight,
    shift: selectSyntaxRight,
  },
  { key: 'Alt-ArrowUp', run: moveLineUp },
  { key: 'Shift-Alt-ArrowUp', run: copyLineUp },
  { key: 'Alt-ArrowDown', run: moveLineDown },
  { key: 'Shift-Alt-ArrowDown', run: copyLineDown },
  { key: 'Escape', run: simplifySelection },
  { key: 'Mod-Enter', run: insertBlankLine },
  { key: 'Alt-l', mac: 'Ctrl-l', run: selectLine },
  { key: 'Mod-i', run: selectParentSyntax, preventDefault: true },
  { key: 'Mod-[', run: indentLess },
  { key: 'Mod-]', run: indentMore },
  { key: 'Mod-Alt-\\', run: indentSelection },
  { key: 'Shift-Mod-k', run: deleteLine },
  { key: 'Shift-Mod-\\', run: cursorMatchingBracket },
  { key: 'Mod-/', run: toggleComment },
  { key: 'Alt-A', run: toggleBlockComment },
].concat(standardKeymap)

// /:https://framerusercontent.com/modules/SWAtenub3goqbKHfvwGg/1dCB1yMDMTFvIuREJ6ud/codesandbox_sandpack_react.js
import * as React2 from 'react'
import React from 'react'
var __create3 = Object.create
var __defProp3 = Object.defineProperty
var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor
var __getOwnPropNames3 = Object.getOwnPropertyNames
var __getProtoOf3 = Object.getPrototypeOf
var __hasOwnProp3 = Object.prototype.hasOwnProperty
var __commonJS3 = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames3(cb)[0]])(
          (mod = { exports: {} }).exports,
          mod,
        ),
      mod.exports
    )
  }
var __copyProps3 = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames3(from))
      if (!__hasOwnProp3.call(to, key) && key !== except)
        __defProp3(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable,
        })
  }
  return to
}
var __toESM3 = (mod, isNodeMode, target) => (
  (target = mod != null ? __create3(__getProtoOf3(mod)) : {}),
  __copyProps3(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp3(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
)
var require_lib2 = __commonJS3({
  '../../node_modules/anser/lib/index.js'(exports, module) {
    'use strict'
    var _createClass = /* @__PURE__ */ (function () {
      function defineProperties(target, props) {
        for (var i22 = 0; i22 < props.length; i22++) {
          var descriptor = props[i22]
          descriptor.enumerable = descriptor.enumerable || false
          descriptor.configurable = true
          if ('value' in descriptor) descriptor.writable = true
          Object.defineProperty(target, descriptor.key, descriptor)
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps)
        if (staticProps) defineProperties(Constructor, staticProps)
        return Constructor
      }
    })()
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
      }
    }
    var ANSI_COLORS = [
      [
        { color: '0, 0, 0', class: 'ansi-black' },
        { color: '187, 0, 0', class: 'ansi-red' },
        { color: '0, 187, 0', class: 'ansi-green' },
        { color: '187, 187, 0', class: 'ansi-yellow' },
        { color: '0, 0, 187', class: 'ansi-blue' },
        { color: '187, 0, 187', class: 'ansi-magenta' },
        { color: '0, 187, 187', class: 'ansi-cyan' },
        { color: '255,255,255', class: 'ansi-white' },
      ],
      [
        { color: '85, 85, 85', class: 'ansi-bright-black' },
        { color: '255, 85, 85', class: 'ansi-bright-red' },
        { color: '0, 255, 0', class: 'ansi-bright-green' },
        { color: '255, 255, 85', class: 'ansi-bright-yellow' },
        { color: '85, 85, 255', class: 'ansi-bright-blue' },
        { color: '255, 85, 255', class: 'ansi-bright-magenta' },
        { color: '85, 255, 255', class: 'ansi-bright-cyan' },
        { color: '255, 255, 255', class: 'ansi-bright-white' },
      ],
    ]
    var Anser2 = (function () {
      _createClass(Anser3, null, [
        {
          key: 'escapeForHtml',
          /**
           * Anser.escapeForHtml
           * Escape the input HTML.
           *
           * This does the minimum escaping of text to make it compliant with HTML.
           * In particular, the '&','<', and '>' characters are escaped. This should
           * be run prior to `ansiToHtml`.
           *
           * @name Anser.escapeForHtml
           * @function
           * @param {String} txt The input text (containing the ANSI snippets).
           * @returns {String} The escaped html.
           */
          value: function escapeForHtml(txt) {
            return new Anser3().escapeForHtml(txt)
          },
        },
        {
          key: 'linkify',
          value: function linkify(txt) {
            return new Anser3().linkify(txt)
          },
        },
        {
          key: 'ansiToHtml',
          value: function ansiToHtml(txt, options) {
            return new Anser3().ansiToHtml(txt, options)
          },
        },
        {
          key: 'ansiToJson',
          value: function ansiToJson(txt, options) {
            return new Anser3().ansiToJson(txt, options)
          },
        },
        {
          key: 'ansiToText',
          value: function ansiToText(txt) {
            return new Anser3().ansiToText(txt)
          },
        },
      ])
      function Anser3() {
        _classCallCheck(this, Anser3)
        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null
        this.bright = 0
        this.decorations = []
      }
      _createClass(Anser3, [
        {
          key: 'setupPalette',
          value: function setupPalette() {
            this.PALETTE_COLORS = []
            for (var i22 = 0; i22 < 2; ++i22) {
              for (var j2 = 0; j2 < 8; ++j2) {
                this.PALETTE_COLORS.push(ANSI_COLORS[i22][j2].color)
              }
            }
            var levels = [0, 95, 135, 175, 215, 255]
            var format3 = function format22(r4, g3, b3) {
              return levels[r4] + ', ' + levels[g3] + ', ' + levels[b3]
            }
            var r3 = void 0,
              g2 = void 0,
              b2 = void 0
            for (var _r = 0; _r < 6; ++_r) {
              for (var _g = 0; _g < 6; ++_g) {
                for (var _b22 = 0; _b22 < 6; ++_b22) {
                  this.PALETTE_COLORS.push(format3(_r, _g, _b22))
                }
              }
            }
            var level = 8
            for (var _i2 = 0; _i2 < 24; ++_i2, level += 10) {
              this.PALETTE_COLORS.push(format3(level, level, level))
            }
          },
        },
        {
          key: 'escapeForHtml',
          value: function escapeForHtml(txt) {
            return txt.replace(/[&<>\"]/gm, function (str) {
              return str == '&'
                ? '&amp;'
                : str == '"'
                  ? '&quot;'
                  : str == '<'
                    ? '&lt;'
                    : str == '>'
                      ? '&gt;'
                      : ''
            })
          },
        },
        {
          key: 'linkify',
          value: function linkify(txt) {
            return txt.replace(/(https?:\/\/[^\s]+)/gm, function (str) {
              return '<a href="' + str + '">' + str + '</a>'
            })
          },
        },
        {
          key: 'ansiToHtml',
          value: function ansiToHtml(txt, options) {
            return this.process(txt, options, true)
          },
        },
        {
          key: 'ansiToJson',
          value: function ansiToJson(txt, options) {
            options = options || {}
            options.json = true
            options.clearLine = false
            return this.process(txt, options, true)
          },
        },
        {
          key: 'ansiToText',
          value: function ansiToText(txt) {
            return this.process(txt, {}, false)
          },
        },
        {
          key: 'process',
          value: function process(txt, options, markup) {
            var _this = this
            var self2 = this
            var raw_text_chunks = txt.split(/\033\[/)
            var first_chunk = raw_text_chunks.shift()
            if (options === void 0 || options === null) {
              options = {}
            }
            options.clearLine = /\r/.test(txt)
            var color_chunks = raw_text_chunks.map(function (chunk) {
              return _this.processChunk(chunk, options, markup)
            })
            if (options && options.json) {
              var first = self2.processChunkJson('')
              first.content = first_chunk
              first.clearLine = options.clearLine
              color_chunks.unshift(first)
              if (options.remove_empty) {
                color_chunks = color_chunks.filter(function (c22) {
                  return !c22.isEmpty()
                })
              }
              return color_chunks
            } else {
              color_chunks.unshift(first_chunk)
            }
            return color_chunks.join('')
          },
        },
        {
          key: 'processChunkJson',
          value: function processChunkJson(text, options, markup) {
            options = typeof options == 'undefined' ? {} : options
            var use_classes = (options.use_classes =
              typeof options.use_classes != 'undefined' && options.use_classes)
            var key = (options.key = use_classes ? 'class' : 'color')
            var result = {
              content: text,
              fg: null,
              bg: null,
              fg_truecolor: null,
              bg_truecolor: null,
              isInverted: false,
              clearLine: options.clearLine,
              decoration: null,
              decorations: [],
              was_processed: false,
              isEmpty: function isEmpty2() {
                return !result.content
              },
            }
            var matches = text.match(
              /^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m,
            )
            if (!matches) return result
            var orig_txt = (result.content = matches[4])
            var nums = matches[2].split(';')
            if (matches[1] !== '' || matches[3] !== 'm') {
              return result
            }
            if (!markup) {
              return result
            }
            var self2 = this
            while (nums.length > 0) {
              var num_str = nums.shift()
              var num = parseInt(num_str)
              if (isNaN(num) || num === 0) {
                self2.fg = self2.bg = null
                self2.decorations = []
              } else if (num === 1) {
                self2.decorations.push('bold')
              } else if (num === 2) {
                self2.decorations.push('dim')
              } else if (num === 3) {
                self2.decorations.push('italic')
              } else if (num === 4) {
                self2.decorations.push('underline')
              } else if (num === 5) {
                self2.decorations.push('blink')
              } else if (num === 7) {
                self2.decorations.push('reverse')
              } else if (num === 8) {
                self2.decorations.push('hidden')
              } else if (num === 9) {
                self2.decorations.push('strikethrough')
              } else if (num === 21) {
                self2.removeDecoration('bold')
              } else if (num === 22) {
                self2.removeDecoration('bold')
                self2.removeDecoration('dim')
              } else if (num === 23) {
                self2.removeDecoration('italic')
              } else if (num === 24) {
                self2.removeDecoration('underline')
              } else if (num === 25) {
                self2.removeDecoration('blink')
              } else if (num === 27) {
                self2.removeDecoration('reverse')
              } else if (num === 28) {
                self2.removeDecoration('hidden')
              } else if (num === 29) {
                self2.removeDecoration('strikethrough')
              } else if (num === 39) {
                self2.fg = null
              } else if (num === 49) {
                self2.bg = null
              } else if (num >= 30 && num < 38) {
                self2.fg = ANSI_COLORS[0][num % 10][key]
              } else if (num >= 90 && num < 98) {
                self2.fg = ANSI_COLORS[1][num % 10][key]
              } else if (num >= 40 && num < 48) {
                self2.bg = ANSI_COLORS[0][num % 10][key]
              } else if (num >= 100 && num < 108) {
                self2.bg = ANSI_COLORS[1][num % 10][key]
              } else if (num === 38 || num === 48) {
                var is_foreground = num === 38
                if (nums.length >= 1) {
                  var mode = nums.shift()
                  if (mode === '5' && nums.length >= 1) {
                    var palette_index = parseInt(nums.shift())
                    if (palette_index >= 0 && palette_index <= 255) {
                      if (!use_classes) {
                        if (!this.PALETTE_COLORS) {
                          self2.setupPalette()
                        }
                        if (is_foreground) {
                          self2.fg = this.PALETTE_COLORS[palette_index]
                        } else {
                          self2.bg = this.PALETTE_COLORS[palette_index]
                        }
                      } else {
                        var klass =
                          palette_index >= 16
                            ? 'ansi-palette-' + palette_index
                            : ANSI_COLORS[palette_index > 7 ? 1 : 0][
                                palette_index % 8
                              ]['class']
                        if (is_foreground) {
                          self2.fg = klass
                        } else {
                          self2.bg = klass
                        }
                      }
                    }
                  } else if (mode === '2' && nums.length >= 3) {
                    var r3 = parseInt(nums.shift())
                    var g2 = parseInt(nums.shift())
                    var b2 = parseInt(nums.shift())
                    if (
                      r3 >= 0 &&
                      r3 <= 255 &&
                      g2 >= 0 &&
                      g2 <= 255 &&
                      b2 >= 0 &&
                      b2 <= 255
                    ) {
                      var color2 = r3 + ', ' + g2 + ', ' + b2
                      if (!use_classes) {
                        if (is_foreground) {
                          self2.fg = color2
                        } else {
                          self2.bg = color2
                        }
                      } else {
                        if (is_foreground) {
                          self2.fg = 'ansi-truecolor'
                          self2.fg_truecolor = color2
                        } else {
                          self2.bg = 'ansi-truecolor'
                          self2.bg_truecolor = color2
                        }
                      }
                    }
                  }
                }
              }
            }
            if (
              self2.fg === null &&
              self2.bg === null &&
              self2.decorations.length === 0
            ) {
              return result
            } else {
              var styles = []
              var classes = []
              var data = {}
              result.fg = self2.fg
              result.bg = self2.bg
              result.fg_truecolor = self2.fg_truecolor
              result.bg_truecolor = self2.bg_truecolor
              result.decorations = self2.decorations
              result.decoration = self2.decorations.slice(-1).pop() || null
              result.was_processed = true
              return result
            }
          },
        },
        {
          key: 'processChunk',
          value: function processChunk(text, options, markup) {
            var _this2 = this
            options = options || {}
            var jsonChunk = this.processChunkJson(text, options, markup)
            var use_classes = options.use_classes
            jsonChunk.decorations = jsonChunk.decorations.filter(
              function (decoration) {
                if (decoration === 'reverse') {
                  if (!jsonChunk.fg) {
                    jsonChunk.fg =
                      ANSI_COLORS[0][7][use_classes ? 'class' : 'color']
                  }
                  if (!jsonChunk.bg) {
                    jsonChunk.bg =
                      ANSI_COLORS[0][0][use_classes ? 'class' : 'color']
                  }
                  var tmpFg = jsonChunk.fg
                  jsonChunk.fg = jsonChunk.bg
                  jsonChunk.bg = tmpFg
                  var tmpFgTrue = jsonChunk.fg_truecolor
                  jsonChunk.fg_truecolor = jsonChunk.bg_truecolor
                  jsonChunk.bg_truecolor = tmpFgTrue
                  jsonChunk.isInverted = true
                  return false
                }
                return true
              },
            )
            if (options.json) {
              return jsonChunk
            }
            if (jsonChunk.isEmpty()) {
              return ''
            }
            if (!jsonChunk.was_processed) {
              return jsonChunk.content
            }
            var colors = []
            var decorations = []
            var textDecorations = []
            var data = {}
            var render_data = function render_data2(data2) {
              var fragments = []
              var key = void 0
              for (key in data2) {
                if (data2.hasOwnProperty(key)) {
                  fragments.push(
                    'data-' +
                      key +
                      '="' +
                      _this2.escapeForHtml(data2[key]) +
                      '"',
                  )
                }
              }
              return fragments.length > 0 ? ' ' + fragments.join(' ') : ''
            }
            if (jsonChunk.isInverted) {
              data['ansi-is-inverted'] = 'true'
            }
            if (jsonChunk.fg) {
              if (use_classes) {
                colors.push(jsonChunk.fg + '-fg')
                if (jsonChunk.fg_truecolor !== null) {
                  data['ansi-truecolor-fg'] = jsonChunk.fg_truecolor
                  jsonChunk.fg_truecolor = null
                }
              } else {
                colors.push('color:rgb(' + jsonChunk.fg + ')')
              }
            }
            if (jsonChunk.bg) {
              if (use_classes) {
                colors.push(jsonChunk.bg + '-bg')
                if (jsonChunk.bg_truecolor !== null) {
                  data['ansi-truecolor-bg'] = jsonChunk.bg_truecolor
                  jsonChunk.bg_truecolor = null
                }
              } else {
                colors.push('background-color:rgb(' + jsonChunk.bg + ')')
              }
            }
            jsonChunk.decorations.forEach(function (decoration) {
              if (use_classes) {
                decorations.push('ansi-' + decoration)
                return
              }
              if (decoration === 'bold') {
                decorations.push('font-weight:bold')
              } else if (decoration === 'dim') {
                decorations.push('opacity:0.5')
              } else if (decoration === 'italic') {
                decorations.push('font-style:italic')
              } else if (decoration === 'hidden') {
                decorations.push('visibility:hidden')
              } else if (decoration === 'strikethrough') {
                textDecorations.push('line-through')
              } else {
                textDecorations.push(decoration)
              }
            })
            if (textDecorations.length) {
              decorations.push('text-decoration:' + textDecorations.join(' '))
            }
            if (use_classes) {
              return (
                '<span class="' +
                colors.concat(decorations).join(' ') +
                '"' +
                render_data(data) +
                '>' +
                jsonChunk.content +
                '</span>'
              )
            } else {
              return (
                '<span style="' +
                colors.concat(decorations).join(';') +
                '"' +
                render_data(data) +
                '>' +
                jsonChunk.content +
                '</span>'
              )
            }
          },
        },
        {
          key: 'removeDecoration',
          value: function removeDecoration(decoration) {
            var index = this.decorations.indexOf(decoration)
            if (index >= 0) {
              this.decorations.splice(index, 1)
            }
          },
        },
      ])
      return Anser3
    })()
    module.exports = Anser2
  },
})
var require_escape_carriage = __commonJS3({
  '../../node_modules/escape-carriage/index.js'(exports, module) {
    function escapeCarriageReturn2(txt) {
      if (!txt) return ''
      if (!/\r/.test(txt)) return txt
      txt = txt.replace(/\r+\n/gm, '\n')
      while (/\r./.test(txt)) {
        txt = txt.replace(
          /^([^\r\n]*)\r+([^\r\n]+)/gm,
          function (_, base, insert) {
            return insert + base.slice(insert.length)
          },
        )
      }
      return txt
    }
    function findLongestString(arr) {
      var longest = 0
      for (var i22 = 0; i22 < arr.length; i22++) {
        if (arr[longest].length <= arr[i22].length) {
          longest = i22
        }
      }
      return longest
    }
    function escapeSingleLineSafe(txt) {
      if (!/\r/.test(txt)) return txt
      var arr = txt.split('\r')
      var res = []
      while (arr.length > 0) {
        var longest = findLongestString(arr)
        res.push(arr[longest])
        arr = arr.slice(longest + 1)
      }
      return res.join('\r')
    }
    function escapeCarriageReturnSafe(txt) {
      if (!txt) return ''
      if (!/\r/.test(txt)) return txt
      if (!/\n/.test(txt)) return escapeSingleLineSafe(txt)
      txt = txt.replace(/\r+\n/gm, '\n')
      var idx = txt.lastIndexOf('\n')
      return (
        escapeCarriageReturn2(txt.slice(0, idx)) +
        '\n' +
        escapeSingleLineSafe(txt.slice(idx + 1))
      )
    }
    module.exports = escapeCarriageReturn2
    module.exports.escapeCarriageReturn = escapeCarriageReturn2
    module.exports.escapeCarriageReturnSafe = escapeCarriageReturnSafe
  },
})
var require_lz_string = __commonJS3({
  '../../node_modules/lz-string/libs/lz-string.js'(exports, module) {
    var LZString2 = (function () {
      var f2 = String.fromCharCode
      var keyStrBase64 =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
      var keyStrUriSafe =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$'
      var baseReverseDic = {}
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {}
          for (var i22 = 0; i22 < alphabet.length; i22++) {
            baseReverseDic[alphabet][alphabet.charAt(i22)] = i22
          }
        }
        return baseReverseDic[alphabet][character]
      }
      var LZString3 = {
        compressToBase64: function (input) {
          if (input == null) return ''
          var res = LZString3._compress(input, 6, function (a2) {
            return keyStrBase64.charAt(a2)
          })
          switch (res.length % 4) {
            default:
            case 0:
              return res
            case 1:
              return res + '==='
            case 2:
              return res + '=='
            case 3:
              return res + '='
          }
        },
        decompressFromBase64: function (input) {
          if (input == null) return ''
          if (input == '') return null
          return LZString3._decompress(input.length, 32, function (index) {
            return getBaseValue(keyStrBase64, input.charAt(index))
          })
        },
        compressToUTF16: function (input) {
          if (input == null) return ''
          return (
            LZString3._compress(input, 15, function (a2) {
              return f2(a2 + 32)
            }) + ' '
          )
        },
        decompressFromUTF16: function (compressed) {
          if (compressed == null) return ''
          if (compressed == '') return null
          return LZString3._decompress(
            compressed.length,
            16384,
            function (index) {
              return compressed.charCodeAt(index) - 32
            },
          )
        },
        //compress into uint8array (UCS-2 big endian format)
        compressToUint8Array: function (uncompressed) {
          var compressed = LZString3.compress(uncompressed)
          var buf = new Uint8Array(compressed.length * 2)
          for (
            var i22 = 0, TotalLen = compressed.length;
            i22 < TotalLen;
            i22++
          ) {
            var current_value = compressed.charCodeAt(i22)
            buf[i22 * 2] = current_value >>> 8
            buf[i22 * 2 + 1] = current_value % 256
          }
          return buf
        },
        //decompress from uint8array (UCS-2 big endian format)
        decompressFromUint8Array: function (compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString3.decompress(compressed)
          } else {
            var buf = new Array(compressed.length / 2)
            for (var i22 = 0, TotalLen = buf.length; i22 < TotalLen; i22++) {
              buf[i22] = compressed[i22 * 2] * 256 + compressed[i22 * 2 + 1]
            }
            var result = []
            buf.forEach(function (c22) {
              result.push(f2(c22))
            })
            return LZString3.decompress(result.join(''))
          }
        },
        //compress into a string that is already URI encoded
        compressToEncodedURIComponent: function (input) {
          if (input == null) return ''
          return LZString3._compress(input, 6, function (a2) {
            return keyStrUriSafe.charAt(a2)
          })
        },
        //decompress from an output of compressToEncodedURIComponent
        decompressFromEncodedURIComponent: function (input) {
          if (input == null) return ''
          if (input == '') return null
          input = input.replace(/ /g, '+')
          return LZString3._decompress(input.length, 32, function (index) {
            return getBaseValue(keyStrUriSafe, input.charAt(index))
          })
        },
        compress: function (uncompressed) {
          return LZString3._compress(uncompressed, 16, function (a2) {
            return f2(a2)
          })
        },
        _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null) return ''
          var i22,
            value,
            context_dictionary = {},
            context_dictionaryToCreate = {},
            context_c = '',
            context_wc = '',
            context_w = '',
            context_enlargeIn = 2,
            context_dictSize = 3,
            context_numBits = 2,
            context_data = [],
            context_data_val = 0,
            context_data_position = 0,
            ii
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii)
            if (
              !Object.prototype.hasOwnProperty.call(
                context_dictionary,
                context_c,
              )
            ) {
              context_dictionary[context_c] = context_dictSize++
              context_dictionaryToCreate[context_c] = true
            }
            context_wc = context_w + context_c
            if (
              Object.prototype.hasOwnProperty.call(
                context_dictionary,
                context_wc,
              )
            ) {
              context_w = context_wc
            } else {
              if (
                Object.prototype.hasOwnProperty.call(
                  context_dictionaryToCreate,
                  context_w,
                )
              ) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i22 = 0; i22 < context_numBits; i22++) {
                    context_data_val = context_data_val << 1
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0
                      context_data.push(getCharFromInt(context_data_val))
                      context_data_val = 0
                    } else {
                      context_data_position++
                    }
                  }
                  value = context_w.charCodeAt(0)
                  for (i22 = 0; i22 < 8; i22++) {
                    context_data_val = (context_data_val << 1) | (value & 1)
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0
                      context_data.push(getCharFromInt(context_data_val))
                      context_data_val = 0
                    } else {
                      context_data_position++
                    }
                    value = value >> 1
                  }
                } else {
                  value = 1
                  for (i22 = 0; i22 < context_numBits; i22++) {
                    context_data_val = (context_data_val << 1) | value
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0
                      context_data.push(getCharFromInt(context_data_val))
                      context_data_val = 0
                    } else {
                      context_data_position++
                    }
                    value = 0
                  }
                  value = context_w.charCodeAt(0)
                  for (i22 = 0; i22 < 16; i22++) {
                    context_data_val = (context_data_val << 1) | (value & 1)
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0
                      context_data.push(getCharFromInt(context_data_val))
                      context_data_val = 0
                    } else {
                      context_data_position++
                    }
                    value = value >> 1
                  }
                }
                context_enlargeIn--
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits)
                  context_numBits++
                }
                delete context_dictionaryToCreate[context_w]
              } else {
                value = context_dictionary[context_w]
                for (i22 = 0; i22 < context_numBits; i22++) {
                  context_data_val = (context_data_val << 1) | (value & 1)
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0
                    context_data.push(getCharFromInt(context_data_val))
                    context_data_val = 0
                  } else {
                    context_data_position++
                  }
                  value = value >> 1
                }
              }
              context_enlargeIn--
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits)
                context_numBits++
              }
              context_dictionary[context_wc] = context_dictSize++
              context_w = String(context_c)
            }
          }
          if (context_w !== '') {
            if (
              Object.prototype.hasOwnProperty.call(
                context_dictionaryToCreate,
                context_w,
              )
            ) {
              if (context_w.charCodeAt(0) < 256) {
                for (i22 = 0; i22 < context_numBits; i22++) {
                  context_data_val = context_data_val << 1
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0
                    context_data.push(getCharFromInt(context_data_val))
                    context_data_val = 0
                  } else {
                    context_data_position++
                  }
                }
                value = context_w.charCodeAt(0)
                for (i22 = 0; i22 < 8; i22++) {
                  context_data_val = (context_data_val << 1) | (value & 1)
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0
                    context_data.push(getCharFromInt(context_data_val))
                    context_data_val = 0
                  } else {
                    context_data_position++
                  }
                  value = value >> 1
                }
              } else {
                value = 1
                for (i22 = 0; i22 < context_numBits; i22++) {
                  context_data_val = (context_data_val << 1) | value
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0
                    context_data.push(getCharFromInt(context_data_val))
                    context_data_val = 0
                  } else {
                    context_data_position++
                  }
                  value = 0
                }
                value = context_w.charCodeAt(0)
                for (i22 = 0; i22 < 16; i22++) {
                  context_data_val = (context_data_val << 1) | (value & 1)
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0
                    context_data.push(getCharFromInt(context_data_val))
                    context_data_val = 0
                  } else {
                    context_data_position++
                  }
                  value = value >> 1
                }
              }
              context_enlargeIn--
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits)
                context_numBits++
              }
              delete context_dictionaryToCreate[context_w]
            } else {
              value = context_dictionary[context_w]
              for (i22 = 0; i22 < context_numBits; i22++) {
                context_data_val = (context_data_val << 1) | (value & 1)
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0
                  context_data.push(getCharFromInt(context_data_val))
                  context_data_val = 0
                } else {
                  context_data_position++
                }
                value = value >> 1
              }
            }
            context_enlargeIn--
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits)
              context_numBits++
            }
          }
          value = 2
          for (i22 = 0; i22 < context_numBits; i22++) {
            context_data_val = (context_data_val << 1) | (value & 1)
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0
              context_data.push(getCharFromInt(context_data_val))
              context_data_val = 0
            } else {
              context_data_position++
            }
            value = value >> 1
          }
          while (true) {
            context_data_val = context_data_val << 1
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val))
              break
            } else context_data_position++
          }
          return context_data.join('')
        },
        decompress: function (compressed) {
          if (compressed == null) return ''
          if (compressed == '') return null
          return LZString3._decompress(
            compressed.length,
            32768,
            function (index) {
              return compressed.charCodeAt(index)
            },
          )
        },
        _decompress: function (length, resetValue, getNextValue) {
          var dictionary = [],
            next,
            enlargeIn = 4,
            dictSize = 4,
            numBits = 3,
            entry2 = '',
            result = [],
            i22,
            w2,
            bits,
            resb,
            maxpower,
            power,
            c22,
            data = {
              val: getNextValue(0),
              position: resetValue,
              index: 1,
            }
          for (i22 = 0; i22 < 3; i22 += 1) {
            dictionary[i22] = i22
          }
          bits = 0
          maxpower = Math.pow(2, 2)
          power = 1
          while (power != maxpower) {
            resb = data.val & data.position
            data.position >>= 1
            if (data.position == 0) {
              data.position = resetValue
              data.val = getNextValue(data.index++)
            }
            bits |= (resb > 0 ? 1 : 0) * power
            power <<= 1
          }
          switch ((next = bits)) {
            case 0:
              bits = 0
              maxpower = Math.pow(2, 8)
              power = 1
              while (power != maxpower) {
                resb = data.val & data.position
                data.position >>= 1
                if (data.position == 0) {
                  data.position = resetValue
                  data.val = getNextValue(data.index++)
                }
                bits |= (resb > 0 ? 1 : 0) * power
                power <<= 1
              }
              c22 = f2(bits)
              break
            case 1:
              bits = 0
              maxpower = Math.pow(2, 16)
              power = 1
              while (power != maxpower) {
                resb = data.val & data.position
                data.position >>= 1
                if (data.position == 0) {
                  data.position = resetValue
                  data.val = getNextValue(data.index++)
                }
                bits |= (resb > 0 ? 1 : 0) * power
                power <<= 1
              }
              c22 = f2(bits)
              break
            case 2:
              return ''
          }
          dictionary[3] = c22
          w2 = c22
          result.push(c22)
          while (true) {
            if (data.index > length) {
              return ''
            }
            bits = 0
            maxpower = Math.pow(2, numBits)
            power = 1
            while (power != maxpower) {
              resb = data.val & data.position
              data.position >>= 1
              if (data.position == 0) {
                data.position = resetValue
                data.val = getNextValue(data.index++)
              }
              bits |= (resb > 0 ? 1 : 0) * power
              power <<= 1
            }
            switch ((c22 = bits)) {
              case 0:
                bits = 0
                maxpower = Math.pow(2, 8)
                power = 1
                while (power != maxpower) {
                  resb = data.val & data.position
                  data.position >>= 1
                  if (data.position == 0) {
                    data.position = resetValue
                    data.val = getNextValue(data.index++)
                  }
                  bits |= (resb > 0 ? 1 : 0) * power
                  power <<= 1
                }
                dictionary[dictSize++] = f2(bits)
                c22 = dictSize - 1
                enlargeIn--
                break
              case 1:
                bits = 0
                maxpower = Math.pow(2, 16)
                power = 1
                while (power != maxpower) {
                  resb = data.val & data.position
                  data.position >>= 1
                  if (data.position == 0) {
                    data.position = resetValue
                    data.val = getNextValue(data.index++)
                  }
                  bits |= (resb > 0 ? 1 : 0) * power
                  power <<= 1
                }
                dictionary[dictSize++] = f2(bits)
                c22 = dictSize - 1
                enlargeIn--
                break
              case 2:
                return result.join('')
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits)
              numBits++
            }
            if (dictionary[c22]) {
              entry2 = dictionary[c22]
            } else {
              if (c22 === dictSize) {
                entry2 = w2 + w2.charAt(0)
              } else {
                return null
              }
            }
            result.push(entry2)
            dictionary[dictSize++] = w2 + entry2.charAt(0)
            enlargeIn--
            w2 = entry2
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits)
              numBits++
            }
          }
        },
      }
      return LZString3
    })()
    if (typeof define === 'function' && define.amd) {
      define(function () {
        return LZString2
      })
    } else if (typeof module !== 'undefined' && module != null) {
      module.exports = LZString2
    } else if (typeof angular !== 'undefined' && angular != null) {
      angular.module('LZString', []).factory('LZString', function () {
        return LZString2
      })
    }
  },
})
var t = 'colors'
var n = 'sizes'
var r = 'space'
var i = {
  gap: r,
  gridGap: r,
  columnGap: r,
  gridColumnGap: r,
  rowGap: r,
  gridRowGap: r,
  inset: r,
  insetBlock: r,
  insetBlockEnd: r,
  insetBlockStart: r,
  insetInline: r,
  insetInlineEnd: r,
  insetInlineStart: r,
  margin: r,
  marginTop: r,
  marginRight: r,
  marginBottom: r,
  marginLeft: r,
  marginBlock: r,
  marginBlockEnd: r,
  marginBlockStart: r,
  marginInline: r,
  marginInlineEnd: r,
  marginInlineStart: r,
  padding: r,
  paddingTop: r,
  paddingRight: r,
  paddingBottom: r,
  paddingLeft: r,
  paddingBlock: r,
  paddingBlockEnd: r,
  paddingBlockStart: r,
  paddingInline: r,
  paddingInlineEnd: r,
  paddingInlineStart: r,
  top: r,
  right: r,
  bottom: r,
  left: r,
  scrollMargin: r,
  scrollMarginTop: r,
  scrollMarginRight: r,
  scrollMarginBottom: r,
  scrollMarginLeft: r,
  scrollMarginX: r,
  scrollMarginY: r,
  scrollMarginBlock: r,
  scrollMarginBlockEnd: r,
  scrollMarginBlockStart: r,
  scrollMarginInline: r,
  scrollMarginInlineEnd: r,
  scrollMarginInlineStart: r,
  scrollPadding: r,
  scrollPaddingTop: r,
  scrollPaddingRight: r,
  scrollPaddingBottom: r,
  scrollPaddingLeft: r,
  scrollPaddingX: r,
  scrollPaddingY: r,
  scrollPaddingBlock: r,
  scrollPaddingBlockEnd: r,
  scrollPaddingBlockStart: r,
  scrollPaddingInline: r,
  scrollPaddingInlineEnd: r,
  scrollPaddingInlineStart: r,
  fontSize: 'fontSizes',
  background: t,
  backgroundColor: t,
  backgroundImage: t,
  borderImage: t,
  border: t,
  borderBlock: t,
  borderBlockEnd: t,
  borderBlockStart: t,
  borderBottom: t,
  borderBottomColor: t,
  borderColor: t,
  borderInline: t,
  borderInlineEnd: t,
  borderInlineStart: t,
  borderLeft: t,
  borderLeftColor: t,
  borderRight: t,
  borderRightColor: t,
  borderTop: t,
  borderTopColor: t,
  caretColor: t,
  color: t,
  columnRuleColor: t,
  fill: t,
  outline: t,
  outlineColor: t,
  stroke: t,
  textDecorationColor: t,
  fontFamily: 'fonts',
  fontWeight: 'fontWeights',
  lineHeight: 'lineHeights',
  letterSpacing: 'letterSpacings',
  blockSize: n,
  minBlockSize: n,
  maxBlockSize: n,
  inlineSize: n,
  minInlineSize: n,
  maxInlineSize: n,
  width: n,
  minWidth: n,
  maxWidth: n,
  height: n,
  minHeight: n,
  maxHeight: n,
  flexBasis: n,
  gridTemplateColumns: n,
  gridTemplateRows: n,
  borderWidth: 'borderWidths',
  borderTopWidth: 'borderWidths',
  borderRightWidth: 'borderWidths',
  borderBottomWidth: 'borderWidths',
  borderLeftWidth: 'borderWidths',
  borderStyle: 'borderStyles',
  borderTopStyle: 'borderStyles',
  borderRightStyle: 'borderStyles',
  borderBottomStyle: 'borderStyles',
  borderLeftStyle: 'borderStyles',
  borderRadius: 'radii',
  borderTopLeftRadius: 'radii',
  borderTopRightRadius: 'radii',
  borderBottomRightRadius: 'radii',
  borderBottomLeftRadius: 'radii',
  boxShadow: 'shadows',
  textShadow: 'shadows',
  transition: 'transitions',
  zIndex: 'zIndices',
}
var o = (e2, t22) =>
  'function' == typeof t22
    ? { '()': Function.prototype.toString.call(t22) }
    : t22
var l = () => {
  const e2 = /* @__PURE__ */ Object.create(null)
  return (t22, n2, ...r3) => {
    const i22 = ((e22) => JSON.stringify(e22, o))(t22)
    return i22 in e2 ? e2[i22] : (e2[i22] = n2(t22, ...r3))
  }
}
var s = Symbol.for('sxs.internal')
var a = (e2, t22) =>
  Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t22))
var c = (e2) => {
  for (const t22 in e2) return true
  return false
}
var { hasOwnProperty: d } = Object.prototype
var g = (e2) =>
  e2.includes('-') ? e2 : e2.replace(/[A-Z]/g, (e22) => '-' + e22.toLowerCase())
var p = /\s+(?![^()]*\))/
var u = (e2) => (t22) =>
  e2(...('string' == typeof t22 ? String(t22).split(p) : [t22]))
var h = {
  appearance: (e2) => ({ WebkitAppearance: e2, appearance: e2 }),
  backfaceVisibility: (e2) => ({
    WebkitBackfaceVisibility: e2,
    backfaceVisibility: e2,
  }),
  backdropFilter: (e2) => ({ WebkitBackdropFilter: e2, backdropFilter: e2 }),
  backgroundClip: (e2) => ({ WebkitBackgroundClip: e2, backgroundClip: e2 }),
  boxDecorationBreak: (e2) => ({
    WebkitBoxDecorationBreak: e2,
    boxDecorationBreak: e2,
  }),
  clipPath: (e2) => ({ WebkitClipPath: e2, clipPath: e2 }),
  content: (e2) => ({
    content:
      e2.includes('"') ||
      e2.includes("'") ||
      /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(
        e2,
      )
        ? e2
        : `"${e2}"`,
  }),
  hyphens: (e2) => ({ WebkitHyphens: e2, hyphens: e2 }),
  maskImage: (e2) => ({ WebkitMaskImage: e2, maskImage: e2 }),
  maskSize: (e2) => ({ WebkitMaskSize: e2, maskSize: e2 }),
  tabSize: (e2) => ({ MozTabSize: e2, tabSize: e2 }),
  textSizeAdjust: (e2) => ({ WebkitTextSizeAdjust: e2, textSizeAdjust: e2 }),
  userSelect: (e2) => ({ WebkitUserSelect: e2, userSelect: e2 }),
  marginBlock: u((e2, t22) => ({
    marginBlockStart: e2,
    marginBlockEnd: t22 || e2,
  })),
  marginInline: u((e2, t22) => ({
    marginInlineStart: e2,
    marginInlineEnd: t22 || e2,
  })),
  maxSize: u((e2, t22) => ({ maxBlockSize: e2, maxInlineSize: t22 || e2 })),
  minSize: u((e2, t22) => ({ minBlockSize: e2, minInlineSize: t22 || e2 })),
  paddingBlock: u((e2, t22) => ({
    paddingBlockStart: e2,
    paddingBlockEnd: t22 || e2,
  })),
  paddingInline: u((e2, t22) => ({
    paddingInlineStart: e2,
    paddingInlineEnd: t22 || e2,
  })),
}
var f = /([\d.]+)([^]*)/
var m = (e2, t22) =>
  e2.length
    ? e2.reduce(
        (e22, n2) => (
          e22.push(
            ...t22.map((e3) =>
              e3.includes('&')
                ? e3.replace(
                    /&/g,
                    /[ +>|~]/.test(n2) && /&.*&/.test(e3) ? `:is(${n2})` : n2,
                  )
                : n2 + ' ' + e3,
            ),
          ),
          e22
        ),
        [],
      )
    : t22
var b = (e2, t22) =>
  e2 in S && 'string' == typeof t22
    ? t22.replace(
        /^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/,
        (t3, n2, r3, i22) =>
          n2 +
          ('stretch' === r3
            ? `-moz-available${i22};${g(e2)}:${n2}-webkit-fill-available`
            : `-moz-fit-content${i22};${g(e2)}:${n2}fit-content`) +
          i22,
      )
    : String(t22)
var S = {
  blockSize: 1,
  height: 1,
  inlineSize: 1,
  maxBlockSize: 1,
  maxHeight: 1,
  maxInlineSize: 1,
  maxWidth: 1,
  minBlockSize: 1,
  minHeight: 1,
  minInlineSize: 1,
  minWidth: 1,
  width: 1,
}
var k = (e2) => (e2 ? e2 + '-' : '')
var y = (e2, t22, n2) =>
  e2.replace(
    /([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g,
    (e22, r3, i22, o2, l2) =>
      ('$' == o2) == !!i22
        ? e22
        : (r3 || '--' == o2 ? 'calc(' : '') +
          'var(--' +
          ('$' === o2
            ? k(t22) + (l2.includes('$') ? '' : k(n2)) + l2.replace(/\$/g, '-')
            : l2) +
          ')' +
          (r3 || '--' == o2 ? '*' + (r3 || '') + (i22 || '1') + ')' : ''),
  )
var B = /\s*,\s*(?![^()]*\))/
var $ = Object.prototype.toString
var x = (e2, t22, n2, r3, i22) => {
  let o2, l2, s2
  const a2 = (e22, t3, n3) => {
    let c22, d2
    const p2 = (e3) => {
      for (c22 in e3) {
        const x2 = 64 === c22.charCodeAt(0),
          z2 = x2 && Array.isArray(e3[c22]) ? e3[c22] : [e3[c22]]
        for (d2 of z2) {
          const e4 = /[A-Z]/.test((S2 = c22))
              ? S2
              : S2.replace(/-[^]/g, (e5) => e5[1].toUpperCase()),
            z3 =
              'object' == typeof d2 &&
              d2 &&
              d2.toString === $ &&
              (!r3.utils[e4] || !t3.length)
          if (e4 in r3.utils && !z3) {
            const t4 = r3.utils[e4]
            if (t4 !== l2) {
              ;(l2 = t4), p2(t4(d2)), (l2 = null)
              continue
            }
          } else if (e4 in h) {
            const t4 = h[e4]
            if (t4 !== s2) {
              ;(s2 = t4), p2(t4(d2)), (s2 = null)
              continue
            }
          }
          if (
            (x2 &&
              ((u2 =
                c22.slice(1) in r3.media
                  ? '@media ' + r3.media[c22.slice(1)]
                  : c22),
              (c22 = u2.replace(
                /\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g,
                (e5, t4, n4, r4, i3, o3) => {
                  const l3 = f.test(t4),
                    s3 = 0.0625 * (l3 ? -1 : 1),
                    [a3, c3] = l3 ? [r4, t4] : [t4, r4]
                  return (
                    '(' +
                    ('=' === n4[0]
                      ? ''
                      : ('>' === n4[0]) === l3
                        ? 'max-'
                        : 'min-') +
                    a3 +
                    ':' +
                    ('=' !== n4[0] && 1 === n4.length
                      ? c3.replace(
                          f,
                          (e6, t5, r5) =>
                            Number(t5) + s3 * ('>' === n4 ? 1 : -1) + r5,
                        )
                      : c3) +
                    (i3
                      ? ') and (' +
                        ('>' === i3[0] ? 'min-' : 'max-') +
                        a3 +
                        ':' +
                        (1 === i3.length
                          ? o3.replace(
                              f,
                              (e6, t5, n5) =>
                                Number(t5) + s3 * ('>' === i3 ? -1 : 1) + n5,
                            )
                          : o3)
                      : '') +
                    ')'
                  )
                },
              ))),
            z3)
          ) {
            const e5 = x2 ? n3.concat(c22) : [...n3],
              r4 = x2 ? [...t3] : m(t3, c22.split(B))
            void 0 !== o2 && i22(I(...o2)), (o2 = void 0), a2(d2, r4, e5)
          } else
            void 0 === o2 && (o2 = [[], t3, n3]),
              (c22 =
                x2 || 36 !== c22.charCodeAt(0)
                  ? c22
                  : `--${k(r3.prefix)}${c22.slice(1).replace(/\$/g, '-')}`),
              (d2 = z3
                ? d2
                : 'number' == typeof d2
                  ? d2 && e4 in R
                    ? String(d2) + 'px'
                    : String(d2)
                  : y(b(e4, null == d2 ? '' : d2), r3.prefix, r3.themeMap[e4])),
              o2[0].push(`${x2 ? `${c22} ` : `${g(c22)}:`}${d2}`)
        }
      }
      var u2, S2
    }
    p2(e22), void 0 !== o2 && i22(I(...o2)), (o2 = void 0)
  }
  a2(e2, t22, n2)
}
var I = (e2, t22, n2) =>
  `${n2.map((e22) => `${e22}{`).join('')}${t22.length ? `${t22.join(',')}{` : ''}${e2.join(';')}${t22.length ? '}' : ''}${Array(n2.length ? n2.length + 1 : 0).join('}')}`
var R = {
  animationDelay: 1,
  animationDuration: 1,
  backgroundSize: 1,
  blockSize: 1,
  border: 1,
  borderBlock: 1,
  borderBlockEnd: 1,
  borderBlockEndWidth: 1,
  borderBlockStart: 1,
  borderBlockStartWidth: 1,
  borderBlockWidth: 1,
  borderBottom: 1,
  borderBottomLeftRadius: 1,
  borderBottomRightRadius: 1,
  borderBottomWidth: 1,
  borderEndEndRadius: 1,
  borderEndStartRadius: 1,
  borderInlineEnd: 1,
  borderInlineEndWidth: 1,
  borderInlineStart: 1,
  borderInlineStartWidth: 1,
  borderInlineWidth: 1,
  borderLeft: 1,
  borderLeftWidth: 1,
  borderRadius: 1,
  borderRight: 1,
  borderRightWidth: 1,
  borderSpacing: 1,
  borderStartEndRadius: 1,
  borderStartStartRadius: 1,
  borderTop: 1,
  borderTopLeftRadius: 1,
  borderTopRightRadius: 1,
  borderTopWidth: 1,
  borderWidth: 1,
  bottom: 1,
  columnGap: 1,
  columnRule: 1,
  columnRuleWidth: 1,
  columnWidth: 1,
  containIntrinsicSize: 1,
  flexBasis: 1,
  fontSize: 1,
  gap: 1,
  gridAutoColumns: 1,
  gridAutoRows: 1,
  gridTemplateColumns: 1,
  gridTemplateRows: 1,
  height: 1,
  inlineSize: 1,
  inset: 1,
  insetBlock: 1,
  insetBlockEnd: 1,
  insetBlockStart: 1,
  insetInline: 1,
  insetInlineEnd: 1,
  insetInlineStart: 1,
  left: 1,
  letterSpacing: 1,
  margin: 1,
  marginBlock: 1,
  marginBlockEnd: 1,
  marginBlockStart: 1,
  marginBottom: 1,
  marginInline: 1,
  marginInlineEnd: 1,
  marginInlineStart: 1,
  marginLeft: 1,
  marginRight: 1,
  marginTop: 1,
  maxBlockSize: 1,
  maxHeight: 1,
  maxInlineSize: 1,
  maxWidth: 1,
  minBlockSize: 1,
  minHeight: 1,
  minInlineSize: 1,
  minWidth: 1,
  offsetDistance: 1,
  offsetRotate: 1,
  outline: 1,
  outlineOffset: 1,
  outlineWidth: 1,
  overflowClipMargin: 1,
  padding: 1,
  paddingBlock: 1,
  paddingBlockEnd: 1,
  paddingBlockStart: 1,
  paddingBottom: 1,
  paddingInline: 1,
  paddingInlineEnd: 1,
  paddingInlineStart: 1,
  paddingLeft: 1,
  paddingRight: 1,
  paddingTop: 1,
  perspective: 1,
  right: 1,
  rowGap: 1,
  scrollMargin: 1,
  scrollMarginBlock: 1,
  scrollMarginBlockEnd: 1,
  scrollMarginBlockStart: 1,
  scrollMarginBottom: 1,
  scrollMarginInline: 1,
  scrollMarginInlineEnd: 1,
  scrollMarginInlineStart: 1,
  scrollMarginLeft: 1,
  scrollMarginRight: 1,
  scrollMarginTop: 1,
  scrollPadding: 1,
  scrollPaddingBlock: 1,
  scrollPaddingBlockEnd: 1,
  scrollPaddingBlockStart: 1,
  scrollPaddingBottom: 1,
  scrollPaddingInline: 1,
  scrollPaddingInlineEnd: 1,
  scrollPaddingInlineStart: 1,
  scrollPaddingLeft: 1,
  scrollPaddingRight: 1,
  scrollPaddingTop: 1,
  shapeMargin: 1,
  textDecoration: 1,
  textDecorationThickness: 1,
  textIndent: 1,
  textUnderlineOffset: 1,
  top: 1,
  transitionDelay: 1,
  transitionDuration: 1,
  verticalAlign: 1,
  width: 1,
  wordSpacing: 1,
}
var z = (e2) => String.fromCharCode(e2 + (e2 > 25 ? 39 : 97))
var W = (e2) =>
  ((e22) => {
    let t22,
      n2 = ''
    for (t22 = Math.abs(e22); t22 > 52; t22 = (t22 / 52) | 0)
      n2 = z(t22 % 52) + n2
    return z(t22 % 52) + n2
  })(
    ((e22, t22) => {
      let n2 = t22.length
      for (; n2; ) e22 = (33 * e22) ^ t22.charCodeAt(--n2)
      return e22
    })(5381, JSON.stringify(e2)) >>> 0,
  )
var j = [
  'themed',
  'global',
  'styled',
  'onevar',
  'resonevar',
  'allvar',
  'inline',
]
var E = (e2) => {
  if (e2.href && !e2.href.startsWith(location.origin)) return false
  try {
    return !!e2.cssRules
  } catch (e22) {
    return false
  }
}
var T = (e2) => {
  let t22
  const n2 = () => {
      const { cssRules: e22 } = t22.sheet
      return [].map
        .call(e22, (n3, r4) => {
          const { cssText: i22 } = n3
          let o2 = ''
          if (i22.startsWith('--sxs')) return ''
          if (e22[r4 - 1] && (o2 = e22[r4 - 1].cssText).startsWith('--sxs')) {
            if (!n3.cssRules.length) return ''
            for (const e3 in t22.rules)
              if (t22.rules[e3].group === n3)
                return `--sxs{--sxs:${[...t22.rules[e3].cache].join(' ')}}${i22}`
            return n3.cssRules.length ? `${o2}${i22}` : ''
          }
          return i22
        })
        .join('')
    },
    r3 = () => {
      if (t22) {
        const { rules: e22, sheet: n3 } = t22
        if (!n3.deleteRule) {
          for (; 3 === Object(Object(n3.cssRules)[0]).type; )
            n3.cssRules.splice(0, 1)
          n3.cssRules = []
        }
        for (const t3 in e22) delete e22[t3]
      }
      const i22 = Object(e2).styleSheets || []
      for (const e22 of i22)
        if (E(e22)) {
          for (let i3 = 0, o3 = e22.cssRules; o3[i3]; ++i3) {
            const l3 = Object(o3[i3])
            if (1 !== l3.type) continue
            const s2 = Object(o3[i3 + 1])
            if (4 !== s2.type) continue
            ++i3
            const { cssText: a2 } = l3
            if (!a2.startsWith('--sxs')) continue
            const c22 = a2.slice(14, -3).trim().split(/\s+/),
              d2 = j[c22[0]]
            d2 &&
              (t22 ||
                (t22 = {
                  sheet: e22,
                  reset: r3,
                  rules: {},
                  toString: n2,
                }),
              (t22.rules[d2] = {
                group: s2,
                index: i3,
                cache: new Set(c22),
              }))
          }
          if (t22) break
        }
      if (!t22) {
        const i3 = (e22, t3) => ({
          type: t3,
          cssRules: [],
          insertRule(e3, t4) {
            this.cssRules.splice(
              t4,
              0,
              i3(
                e3,
                { import: 3, undefined: 1 }[
                  (e3.toLowerCase().match(/^@([a-z]+)/) || [])[1]
                ] || 4,
              ),
            )
          },
          get cssText() {
            return '@media{}' === e22
              ? `@media{${[].map.call(this.cssRules, (e3) => e3.cssText).join('')}}`
              : e22
          },
        })
        t22 = {
          sheet: e2
            ? (e2.head || e2).appendChild(document.createElement('style')).sheet
            : i3('', 'text/css'),
          rules: {},
          reset: r3,
          toString: n2,
        }
      }
      const { sheet: o2, rules: l2 } = t22
      for (let e22 = j.length - 1; e22 >= 0; --e22) {
        const t3 = j[e22]
        if (!l2[t3]) {
          const n3 = j[e22 + 1],
            r4 = l2[n3] ? l2[n3].index : o2.cssRules.length
          o2.insertRule('@media{}', r4),
            o2.insertRule(`--sxs{--sxs:${e22}}`, r4),
            (l2[t3] = {
              group: o2.cssRules[r4 + 1],
              index: r4,
              cache: /* @__PURE__ */ new Set([e22]),
            })
        }
        v(l2[t3])
      }
    }
  return r3(), t22
}
var v = (e2) => {
  const t22 = e2.group
  let n2 = t22.cssRules.length
  e2.apply = (e22) => {
    try {
      t22.insertRule(e22, n2), ++n2
    } catch (e3) {}
  }
}
var M = Symbol()
var w = l()
var C = (e2, t22) =>
  w(e2, () => (...n2) => {
    let r3 = { type: null, composers: /* @__PURE__ */ new Set() }
    for (const t3 of n2)
      if (null != t3)
        if (t3[s]) {
          null == r3.type && (r3.type = t3[s].type)
          for (const e22 of t3[s].composers) r3.composers.add(e22)
        } else
          t3.constructor !== Object || t3.$$typeof
            ? null == r3.type && (r3.type = t3)
            : r3.composers.add(P(t3, e2))
    return (
      null == r3.type && (r3.type = 'span'),
      r3.composers.size || r3.composers.add(['PJLV', {}, [], [], {}, []]),
      L(e2, r3, t22)
    )
  })
var P = (
  { variants: e2, compoundVariants: t22, defaultVariants: n2, ...r3 },
  i22,
) => {
  const o2 = `${k(i22.prefix)}c-${W(r3)}`,
    l2 = [],
    s2 = [],
    a2 = /* @__PURE__ */ Object.create(null),
    g2 = []
  for (const e22 in n2) a2[e22] = String(n2[e22])
  if ('object' == typeof e2 && e2)
    for (const t3 in e2) {
      ;(p2 = a2), (u2 = t3), d.call(p2, u2) || (a2[t3] = 'undefined')
      const n3 = e2[t3]
      for (const e22 in n3) {
        const r4 = { [t3]: String(e22) }
        'undefined' === String(e22) && g2.push(t3)
        const i3 = n3[e22],
          o3 = [r4, i3, !c(i3)]
        l2.push(o3)
      }
    }
  var p2, u2
  if ('object' == typeof t22 && t22)
    for (const e22 of t22) {
      let { css: t3, ...n3 } = e22
      t3 = ('object' == typeof t3 && t3) || {}
      for (const e3 in n3) n3[e3] = String(n3[e3])
      const r4 = [n3, t3, !c(t3)]
      s2.push(r4)
    }
  return [o2, r3, l2, s2, a2, g2]
}
var L = (e2, t22, n2) => {
  const [r3, i22, o2, l2] = O(t22.composers),
    c22 =
      'function' == typeof t22.type || t22.type.$$typeof
        ? ((e22) => {
            function t3() {
              for (let n3 = 0; n3 < t3[M].length; n3++) {
                const [r4, i3] = t3[M][n3]
                e22.rules[r4].apply(i3)
              }
              return (t3[M] = []), null
            }
            return (
              (t3[M] = []),
              (t3.rules = {}),
              j.forEach(
                (e3) =>
                  (t3.rules[e3] = {
                    apply: (n3) => t3[M].push([e3, n3]),
                  }),
              ),
              t3
            )
          })(n2)
        : null,
    d2 = (c22 || n2).rules,
    g2 = `.${r3}${i22.length > 1 ? `:where(.${i22.slice(1).join('.')})` : ''}`,
    p2 = (s2) => {
      s2 = ('object' == typeof s2 && s2) || D
      const { css: a2, ...p3 } = s2,
        u2 = {}
      for (const e22 in o2)
        if ((delete p3[e22], e22 in s2)) {
          let t3 = s2[e22]
          'object' == typeof t3 && t3
            ? (u2[e22] = { '@initial': o2[e22], ...t3 })
            : ((t3 = String(t3)),
              (u2[e22] = 'undefined' !== t3 || l2.has(e22) ? t3 : o2[e22]))
        } else u2[e22] = o2[e22]
      const h2 = /* @__PURE__ */ new Set([...i22])
      for (const [r4, i3, o3, l3] of t22.composers) {
        n2.rules.styled.cache.has(r4) ||
          (n2.rules.styled.cache.add(r4),
          x(i3, [`.${r4}`], [], e2, (e22) => {
            d2.styled.apply(e22)
          }))
        const t3 = A(o3, u2, e2.media),
          s3 = A(l3, u2, e2.media, true)
        for (const i4 of t3)
          if (void 0 !== i4)
            for (const [t4, o4, l4] of i4) {
              const i5 = `${r4}-${W(o4)}-${t4}`
              h2.add(i5)
              const s4 = (l4 ? n2.rules.resonevar : n2.rules.onevar).cache,
                a3 = l4 ? d2.resonevar : d2.onevar
              s4.has(i5) ||
                (s4.add(i5),
                x(o4, [`.${i5}`], [], e2, (e22) => {
                  a3.apply(e22)
                }))
            }
        for (const t4 of s3)
          if (void 0 !== t4)
            for (const [i4, o4] of t4) {
              const t5 = `${r4}-${W(o4)}-${i4}`
              h2.add(t5),
                n2.rules.allvar.cache.has(t5) ||
                  (n2.rules.allvar.cache.add(t5),
                  x(o4, [`.${t5}`], [], e2, (e22) => {
                    d2.allvar.apply(e22)
                  }))
            }
      }
      if ('object' == typeof a2 && a2) {
        const t3 = `${r3}-i${W(a2)}-css`
        h2.add(t3),
          n2.rules.inline.cache.has(t3) ||
            (n2.rules.inline.cache.add(t3),
            x(a2, [`.${t3}`], [], e2, (e22) => {
              d2.inline.apply(e22)
            }))
      }
      for (const e22 of String(s2.className || '')
        .trim()
        .split(/\s+/))
        e22 && h2.add(e22)
      const f2 = (p3.className = [...h2].join(' '))
      return {
        type: t22.type,
        className: f2,
        selector: g2,
        props: p3,
        toString: () => f2,
        deferredInjector: c22,
      }
    }
  return a(p2, {
    className: r3,
    selector: g2,
    [s]: t22,
    toString: () => (n2.rules.styled.cache.has(r3) || p2(), r3),
  })
}
var O = (e2) => {
  let t22 = ''
  const n2 = [],
    r3 = {},
    i22 = []
  for (const [o2, , , , l2, s2] of e2) {
    '' === t22 && (t22 = o2), n2.push(o2), i22.push(...s2)
    for (const e22 in l2) {
      const t3 = l2[e22]
      ;(void 0 === r3[e22] || 'undefined' !== t3 || s2.includes(t3)) &&
        (r3[e22] = t3)
    }
  }
  return [t22, n2, r3, new Set(i22)]
}
var A = (e2, t22, n2, r3) => {
  const i22 = []
  e: for (let [o2, l2, s2] of e2) {
    if (s2) continue
    let e22,
      a2 = 0,
      c22 = false
    for (e22 in o2) {
      const r4 = o2[e22]
      let i3 = t22[e22]
      if (i3 !== r4) {
        if ('object' != typeof i3 || !i3) continue e
        {
          let e3,
            t3,
            o3 = 0
          for (const l3 in i3) {
            if (r4 === String(i3[l3])) {
              if ('@initial' !== l3) {
                const e4 = l3.slice(1)
                ;(t3 = t3 || []).push(
                  e4 in n2 ? n2[e4] : l3.replace(/^@media ?/, ''),
                ),
                  (c22 = true)
              }
              ;(a2 += o3), (e3 = true)
            }
            ++o3
          }
          if (
            (t3 && t3.length && (l2 = { ['@media ' + t3.join(', ')]: l2 }), !e3)
          )
            continue e
        }
      }
    }
    ;(i22[a2] = i22[a2] || []).push([r3 ? 'cv' : `${e22}-${o2[e22]}`, l2, c22])
  }
  return i22
}
var D = {}
var H = l()
var N = (e2, t22) =>
  H(e2, () => (...n2) => {
    const r3 = () => {
      for (let r4 of n2) {
        r4 = ('object' == typeof r4 && r4) || {}
        let n3 = W(r4)
        if (!t22.rules.global.cache.has(n3)) {
          if ((t22.rules.global.cache.add(n3), '@import' in r4)) {
            let e22 =
              [].indexOf.call(t22.sheet.cssRules, t22.rules.themed.group) - 1
            for (let n4 of [].concat(r4['@import']))
              (n4 = n4.includes('"') || n4.includes("'") ? n4 : `"${n4}"`),
                t22.sheet.insertRule(`@import ${n4};`, e22++)
            delete r4['@import']
          }
          x(r4, [], [], e2, (e22) => {
            t22.rules.global.apply(e22)
          })
        }
      }
      return ''
    }
    return a(r3, { toString: r3 })
  })
var V = l()
var G = (e2, t22) =>
  V(e2, () => (n2) => {
    const r3 = `${k(e2.prefix)}k-${W(n2)}`,
      i22 = () => {
        if (!t22.rules.global.cache.has(r3)) {
          t22.rules.global.cache.add(r3)
          const i3 = []
          x(n2, [], [], e2, (e22) => i3.push(e22))
          const o2 = `@keyframes ${r3}{${i3.join('')}}`
          t22.rules.global.apply(o2)
        }
        return r3
      }
    return a(i22, {
      get name() {
        return i22()
      },
      toString: i22,
    })
  })
var F = class {
  get computedValue() {
    return 'var(' + this.variable + ')'
  }
  get variable() {
    return '--' + k(this.prefix) + k(this.scale) + this.token
  }
  toString() {
    return this.computedValue
  }
  constructor(e2, t22, n2, r3) {
    ;(this.token = null == e2 ? '' : String(e2)),
      (this.value = null == t22 ? '' : String(t22)),
      (this.scale = null == n2 ? '' : String(n2)),
      (this.prefix = null == r3 ? '' : String(r3))
  }
}
var J = l()
var U = (e2, t22) =>
  J(e2, () => (n2, r3) => {
    r3 = ('object' == typeof n2 && n2) || Object(r3)
    const i22 = `.${(n2 = (n2 = 'string' == typeof n2 ? n2 : '') || `${k(e2.prefix)}t-${W(r3)}`)}`,
      o2 = {},
      l2 = []
    for (const t3 in r3) {
      o2[t3] = {}
      for (const n3 in r3[t3]) {
        const i3 = `--${k(e2.prefix)}${t3}-${n3}`,
          s3 = y(String(r3[t3][n3]), e2.prefix, t3)
        ;(o2[t3][n3] = new F(n3, s3, t3, e2.prefix)), l2.push(`${i3}:${s3}`)
      }
    }
    const s2 = () => {
      if (l2.length && !t22.rules.themed.cache.has(n2)) {
        t22.rules.themed.cache.add(n2)
        const i3 = `${r3 === e2.theme ? ':root,' : ''}.${n2}{${l2.join(';')}}`
        t22.rules.themed.apply(i3)
      }
      return n2
    }
    return {
      ...o2,
      get className() {
        return s2()
      },
      selector: i22,
      toString: s2,
    }
  })
var Z = l()
var X = (e2) => {
  let t22 = false
  const n2 = Z(e2, (e22) => {
    t22 = true
    const n3 =
        'prefix' in (e22 = ('object' == typeof e22 && e22) || {})
          ? String(e22.prefix)
          : '',
      r3 = ('object' == typeof e22.media && e22.media) || {},
      o2 =
        'object' == typeof e22.root
          ? e22.root || null
          : globalThis.document || null,
      l2 = ('object' == typeof e22.theme && e22.theme) || {},
      s2 = {
        prefix: n3,
        media: r3,
        theme: l2,
        themeMap: ('object' == typeof e22.themeMap && e22.themeMap) || {
          ...i,
        },
        utils: ('object' == typeof e22.utils && e22.utils) || {},
      },
      a2 = T(o2),
      c22 = {
        css: C(s2, a2),
        globalCss: N(s2, a2),
        keyframes: G(s2, a2),
        createTheme: U(s2, a2),
        reset() {
          a2.reset(), c22.theme.toString()
        },
        theme: {},
        sheet: a2,
        config: s2,
        prefix: n3,
        getCssText: a2.toString,
        toString: a2.toString,
      }
    return String((c22.theme = c22.createTheme(l2))), c22
  })
  return t22 || n2.reset(), n2
}
var has2 = Object.prototype.hasOwnProperty
function find2(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal2(key, tar)) return key
  }
}
function dequal2(foo, bar) {
  var ctor, len, tmp
  if (foo === bar) return true
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date) return foo.getTime() === bar.getTime()
    if (ctor === RegExp) return foo.toString() === bar.toString()
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal2(foo[len], bar[len]));
      }
      return len === -1
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false
      }
      for (len of foo) {
        tmp = len
        if (tmp && typeof tmp === 'object') {
          tmp = find2(bar, tmp)
          if (!tmp) return false
        }
        if (!bar.has(tmp)) return false
      }
      return true
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false
      }
      for (len of foo) {
        tmp = len[0]
        if (tmp && typeof tmp === 'object') {
          tmp = find2(bar, tmp)
          if (!tmp) return false
        }
        if (!dequal2(len[1], bar.get(tmp))) {
          return false
        }
      }
      return true
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo)
      bar = new Uint8Array(bar)
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len));
      }
      return len === -1
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len]);
      }
      return len === -1
    }
    if (!ctor || typeof foo === 'object') {
      len = 0
      for (ctor in foo) {
        if (has2.call(foo, ctor) && ++len && !has2.call(bar, ctor)) return false
        if (!(ctor in bar) || !dequal2(foo[ctor], bar[ctor])) return false
      }
      return Object.keys(bar).length === len
    }
  }
  return foo !== foo && bar !== bar
}
;(function () {
  'use strict'
  if (typeof window !== 'object') {
    return
  }
  if (
    'IntersectionObserver' in window &&
    'IntersectionObserverEntry' in window &&
    'intersectionRatio' in window.IntersectionObserverEntry.prototype
  ) {
    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
      Object.defineProperty(
        window.IntersectionObserverEntry.prototype,
        'isIntersecting',
        {
          get: function () {
            return this.intersectionRatio > 0
          },
        },
      )
    }
    return
  }
  var document2 = window.document
  var registry = []
  var crossOriginUpdater = null
  var crossOriginRect = null
  function IntersectionObserverEntry(entry2) {
    this.time = entry2.time
    this.target = entry2.target
    this.rootBounds = ensureDOMRect(entry2.rootBounds)
    this.boundingClientRect = ensureDOMRect(entry2.boundingClientRect)
    this.intersectionRect = ensureDOMRect(
      entry2.intersectionRect || getEmptyRect(),
    )
    this.isIntersecting = !!entry2.intersectionRect
    var targetRect = this.boundingClientRect
    var targetArea = targetRect.width * targetRect.height
    var intersectionRect = this.intersectionRect
    var intersectionArea = intersectionRect.width * intersectionRect.height
    if (targetArea) {
      this.intersectionRatio = Number(
        (intersectionArea / targetArea).toFixed(4),
      )
    } else {
      this.intersectionRatio = this.isIntersecting ? 1 : 0
    }
  }
  function IntersectionObserver2(callback, opt_options) {
    var options = opt_options || {}
    if (typeof callback != 'function') {
      throw new Error('callback must be a function')
    }
    if (options.root && options.root.nodeType != 1) {
      throw new Error('root must be an Element')
    }
    this._checkForIntersections = throttle(
      this._checkForIntersections.bind(this),
      this.THROTTLE_TIMEOUT,
    )
    this._callback = callback
    this._observationTargets = []
    this._queuedEntries = []
    this._rootMarginValues = this._parseRootMargin(options.rootMargin)
    this.thresholds = this._initThresholds(options.threshold)
    this.root = options.root || null
    this.rootMargin = this._rootMarginValues
      .map(function (margin) {
        return margin.value + margin.unit
      })
      .join(' ')
    this._monitoringDocuments = []
    this._monitoringUnsubscribes = []
  }
  IntersectionObserver2.prototype.THROTTLE_TIMEOUT = 100
  IntersectionObserver2.prototype.POLL_INTERVAL = null
  IntersectionObserver2.prototype.USE_MUTATION_OBSERVER = true
  IntersectionObserver2._setupCrossOriginUpdater = function () {
    if (!crossOriginUpdater) {
      crossOriginUpdater = function (boundingClientRect, intersectionRect) {
        if (!boundingClientRect || !intersectionRect) {
          crossOriginRect = getEmptyRect()
        } else {
          crossOriginRect = convertFromParentRect(
            boundingClientRect,
            intersectionRect,
          )
        }
        registry.forEach(function (observer) {
          observer._checkForIntersections()
        })
      }
    }
    return crossOriginUpdater
  }
  IntersectionObserver2._resetCrossOriginUpdater = function () {
    crossOriginUpdater = null
    crossOriginRect = null
  }
  IntersectionObserver2.prototype.observe = function (target) {
    var isTargetAlreadyObserved = this._observationTargets.some(
      function (item) {
        return item.element == target
      },
    )
    if (isTargetAlreadyObserved) {
      return
    }
    if (!(target && target.nodeType == 1)) {
      throw new Error('target must be an Element')
    }
    this._registerInstance()
    this._observationTargets.push({ element: target, entry: null })
    this._monitorIntersections(target.ownerDocument)
    this._checkForIntersections()
  }
  IntersectionObserver2.prototype.unobserve = function (target) {
    this._observationTargets = this._observationTargets.filter(function (item) {
      return item.element != target
    })
    this._unmonitorIntersections(target.ownerDocument)
    if (this._observationTargets.length == 0) {
      this._unregisterInstance()
    }
  }
  IntersectionObserver2.prototype.disconnect = function () {
    this._observationTargets = []
    this._unmonitorAllIntersections()
    this._unregisterInstance()
  }
  IntersectionObserver2.prototype.takeRecords = function () {
    var records = this._queuedEntries.slice()
    this._queuedEntries = []
    return records
  }
  IntersectionObserver2.prototype._initThresholds = function (opt_threshold) {
    var threshold = opt_threshold || [0]
    if (!Array.isArray(threshold)) threshold = [threshold]
    return threshold.sort().filter(function (t22, i22, a2) {
      if (typeof t22 != 'number' || isNaN(t22) || t22 < 0 || t22 > 1) {
        throw new Error(
          'threshold must be a number between 0 and 1 inclusively',
        )
      }
      return t22 !== a2[i22 - 1]
    })
  }
  IntersectionObserver2.prototype._parseRootMargin = function (opt_rootMargin) {
    var marginString = opt_rootMargin || '0px'
    var margins = marginString.split(/\s+/).map(function (margin) {
      var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin)
      if (!parts) {
        throw new Error('rootMargin must be specified in pixels or percent')
      }
      return { value: parseFloat(parts[1]), unit: parts[2] }
    })
    margins[1] = margins[1] || margins[0]
    margins[2] = margins[2] || margins[0]
    margins[3] = margins[3] || margins[1]
    return margins
  }
  IntersectionObserver2.prototype._monitorIntersections = function (doc) {
    var win = doc.defaultView
    if (!win) {
      return
    }
    if (this._monitoringDocuments.indexOf(doc) != -1) {
      return
    }
    var callback = this._checkForIntersections
    var monitoringInterval = null
    var domObserver = null
    if (this.POLL_INTERVAL) {
      monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL)
    } else {
      addEvent(win, 'resize', callback, true)
      addEvent(doc, 'scroll', callback, true)
      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {
        domObserver = new win.MutationObserver(callback)
        domObserver.observe(doc, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true,
        })
      }
    }
    this._monitoringDocuments.push(doc)
    this._monitoringUnsubscribes.push(function () {
      var win2 = doc.defaultView
      if (win2) {
        if (monitoringInterval) {
          win2.clearInterval(monitoringInterval)
        }
        removeEvent(win2, 'resize', callback, true)
      }
      removeEvent(doc, 'scroll', callback, true)
      if (domObserver) {
        domObserver.disconnect()
      }
    })
    if (doc != ((this.root && this.root.ownerDocument) || document2)) {
      var frame = getFrameElement(doc)
      if (frame) {
        this._monitorIntersections(frame.ownerDocument)
      }
    }
  }
  IntersectionObserver2.prototype._unmonitorIntersections = function (doc) {
    var index = this._monitoringDocuments.indexOf(doc)
    if (index == -1) {
      return
    }
    var rootDoc = (this.root && this.root.ownerDocument) || document2
    var hasDependentTargets = this._observationTargets.some(function (item) {
      var itemDoc = item.element.ownerDocument
      if (itemDoc == doc) {
        return true
      }
      while (itemDoc && itemDoc != rootDoc) {
        var frame2 = getFrameElement(itemDoc)
        itemDoc = frame2 && frame2.ownerDocument
        if (itemDoc == doc) {
          return true
        }
      }
      return false
    })
    if (hasDependentTargets) {
      return
    }
    var unsubscribe = this._monitoringUnsubscribes[index]
    this._monitoringDocuments.splice(index, 1)
    this._monitoringUnsubscribes.splice(index, 1)
    unsubscribe()
    if (doc != rootDoc) {
      var frame = getFrameElement(doc)
      if (frame) {
        this._unmonitorIntersections(frame.ownerDocument)
      }
    }
  }
  IntersectionObserver2.prototype._unmonitorAllIntersections = function () {
    var unsubscribes = this._monitoringUnsubscribes.slice(0)
    this._monitoringDocuments.length = 0
    this._monitoringUnsubscribes.length = 0
    for (var i22 = 0; i22 < unsubscribes.length; i22++) {
      unsubscribes[i22]()
    }
  }
  IntersectionObserver2.prototype._checkForIntersections = function () {
    if (!this.root && crossOriginUpdater && !crossOriginRect) {
      return
    }
    var rootIsInDom = this._rootIsInDom()
    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect()
    this._observationTargets.forEach(function (item) {
      var target = item.element
      var targetRect = getBoundingClientRect(target)
      var rootContainsTarget = this._rootContainsTarget(target)
      var oldEntry = item.entry
      var intersectionRect =
        rootIsInDom &&
        rootContainsTarget &&
        this._computeTargetAndRootIntersection(target, targetRect, rootRect)
      var newEntry = (item.entry = new IntersectionObserverEntry({
        time: now(),
        target,
        boundingClientRect: targetRect,
        rootBounds: crossOriginUpdater && !this.root ? null : rootRect,
        intersectionRect,
      }))
      if (!oldEntry) {
        this._queuedEntries.push(newEntry)
      } else if (rootIsInDom && rootContainsTarget) {
        if (this._hasCrossedThreshold(oldEntry, newEntry)) {
          this._queuedEntries.push(newEntry)
        }
      } else {
        if (oldEntry && oldEntry.isIntersecting) {
          this._queuedEntries.push(newEntry)
        }
      }
    }, this)
    if (this._queuedEntries.length) {
      this._callback(this.takeRecords(), this)
    }
  }
  IntersectionObserver2.prototype._computeTargetAndRootIntersection = function (
    target,
    targetRect,
    rootRect,
  ) {
    if (window.getComputedStyle(target).display == 'none') return
    var intersectionRect = targetRect
    var parent2 = getParentNode(target)
    var atRoot = false
    while (!atRoot && parent2) {
      var parentRect = null
      var parentComputedStyle =
        parent2.nodeType == 1 ? window.getComputedStyle(parent2) : {}
      if (parentComputedStyle.display == 'none') return null
      if (parent2 == this.root || parent2.nodeType == 9) {
        atRoot = true
        if (parent2 == this.root || parent2 == document2) {
          if (crossOriginUpdater && !this.root) {
            if (
              !crossOriginRect ||
              (crossOriginRect.width == 0 && crossOriginRect.height == 0)
            ) {
              parent2 = null
              parentRect = null
              intersectionRect = null
            } else {
              parentRect = crossOriginRect
            }
          } else {
            parentRect = rootRect
          }
        } else {
          var frame = getParentNode(parent2)
          var frameRect = frame && getBoundingClientRect(frame)
          var frameIntersect =
            frame &&
            this._computeTargetAndRootIntersection(frame, frameRect, rootRect)
          if (frameRect && frameIntersect) {
            parent2 = frame
            parentRect = convertFromParentRect(frameRect, frameIntersect)
          } else {
            parent2 = null
            intersectionRect = null
          }
        }
      } else {
        var doc = parent2.ownerDocument
        if (
          parent2 != doc.body &&
          parent2 != doc.documentElement &&
          parentComputedStyle.overflow != 'visible'
        ) {
          parentRect = getBoundingClientRect(parent2)
        }
      }
      if (parentRect) {
        intersectionRect = computeRectIntersection(parentRect, intersectionRect)
      }
      if (!intersectionRect) break
      parent2 = parent2 && getParentNode(parent2)
    }
    return intersectionRect
  }
  IntersectionObserver2.prototype._getRootRect = function () {
    var rootRect
    if (this.root) {
      rootRect = getBoundingClientRect(this.root)
    } else {
      var html2 = document2.documentElement
      var body = document2.body
      rootRect = {
        top: 0,
        left: 0,
        right: html2.clientWidth || body.clientWidth,
        width: html2.clientWidth || body.clientWidth,
        bottom: html2.clientHeight || body.clientHeight,
        height: html2.clientHeight || body.clientHeight,
      }
    }
    return this._expandRectByRootMargin(rootRect)
  }
  IntersectionObserver2.prototype._expandRectByRootMargin = function (rect) {
    var margins = this._rootMarginValues.map(function (margin, i22) {
      return margin.unit == 'px'
        ? margin.value
        : (margin.value * (i22 % 2 ? rect.width : rect.height)) / 100
    })
    var newRect = {
      top: rect.top - margins[0],
      right: rect.right + margins[1],
      bottom: rect.bottom + margins[2],
      left: rect.left - margins[3],
    }
    newRect.width = newRect.right - newRect.left
    newRect.height = newRect.bottom - newRect.top
    return newRect
  }
  IntersectionObserver2.prototype._hasCrossedThreshold = function (
    oldEntry,
    newEntry,
  ) {
    var oldRatio =
      oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1
    var newRatio = newEntry.isIntersecting
      ? newEntry.intersectionRatio || 0
      : -1
    if (oldRatio === newRatio) return
    for (var i22 = 0; i22 < this.thresholds.length; i22++) {
      var threshold = this.thresholds[i22]
      if (
        threshold == oldRatio ||
        threshold == newRatio ||
        threshold < oldRatio !== threshold < newRatio
      ) {
        return true
      }
    }
  }
  IntersectionObserver2.prototype._rootIsInDom = function () {
    return !this.root || containsDeep(document2, this.root)
  }
  IntersectionObserver2.prototype._rootContainsTarget = function (target) {
    return (
      containsDeep(this.root || document2, target) &&
      (!this.root || this.root.ownerDocument == target.ownerDocument)
    )
  }
  IntersectionObserver2.prototype._registerInstance = function () {
    if (registry.indexOf(this) < 0) {
      registry.push(this)
    }
  }
  IntersectionObserver2.prototype._unregisterInstance = function () {
    var index = registry.indexOf(this)
    if (index != -1) registry.splice(index, 1)
  }
  function now() {
    return window.performance && performance.now && performance.now()
  }
  function throttle(fn, timeout) {
    var timer = null
    return function () {
      if (!timer) {
        timer = setTimeout(function () {
          fn()
          timer = null
        }, timeout)
      }
    }
  }
  function addEvent(node, event, fn, opt_useCapture) {
    if (typeof node.addEventListener == 'function') {
      node.addEventListener(event, fn, opt_useCapture || false)
    } else if (typeof node.attachEvent == 'function') {
      node.attachEvent('on' + event, fn)
    }
  }
  function removeEvent(node, event, fn, opt_useCapture) {
    if (typeof node.removeEventListener == 'function') {
      node.removeEventListener(event, fn, opt_useCapture || false)
    } else if (typeof node.detatchEvent == 'function') {
      node.detatchEvent('on' + event, fn)
    }
  }
  function computeRectIntersection(rect1, rect2) {
    var top = Math.max(rect1.top, rect2.top)
    var bottom = Math.min(rect1.bottom, rect2.bottom)
    var left = Math.max(rect1.left, rect2.left)
    var right = Math.min(rect1.right, rect2.right)
    var width = right - left
    var height = bottom - top
    return (
      (width >= 0 &&
        height >= 0 && { top, bottom, left, right, width, height }) ||
      null
    )
  }
  function getBoundingClientRect(el) {
    var rect
    try {
      rect = el.getBoundingClientRect()
    } catch (err) {}
    if (!rect) return getEmptyRect()
    if (!(rect.width && rect.height)) {
      rect = {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top,
      }
    }
    return rect
  }
  function getEmptyRect() {
    return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 }
  }
  function ensureDOMRect(rect) {
    if (!rect || 'x' in rect) {
      return rect
    }
    return {
      top: rect.top,
      y: rect.top,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      right: rect.right,
      width: rect.width,
      height: rect.height,
    }
  }
  function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {
    var top = parentIntersectionRect.top - parentBoundingRect.top
    var left = parentIntersectionRect.left - parentBoundingRect.left
    return {
      top,
      left,
      height: parentIntersectionRect.height,
      width: parentIntersectionRect.width,
      bottom: top + parentIntersectionRect.height,
      right: left + parentIntersectionRect.width,
    }
  }
  function containsDeep(parent2, child) {
    var node = child
    while (node) {
      if (node == parent2) return true
      node = getParentNode(node)
    }
    return false
  }
  function getParentNode(node) {
    var parent2 = node.parentNode
    if (node.nodeType == 9 && node != document2) {
      return getFrameElement(node)
    }
    if (parent2 && parent2.nodeType == 11 && parent2.host) {
      return parent2.host
    }
    if (parent2 && parent2.assignedSlot) {
      return parent2.assignedSlot.parentNode
    }
    return parent2
  }
  function getFrameElement(doc) {
    try {
      return (doc.defaultView && doc.defaultView.frameElement) || null
    } catch (e2) {
      return null
    }
  }
  window.IntersectionObserver = IntersectionObserver2
  window.IntersectionObserverEntry = IntersectionObserverEntry
})()
var usePassiveLayoutEffect =
  React[
    typeof document !== 'undefined' && document.createElement !== void 0
      ? 'useLayoutEffect'
      : 'useEffect'
  ]
var module_default = usePassiveLayoutEffect
function useIntersectionObserver(target, options = {}) {
  const {
    root = null,
    pollInterval = null,
    useMutationObserver = false,
    rootMargin = '0px 0px 0px 0px',
    threshold = 0,
    initialIsIntersecting = false,
  } = options
  const [entry2, setEntry] = React2.useState(() => ({
    boundingClientRect: null,
    intersectionRatio: 0,
    intersectionRect: null,
    isIntersecting: initialIsIntersecting,
    rootBounds: null,
    target: null,
    time: 0,
  }))
  const [observer, setObserver] = React2.useState(() =>
    getIntersectionObserver({
      root,
      pollInterval,
      useMutationObserver,
      rootMargin,
      threshold,
    }),
  )
  React2.useEffect(() => {
    const observer2 = getIntersectionObserver({
      root,
      pollInterval,
      useMutationObserver,
      rootMargin,
      threshold,
    })
    setObserver(observer2)
  }, [
    root,
    rootMargin,
    pollInterval,
    useMutationObserver,
    JSON.stringify(threshold),
  ])
  module_default(() => {
    const targetEl = target && 'current' in target ? target.current : target
    if (!observer || !targetEl) return
    let didUnsubscribe = false
    observer.observer.observe(targetEl)
    const callback = (entries2) => {
      if (didUnsubscribe) return
      for (let i22 = 0; i22 < entries2.length; i22++) {
        const entry22 = entries2[i22]
        if (entry22.target === targetEl) {
          setEntry(entry22)
        }
      }
    }
    observer.subscribe(callback)
    return () => {
      didUnsubscribe = true
      observer.observer.unobserve(targetEl)
      observer.unsubscribe(callback)
    }
  }, [target, observer])
  return entry2
}
function createIntersectionObserver({
  root = null,
  pollInterval = null,
  useMutationObserver = false,
  rootMargin = '0px 0px 0px 0px',
  threshold = 0,
}) {
  const callbacks = /* @__PURE__ */ new Set()
  if (typeof IntersectionObserver === 'undefined') return null
  const observer = new IntersectionObserver(
    (entries2) => {
      for (const callback of callbacks) callback(entries2, observer)
    },
    { root, rootMargin, threshold },
  )
  observer.POLL_INTERVAL = pollInterval
  observer.USE_MUTATION_OBSERVER = useMutationObserver
  return {
    observer,
    getListeners() {
      return callbacks
    },
    subscribe: (callback) => callbacks.add(callback),
    unsubscribe: (callback) => callbacks.delete(callback),
  }
}
var _intersectionObserver = /* @__PURE__ */ new Map()
function getIntersectionObserver(options) {
  const { root, ...keys } = options
  const key = JSON.stringify(keys)
  let base = _intersectionObserver.get(root)
  if (!base) {
    base = {}
    _intersectionObserver.set(root, base)
  }
  return !base[key]
    ? (base[key] = createIntersectionObserver(options))
    : base[key]
}
var module_default2 = useIntersectionObserver
var import_anser = __toESM3(require_lib2(), 1)
var import_escape_carriage = __toESM3(require_escape_carriage(), 1)
var import_lz_string = __toESM3(require_lz_string(), 1)
var __assign2 = function () {
  __assign2 =
    Object.assign ||
    function __assign22(t22) {
      for (var s2, i22 = 1, n2 = arguments.length; i22 < n2; i22++) {
        s2 = arguments[i22]
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2)) t22[p2] = s2[p2]
      }
      return t22
    }
  return __assign2.apply(this, arguments)
}
function __rest(s2, e2) {
  var t22 = {}
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t22[p2] = s2[p2]
  if (s2 != null && typeof Object.getOwnPropertySymbols === 'function')
    for (
      var i22 = 0, p2 = Object.getOwnPropertySymbols(s2);
      i22 < p2.length;
      i22++
    ) {
      if (
        e2.indexOf(p2[i22]) < 0 &&
        Object.prototype.propertyIsEnumerable.call(s2, p2[i22])
      )
        t22[p2[i22]] = s2[p2[i22]]
    }
  return t22
}
function __awaiter2(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2
      ? value
      : new P2(function (resolve) {
          resolve(value)
        })
  }
  return new (P2 || (P2 = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value))
      } catch (e2) {
        reject(e2)
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value))
      } catch (e2) {
        reject(e2)
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : adopt(result.value).then(fulfilled, rejected)
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next())
  })
}
function __generator2(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t22[0] & 1) throw t22[1]
        return t22[1]
      },
      trys: [],
      ops: [],
    },
    f2,
    y2,
    t22,
    g2
  return (
    (g2 = { next: verb(0), throw: verb(1), return: verb(2) }),
    typeof Symbol === 'function' &&
      (g2[Symbol.iterator] = function () {
        return this
      }),
    g2
  )
  function verb(n2) {
    return function (v2) {
      return step([n2, v2])
    }
  }
  function step(op) {
    if (f2) throw new TypeError('Generator is already executing.')
    while (_)
      try {
        if (
          ((f2 = 1),
          y2 &&
            (t22 =
              op[0] & 2
                ? y2['return']
                : op[0]
                  ? y2['throw'] || ((t22 = y2['return']) && t22.call(y2), 0)
                  : y2.next) &&
            !(t22 = t22.call(y2, op[1])).done)
        )
          return t22
        if (((y2 = 0), t22)) op = [op[0] & 2, t22.value]
        switch (op[0]) {
          case 0:
          case 1:
            t22 = op
            break
          case 4:
            _.label++
            return { value: op[1], done: false }
          case 5:
            _.label++
            y2 = op[1]
            op = [0]
            continue
          case 7:
            op = _.ops.pop()
            _.trys.pop()
            continue
          default:
            if (
              !((t22 = _.trys),
              (t22 = t22.length > 0 && t22[t22.length - 1])) &&
              (op[0] === 6 || op[0] === 2)
            ) {
              _ = 0
              continue
            }
            if (op[0] === 3 && (!t22 || (op[1] > t22[0] && op[1] < t22[3]))) {
              _.label = op[1]
              break
            }
            if (op[0] === 6 && _.label < t22[1]) {
              _.label = t22[1]
              t22 = op
              break
            }
            if (t22 && _.label < t22[2]) {
              _.label = t22[2]
              _.ops.push(op)
              break
            }
            if (t22[2]) _.ops.pop()
            _.trys.pop()
            continue
        }
        op = body.call(thisArg, _)
      } catch (e2) {
        op = [6, e2]
        y2 = 0
      } finally {
        f2 = t22 = 0
      }
    if (op[0] & 5) throw op[1]
    return { value: op[0] ? op[1] : void 0, done: true }
  }
}
function __spreadArray2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i22 = 0, l2 = from.length, ar; i22 < l2; i22++) {
      if (ar || !(i22 in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i22)
        ar[i22] = from[i22]
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from))
}
var SVG = function (props) {
  return jsx(
    'svg',
    __assign2(
      {
        fill: 'currentColor',
        height: '16',
        viewBox: '0 0 16 16',
        width: '16',
        xmlns: 'http://www.w3.org/2000/svg',
      },
      props,
    ),
  )
}
var RunIcon = function () {
  return jsxs(SVG, {
    children: [
      jsx('title', { children: 'Run sandbox' }),
      jsx('path', {
        d: 'M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z',
      }),
    ],
  })
}
var CloseIcon = function () {
  return jsxs(SVG, {
    stroke: 'currentColor',
    children: [
      jsx('title', { children: 'Close file' }),
      jsx('path', { d: 'M12 4L4 12', strokeLinecap: 'round' }),
      jsx('path', { d: 'M4 4L12 12', strokeLinecap: 'round' }),
    ],
  })
}
var _a$a
var defaultLight = {
  colors: {
    surface1: '#ffffff',
    surface2: '#EFEFEF',
    surface3: '#F3F3F3',
    disabled: '#C5C5C5',
    base: '#323232',
    clickable: '#808080',
    hover: '#4D4D4D',
    accent: '#3973E0',
    error: '#EA3323',
    errorSurface: '#FCF1F0',
    warning: '#6A4516',
    warningSurface: '#FEF2C0',
  },
  syntax: {
    plain: '#151515',
    comment: { color: '#999', fontStyle: 'italic' },
    keyword: '#7C5AE3',
    tag: '#0971F1',
    punctuation: '#3B3B3B',
    definition: '#85A600',
    property: '#3B3B3B',
    static: '#3B3B3B',
    string: '#2E6BD0',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var defaultDark = {
  colors: {
    surface1: '#151515',
    surface2: '#252525',
    surface3: '#2F2F2F',
    disabled: '#4D4D4D',
    base: '#808080',
    clickable: '#999999',
    hover: '#C5C5C5',
    accent: '#E5E5E5',
    error: '#FFB4A6',
    errorSurface: '#690000',
    warning: '#E7C400',
    warningSurface: '#3A3000',
  },
  syntax: {
    plain: '#FFFFFF',
    comment: { color: '#757575', fontStyle: 'italic' },
    keyword: '#77B7D7',
    tag: '#DFAB5C',
    punctuation: '#ffffff',
    definition: '#86D9CA',
    property: '#77B7D7',
    static: '#C64640',
    string: '#977CDC',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var SANDPACK_THEMES = {
  light: defaultLight,
  dark: defaultDark,
  auto:
    typeof window !== 'undefined'
      ? (
          (_a$a =
            window === null || window === void 0
              ? void 0
              : window.matchMedia) === null || _a$a === void 0
            ? void 0
            : _a$a.call(window, '(prefers-color-scheme: dark)').matches
        )
        ? defaultDark
        : defaultLight
      : defaultLight,
}
var getFileName = function (filePath) {
  var lastIndexOfSlash = filePath.lastIndexOf('/')
  return filePath.slice(lastIndexOfSlash + 1)
}
var calculateNearestUniquePath = function (currentPath, otherPaths) {
  var currentPathParts = (
    currentPath[0] === '/' ? currentPath.slice(1) : currentPath
  ).split('/')
  var resultPathParts = []
  if (currentPathParts.length === 1) {
    resultPathParts.unshift(currentPathParts[0])
  } else {
    for (var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++) {
      var otherPathParts = otherPaths[fileIndex].split('/')
      for (
        var partsFromEnd = 1;
        partsFromEnd <= currentPathParts.length;
        partsFromEnd++
      ) {
        var currentPathPart =
          currentPathParts[currentPathParts.length - partsFromEnd]
        var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd]
        if (resultPathParts.length < partsFromEnd) {
          resultPathParts.unshift(currentPathPart)
        }
        if (currentPathPart !== otherPathPart) {
          break
        }
      }
    }
  }
  if (resultPathParts.length < currentPathParts.length) {
    resultPathParts.unshift('..')
  }
  return resultPathParts.join('/')
}
var isDarkColor = function (color2) {
  var r3 = 0
  var g2 = 0
  var b2 = 0
  if (color2.startsWith('#')) {
    if (color2.length < 7) {
      return true
    }
    r3 = parseInt(color2.substr(1, 2), 16)
    g2 = parseInt(color2.substr(3, 2), 16)
    b2 = parseInt(color2.substr(5, 2), 16)
  } else {
    var rgbValues = color2
      .replace('rgb(', '')
      .replace('rgba(', '')
      .replace(')', '')
      .split(',')
    if (rgbValues.length < 3) {
      return true
    }
    r3 = parseInt(rgbValues[0], 10)
    g2 = parseInt(rgbValues[1], 10)
    b2 = parseInt(rgbValues[2], 10)
  }
  var yiq = (r3 * 299 + g2 * 587 + b2 * 114) / 1e3
  return yiq < 128
}
var lastCount = 0
var generateRandomId2 = function () {
  var random = +(Date.now().toString(10).substr(0, 4) + lastCount++)
  return random.toString(16)
}
var toString = function () {
  return ''
}
var defineProperty = Object.getOwnPropertyDescriptors({ toString })
Object.defineProperties(toString, defineProperty)
var _a$9
var THEME_PREFIX = 'sp'
var createTheme = ((_a$9 = X({ prefix: THEME_PREFIX })), _a$9.createTheme)
var css2 = _a$9.css
var getCssText = _a$9.getCssText
var keyframes = _a$9.keyframes
var defaultVariables = {
  space: new Array(11).fill(' ').reduce(function (acc, _, index) {
    var _a22
    return __assign2(
      __assign2({}, acc),
      ((_a22 = {}), (_a22[index + 1] = ''.concat((index + 1) * 4, 'px')), _a22),
    )
  }, {}),
  border: { radius: '4px' },
  layout: { height: '300px', headerHeight: '40px' },
  transitions: { default: '150ms ease' },
  zIndices: { base: '1', overlay: '2', top: '3' },
}
var standardizeStitchesTheme = function (theme) {
  var syntaxEntries = Object.entries(theme.syntax)
  var syntax = syntaxEntries.reduce(function (tokenAcc, _a22) {
    var _b22
    var tokenName = _a22[0],
      tokenValue = _a22[1]
    var newValues =
      ((_b22 = {}), (_b22['color-'.concat(tokenName)] = tokenValue), _b22)
    if (typeof tokenValue === 'object') {
      newValues = Object.entries(tokenValue).reduce(function (valueAcc, _a3) {
        var _b3
        var styleProp = _a3[0],
          styleValue = _a3[1]
        return __assign2(
          __assign2({}, valueAcc),
          ((_b3 = {}),
          (_b3[''.concat(styleProp, '-').concat(tokenName)] = styleValue),
          _b3),
        )
      }, {})
    }
    return __assign2(__assign2({}, tokenAcc), newValues)
  }, {})
  return __assign2(__assign2({}, defaultVariables), {
    colors: theme.colors,
    font: theme.font,
    syntax,
  })
}
var standardizeTheme = function (inputTheme) {
  var _a22, _b22, _c2, _d, _e
  if (inputTheme === void 0) {
    inputTheme = 'light'
  }
  var defaultLightThemeKey = 'default'
  if (typeof inputTheme === 'string') {
    var predefinedTheme = SANDPACK_THEMES[inputTheme]
    if (!predefinedTheme) {
      throw new Error(
        "[sandpack-react]: invalid theme '".concat(inputTheme, "' provided."),
      )
    }
    return {
      theme: predefinedTheme,
      id: inputTheme,
      mode: isDarkColor(predefinedTheme.colors.surface1) ? 'dark' : 'light',
    }
  }
  var mode = isDarkColor(
    (_b22 =
      (_a22 =
        inputTheme === null || inputTheme === void 0
          ? void 0
          : inputTheme.colors) === null || _a22 === void 0
        ? void 0
        : _a22.surface1) !== null && _b22 !== void 0
      ? _b22
      : defaultLight.colors.surface1,
  )
    ? 'dark'
    : 'light'
  var baseTheme = mode === 'dark' ? defaultDark : defaultLight
  var colorsByMode = __assign2(
    __assign2({}, baseTheme.colors),
    (_c2 =
      inputTheme === null || inputTheme === void 0
        ? void 0
        : inputTheme.colors) !== null && _c2 !== void 0
      ? _c2
      : {},
  )
  var syntaxByMode = __assign2(
    __assign2({}, baseTheme.syntax),
    (_d =
      inputTheme === null || inputTheme === void 0
        ? void 0
        : inputTheme.syntax) !== null && _d !== void 0
      ? _d
      : {},
  )
  var fontByMode = __assign2(
    __assign2({}, baseTheme.font),
    (_e =
      inputTheme === null || inputTheme === void 0
        ? void 0
        : inputTheme.font) !== null && _e !== void 0
      ? _e
      : {},
  )
  var theme = { colors: colorsByMode, syntax: syntaxByMode, font: fontByMode }
  var id = inputTheme
    ? simpleHashFunction(JSON.stringify(theme))
    : defaultLightThemeKey
  return { theme, id: 'sp-'.concat(id), mode }
}
var simpleHashFunction = function (str) {
  var hash = 0
  for (var i22 = 0; i22 < str.length; hash &= hash) {
    hash = 31 * hash + str.charCodeAt(i22++)
  }
  return Math.abs(hash)
}
var fakeCss = function () {
  return ''
}
fakeCss.toString = fakeCss
var ClassNamesContext = /* @__PURE__ */ createContext2({})
var ClassNamesProvider = function (_a22) {
  var children = _a22.children,
    classes = _a22.classes
  return jsx(ClassNamesContext.Provider, { value: classes || {}, children })
}
var useClassNames = function () {
  var contextClassNames = useContext2(ClassNamesContext)
  return function sandpackClassNames(customClassName, allClassNames) {
    if (allClassNames === void 0) {
      allClassNames = []
    }
    var custom = ''.concat(THEME_PREFIX, '-').concat(customClassName)
    return joinClassNames.apply(
      void 0,
      __spreadArray2(
        __spreadArray2([], allClassNames, false),
        [custom, contextClassNames[custom]],
        false,
      ),
    )
  }
}
var joinClassNames = function () {
  var args = []
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2]
  }
  return args.filter(Boolean).join(' ')
}
var wrapperClassName$3 = css2({
  all: 'initial',
  fontSize: '$font$size',
  fontFamily: '$font$body',
  display: 'block',
  boxSizing: 'border-box',
  textRendering: 'optimizeLegibility',
  WebkitTapHighlightColor: 'transparent',
  WebkitFontSmoothing: 'subpixel-antialiased',
  variants: {
    variant: {
      dark: { colorScheme: 'dark' },
      light: { colorScheme: 'light' },
    },
  },
  '@media screen and (min-resolution: 2dppx)': {
    WebkitFontSmoothing: 'antialiased',
    MozOsxFontSmoothing: 'grayscale',
  },
  '*': { boxSizing: 'border-box' },
  '.sp-wrapper:focus': { outline: '0' },
})
var SandpackThemeContext = /* @__PURE__ */ React3.createContext({
  theme: defaultLight,
  id: 'light',
  mode: 'light',
})
var SandpackThemeProvider = function (_a22) {
  var themeFromProps = _a22.theme,
    children = _a22.children,
    className = _a22.className,
    props = __rest(_a22, ['theme', 'children', 'className'])
  var _b22 = React3.useState(themeFromProps),
    prefferedTheme = _b22[0],
    setPreferredTheme = _b22[1]
  var _c2 = standardizeTheme(prefferedTheme),
    theme = _c2.theme,
    id = _c2.id,
    mode = _c2.mode
  var classNames = useClassNames()
  var themeClassName = React3.useMemo(
    function () {
      return createTheme(id, standardizeStitchesTheme(theme))
    },
    [theme, id],
  )
  React3.useEffect(
    function () {
      if (themeFromProps !== 'auto') {
        setPreferredTheme(themeFromProps)
        return
      }
      var colorSchemeChange = function (_a3) {
        var matches = _a3.matches
        setPreferredTheme(matches ? 'dark' : 'light')
      }
      window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', colorSchemeChange)
      return function () {
        window
          .matchMedia('(prefers-color-scheme: dark)')
          .removeEventListener('change', colorSchemeChange)
      }
    },
    [themeFromProps],
  )
  return jsx(SandpackThemeContext.Provider, {
    value: { theme, id, mode },
    children: jsx(
      'div',
      __assign2(
        {
          className: classNames('wrapper', [
            themeClassName,
            wrapperClassName$3({ variant: mode }),
            className,
          ]),
        },
        props,
        { children },
      ),
    ),
  })
}
var SandpackThemeConsumer = SandpackThemeContext.Consumer
var commonFiles = {
  '/styles.css': {
    code: 'body {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n\nh1 {\n  font-size: 1.5rem;\n}',
  },
}
var ASTRO_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/pages/index.astro': {
      code: '---\nimport "../styles.css";\nconst data = "world";\n---\n\n<h1>Hello {data}</h1>\n\n<style>\n  h1 {\n    font-size: 1.5rem;\n  }\n</style>',
    },
    '.env': { code: 'ASTRO_TELEMETRY_DISABLED="1"' },
    '/package.json': {
      code: JSON.stringify({
        dependencies: { astro: '^1.6.12', 'esbuild-wasm': '^0.15.16' },
        scripts: {
          dev: 'astro dev',
          start: 'astro dev',
          build: 'astro build',
          preview: 'astro preview',
          astro: 'astro',
        },
      }),
    },
  },
  main: '/src/pages/index.astro',
  environment: 'node',
}
var NEXTJS_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/pages/_app.js': {
      code: "import '../styles.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}",
    },
    '/pages/index.js': {
      code: 'export default function Home({ data }) {\n  return (\n    <div>\n      <h1>Hello {data}</h1>\n    </div>\n  );\n}\n  \nexport function getServerSideProps() {\n  return {\n    props: { data: "world" },\n  }\n}\n',
    },
    '/next.config.js': {
      code: "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n}\n\nmodule.exports = nextConfig\n",
    },
    '/package.json': {
      code: JSON.stringify({
        name: 'my-app',
        version: '0.1.0',
        private: true,
        scripts: {
          dev: 'NEXT_TELEMETRY_DISABLED=1 next dev',
          build: 'next build',
          start: 'next start',
          lint: 'next lint',
        },
        dependencies: {
          next: '12.1.6',
          react: '18.2.0',
          'react-dom': '18.2.0',
          '@next/swc-wasm-nodejs': '12.1.6',
        },
      }),
    },
  }),
  main: '/pages/index.js',
  environment: 'node',
}
var NODE_TEMPLATE = {
  files: {
    '/index.js': {
      code: "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.end('Hello world');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});",
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: {},
        scripts: { start: 'node index.js' },
        main: 'index.js',
      }),
    },
  },
  main: '/index.js',
  environment: 'node',
}
var VITE_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/index.js': {
      code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/index.js"><\/script>\n  </body>\n</html>\n',
    },
    '/package.json': {
      code: JSON.stringify({
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview',
        },
        devDependencies: { vite: '4.1.4', 'esbuild-wasm': '0.17.12' },
      }),
    },
  }),
  main: '/index.js',
  environment: 'node',
}
var VITE_PREACT_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.jsx': {
      code: 'export default function App() {\n  const data = "world"\n\n  return <h1>Hello {data}</h1>\n}\n',
    },
    '/index.jsx': {
      code: 'import { render } from "preact";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = document.getElementById("root");\nrender(<App />, root);\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.jsx"><\/script>\n  </body>\n</html>\n',
    },
    '/package.json': {
      code: JSON.stringify({
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview',
        },
        dependencies: { preact: '^10.16.0' },
        devDependencies: {
          '@preact/preset-vite': '^2.5.0',
          vite: '4.1.4',
          'esbuild-wasm': '0.17.12',
        },
      }),
    },
    '/vite.config.js': {
      code: `import { defineConfig } from "vite";
import preact from '@preact/preset-vite'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [preact()],
});
`,
    },
  }),
  main: '/App.jsx',
  environment: 'node',
}
var VITE_PREACT_TS_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.tsx': {
      code: 'export default function App() {\n  const data: string = "world"\n\n  return <h1>Hello {data}</h1>\n}\n',
    },
    '/index.tsx': {
      code: 'import { render } from "preact";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = document.getElementById("root") as HTMLElement;\nrender(<App />, root);\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.tsx"><\/script>\n  </body>\n</html>\n',
    },
    '/tsconfig.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            target: 'ESNext',
            useDefineForClassFields: true,
            lib: ['DOM', 'DOM.Iterable', 'ESNext'],
            allowJs: false,
            skipLibCheck: true,
            esModuleInterop: false,
            allowSyntheticDefaultImports: true,
            strict: true,
            forceConsistentCasingInFileNames: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            resolveJsonModule: true,
            isolatedModules: true,
            noEmit: true,
            jsx: 'react-jsx',
            jsxImportSource: 'preact',
          },
          include: ['src'],
          references: [{ path: './tsconfig.node.json' }],
        },
        null,
        2,
      ),
    },
    '/tsconfig.node.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            composite: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            allowSyntheticDefaultImports: true,
          },
          include: ['vite.config.ts'],
        },
        null,
        2,
      ),
    },
    '/package.json': {
      code: JSON.stringify(
        {
          scripts: {
            dev: 'vite',
            build: 'tsc && vite build',
            preview: 'vite preview',
          },
          dependencies: { preact: '^10.16.0' },
          devDependencies: {
            '@preact/preset-vite': '^2.5.0',
            typescript: '^4.9.5',
            vite: '4.1.4',
            'esbuild-wasm': '^0.17.12',
          },
        },
        null,
        2,
      ),
    },
    '/vite-env.d.ts': { code: '/// <reference types="vite/client" />' },
    '/vite.config.ts': {
      code: "import { defineConfig } from 'vite'\nimport preact from '@preact/preset-vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [preact()],\n})\n",
    },
  }),
  main: '/App.tsx',
  environment: 'node',
}
var VITE_REACT_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.jsx': {
      code: 'export default function App() {\n  const data = "world"\n\n  return <h1>Hello {data}</h1>\n}\n',
    },
    '/index.jsx': {
      code: 'import { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.jsx"><\/script>\n  </body>\n</html>\n',
    },
    '/package.json': {
      code: JSON.stringify({
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview',
        },
        dependencies: { react: '^18.2.0', 'react-dom': '^18.2.0' },
        devDependencies: {
          '@vitejs/plugin-react': '3.1.0',
          vite: '4.1.4',
          'esbuild-wasm': '0.17.12',
        },
      }),
    },
    '/vite.config.js': {
      code: 'import { defineConfig } from "vite";\nimport react from "@vitejs/plugin-react";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n});\n',
    },
  }),
  main: '/App.jsx',
  environment: 'node',
}
var VITE_REACT_TS_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.tsx': {
      code: 'export default function App() {\n  const data: string = "world"\n\n  return <h1>Hello {data}</h1>\n}\n',
    },
    '/index.tsx': {
      code: 'import { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\nimport React from "react";\n\nconst root = createRoot(document.getElementById("root") as HTMLElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.tsx"><\/script>\n  </body>\n</html>\n',
    },
    '/tsconfig.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            target: 'ESNext',
            useDefineForClassFields: true,
            lib: ['DOM', 'DOM.Iterable', 'ESNext'],
            allowJs: false,
            skipLibCheck: true,
            esModuleInterop: false,
            allowSyntheticDefaultImports: true,
            strict: true,
            forceConsistentCasingInFileNames: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            resolveJsonModule: true,
            isolatedModules: true,
            noEmit: true,
            jsx: 'react-jsx',
          },
          include: ['src'],
          references: [{ path: './tsconfig.node.json' }],
        },
        null,
        2,
      ),
    },
    '/tsconfig.node.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            composite: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            allowSyntheticDefaultImports: true,
          },
          include: ['vite.config.ts'],
        },
        null,
        2,
      ),
    },
    '/package.json': {
      code: JSON.stringify(
        {
          scripts: {
            dev: 'vite',
            build: 'tsc && vite build',
            preview: 'vite preview',
          },
          dependencies: { react: '^18.2.0', 'react-dom': '^18.2.0' },
          devDependencies: {
            '@types/react': '^18.0.28',
            '@types/react-dom': '^18.0.11',
            '@vitejs/plugin-react': '^3.1.0',
            typescript: '^4.9.5',
            vite: '4.1.4',
            'esbuild-wasm': '^0.17.12',
          },
        },
        null,
        2,
      ),
    },
    '/vite-env.d.ts': { code: '/// <reference types="vite/client" />' },
    '/vite.config.ts': {
      code: "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n",
    },
  }),
  main: '/App.tsx',
  environment: 'node',
}
var VITE_SVELTE_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.svelte': {
      code: '<script>\nconst data = "world";\n<\/script>\n\n<h1>Hello {data}</h1>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>',
    },
    '/src/main.js': {
      code: `import App from './App.svelte'
import "./styles.css"

const app = new App({
  target: document.getElementById('app'),
})

export default app`,
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n',
    },
    '/vite.config.js': {
      code: "import { defineConfig } from 'vite'\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svelte()],\n})",
    },
    '/package.json': {
      code: JSON.stringify({
        type: 'module',
        scripts: { dev: 'vite' },
        devDependencies: {
          '@sveltejs/vite-plugin-svelte': '^2.0.2',
          svelte: '^3.55.1',
          vite: '4.0.4',
          'esbuild-wasm': '^0.17.12',
        },
      }),
    },
  },
  main: '/src/App.svelte',
  environment: 'node',
}
var VITE_SVELTE_TS_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.svelte': {
      code: '<script lang="ts">\nconst data: string = "world";\n<\/script>\n\n<h1>Hello {data}</h1>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>',
    },
    '/src/main.ts': {
      code: `import App from './App.svelte'
import "./styles.css"

const app = new App({
  target: document.getElementById('app'),
})

export default app`,
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.ts"><\/script>\n  </body>\n</html>\n',
    },
    '/vite-env.d.ts': {
      code: '/// <reference types="svelte" />\n/// <reference types="vite/client" />',
    },
    'svelte.config.js': {
      code: "import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\n\nexport default {\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\n  // for more information about preprocessors\n  preprocess: vitePreprocess(),\n}\n",
    },
    '/vite.config.ts': {
      code: "import { defineConfig } from 'vite'\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svelte()],\n})",
    },
    'tsconfig.json': {
      code: JSON.stringify(
        {
          extends: '@tsconfig/svelte/tsconfig.json',
          compilerOptions: {
            target: 'ESNext',
            useDefineForClassFields: true,
            module: 'ESNext',
            resolveJsonModule: true,
            allowJs: true,
            checkJs: true,
            isolatedModules: true,
          },
          include: [
            'src/**/*.d.ts',
            'src/**/*.ts',
            'src/**/*.js',
            'src/**/*.svelte',
          ],
          references: [{ path: './tsconfig.node.json' }],
        },
        null,
        2,
      ),
    },
    'tsconfig.node.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            composite: true,
            module: 'ESNext',
            moduleResolution: 'Node',
          },
          include: ['vite.config.ts'],
        },
        null,
        2,
      ),
    },
    '/package.json': {
      code: JSON.stringify(
        {
          type: 'module',
          scripts: { dev: 'vite' },
          devDependencies: {
            '@sveltejs/vite-plugin-svelte': '^2.0.2',
            '@tsconfig/svelte': '^3.0.0',
            svelte: '^3.55.1',
            'svelte-check': '^2.10.3',
            tslib: '^2.5.0',
            vite: '4.1.4',
            'esbuild-wasm': '^0.17.12',
          },
        },
        null,
        2,
      ),
    },
  },
  main: '/src/App.svelte',
  environment: 'node',
}
var VITE_VUE_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.vue': {
      code: '<script setup>\nimport { ref } from "vue";\n\nconst data = ref("world");\n<\/script>\n\n<template>\n  <h1>Hello {{ data }}</h1>\n</template>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>',
    },
    '/src/main.js': {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css"
            
createApp(App).mount('#app')            
`,
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n',
    },
    '/vite.config.js': {
      code: "import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()]\n})\n",
    },
    '/package.json': {
      code: JSON.stringify({
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview',
        },
        dependencies: { vue: '^3.2.45' },
        devDependencies: {
          '@vitejs/plugin-vue': '3.2.0',
          vite: '4.1.4',
          'esbuild-wasm': '0.17.12',
        },
      }),
    },
  },
  main: '/src/App.vue',
  environment: 'node',
}
var VITE_VUE_TS_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.vue': {
      code: '<script setup lang="ts">\nimport { ref } from "vue";\n\nconst data = ref<string>("world");\n<\/script>\n\n<template>\n  <h1>Hello {{ data }}</h1>\n</template>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>',
    },
    '/src/main.ts': {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css"

createApp(App).mount('#app')
`,
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.ts"><\/script>\n  </body>\n</html>\n',
    },
    '/vite-env.d.ts': { code: '/// <reference types="vite/client" />' },
    '/vite.config.ts': {
      code: "import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()]\n})\n",
    },
    'tsconfig.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            target: 'ESNext',
            useDefineForClassFields: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            strict: true,
            jsx: 'preserve',
            resolveJsonModule: true,
            isolatedModules: true,
            esModuleInterop: true,
            lib: ['ESNext', 'DOM'],
            skipLibCheck: true,
            noEmit: true,
          },
          include: [
            'src/**/*.ts',
            'src/**/*.d.ts',
            'src/**/*.tsx',
            'src/**/*.vue',
          ],
          references: [{ path: './tsconfig.node.json' }],
        },
        null,
        2,
      ),
    },
    'tsconfig.node.json': {
      code: JSON.stringify(
        {
          compilerOptions: {
            composite: true,
            module: 'ESNext',
            moduleResolution: 'Node',
            allowSyntheticDefaultImports: true,
          },
          include: ['vite.config.ts'],
        },
        null,
        2,
      ),
    },
    '/package.json': {
      code: JSON.stringify(
        {
          scripts: {
            dev: 'vite',
            build: 'tsc && vite build',
            preview: 'vite preview',
          },
          dependencies: { vue: '^3.2.47' },
          devDependencies: {
            '@vitejs/plugin-vue': '^4.0.0',
            vite: '4.1.4',
            'vue-tsc': '^1.2.0',
            typescript: '^4.9.5',
            'esbuild-wasm': '^0.17.12',
          },
        },
        null,
        2,
      ),
    },
  },
  main: '/src/App.vue',
  environment: 'node',
}
var ANGULAR_TEMPLATE = {
  files: {
    '/src/app/app.component.css': commonFiles['/styles.css'],
    '/src/app/app.component.html': {
      code: '<div>\n<h1>{{ helloWorld }}</h1>\n</div>     \n',
    },
    '/src/app/app.component.ts': {
      code: 'import { Component } from "@angular/core";\n\n@Component({\n  selector: "app-root",\n  templateUrl: "./app.component.html",\n  styleUrls: ["./app.component.css"]\n})\nexport class AppComponent {\n  helloWorld = "Hello world";\n}           \n',
    },
    '/src/app/app.module.ts': {
      code: 'import { BrowserModule } from "@angular/platform-browser";\nimport { NgModule } from "@angular/core";\n      \nimport { AppComponent } from "./app.component";\n      \n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}       \n',
    },
    '/src/index.html': {
      code: '<!doctype html>\n<html lang="en">\n      \n<head>\n  <meta charset="utf-8">\n  <title>Angular</title>\n  <base href="/">\n      \n  <meta name="viewport" content="width=device-width, initial-scale=1">\n  <link rel="icon" type="image/x-icon" href="favicon.ico">\n</head>\n      \n<body>\n   <app-root></app-root>\n</body>\n      \n</html>\n',
    },
    '/src/main.ts': {
      code: 'import { enableProdMode } from "@angular/core";\nimport { platformBrowserDynamic } from "@angular/platform-browser-dynamic";\n      \nimport { AppModule } from "./app/app.module";      \n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n      \n',
    },
    '/src/polyfills.ts': {
      code: 'import "core-js/proposals/reflect-metadata";   \n      import "zone.js/dist/zone";\n',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: {
          '@angular/core': '^11.2.0',
          '@angular/platform-browser': '^11.2.0',
          '@angular/platform-browser-dynamic': '^11.2.0',
          '@angular/common': '^11.2.0',
          '@angular/compiler': '^11.2.0',
          'zone.js': '0.11.3',
          'core-js': '3.8.3',
          rxjs: '6.6.3',
        },
        main: '/src/main.ts',
      }),
    },
  },
  main: '/src/app/app.component.ts',
  environment: 'angular-cli',
}
var REACT_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.js': {
      code: 'export default function App() {\n  return <h1>Hello world</h1>\n}\n',
    },
    '/index.js': {
      code: 'import React, { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);',
    },
    '/public/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id="root"></div>\n  </body>\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: {
          react: '^18.0.0',
          'react-dom': '^18.0.0',
          'react-scripts': '^5.0.0',
        },
        main: '/index.js',
      }),
    },
  }),
  main: '/App.js',
  environment: 'create-react-app',
}
var REACT_TYPESCRIPT_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    'tsconfig.json': {
      code: '{\n  "include": [\n    "./**/*"\n  ],\n  "compilerOptions": {\n    "strict": true,\n    "esModuleInterop": true,\n    "lib": [ "dom", "es2015" ],\n    "jsx": "react-jsx"\n  }\n}',
    },
    '/App.tsx': {
      code: 'export default function App(): JSX.Element {\n  return <h1>Hello world</h1>\n}\n',
    },
    '/index.tsx': {
      code: 'import React, { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);',
    },
    '/public/index.html': {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id="root"></div>\n  </body>\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: {
          react: '^18.0.0',
          'react-dom': '^18.0.0',
          'react-scripts': '^4.0.0',
        },
        devDependencies: {
          '@types/react': '^18.0.0',
          '@types/react-dom': '^18.0.0',
          typescript: '^4.0.0',
        },
        main: '/index.tsx',
      }),
    },
  }),
  main: '/App.tsx',
  environment: 'create-react-app',
}
var SOLID_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.tsx': {
      code: 'import { Component } from "solid-js";\n\nconst App: Component = () => {\n  return <h1>Hello world</h1>\n};\n\nexport default App;',
    },
    '/index.tsx': {
      code: 'import { render } from "solid-js/web";\nimport App from "./App";\n\nimport "./styles.css";\n\nrender(() => <App />, document.getElementById("app"));',
    },
    '/index.html': {
      code: '<html>\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n<body>\n  <div id="app"></div>\n  <script src="src/index.tsx"><\/script>\n</body>\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: { 'solid-js': '1.3.15' },
        main: '/index.tsx',
      }),
    },
  }),
  main: '/App.tsx',
  environment: 'solid',
}
var SVELTE_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/App.svelte': {
      code: "<style>\n  h1 {\n    font-size: 1.5rem;\n  }\n</style>\n\n<script>\n  let name = 'world';\n<\/script>\n\n<main>\n  <h1>Hello {name}</h1>\n</main>",
    },
    '/index.js': {
      code: 'import App from "./App.svelte";\nimport "./styles.css";\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n      ',
    },
    '/public/index.html': {
      code: '<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf8" />\n    <meta name="viewport" content="width=device-width" />\n\n    <title>Svelte app</title>\n\n    <link rel="stylesheet" href="public/bundle.css" />\n  </head>\n\n  <body>\n    <script src="bundle.js"><\/script>\n  </body>\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: { svelte: '^3.0.0' },
        main: '/index.js',
      }),
    },
  }),
  main: '/App.svelte',
  environment: 'svelte',
}
var TEST_TYPESCRIPT_TEMPLATE = {
  files: {
    'tsconfig.json': {
      code: '{\n  "include": [\n    "./**/*"\n  ],\n  "compilerOptions": {\n    "strict": true,\n    "esModuleInterop": true,\n    "lib": [ "dom", "es2015" ],\n    "jsx": "react-jsx"\n  }\n}',
    },
    '/add.ts': {
      code: 'export const add = (a: number, b: number): number => a + b;',
    },
    '/add.test.ts': {
      code: "import { add } from './add';\n\ndescribe('add', () => {\n  test('Commutative Law of Addition', () => {\n    expect(add(1, 2)).toBe(add(2, 1));\n  });\n});",
    },
    'package.json': {
      code: JSON.stringify({
        dependencies: {},
        devDependencies: { typescript: '^4.0.0' },
        main: '/add.ts',
      }),
    },
  },
  main: '/add.test.ts',
  environment: 'parcel',
  mode: 'tests',
}
var VANILLA_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/index.js': {
      code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n\n<body>\n  <div id="app"></div>\n\n  <script src="index.js">\n  <\/script>\n</body>\n\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({ dependencies: {}, main: '/index.js' }),
    },
  }),
  main: '/index.js',
  environment: 'parcel',
}
var VANILLA_TYPESCRIPT_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    'tsconfig.json': {
      code: '{\n  "compilerOptions": {\n    "strict": true,\n    "module": "commonjs",\n    "jsx": "preserve",\n    "esModuleInterop": true,\n    "sourceMap": true,\n    "allowJs": true,\n    "lib": [\n      "es6",\n      "dom"\n    ],\n    "rootDir": "src",\n    "moduleResolution": "node"\n  }\n}',
    },
    '/index.ts': {
      code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n',
    },
    '/index.html': {
      code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n\n<body>\n  <div id="app"></div>\n\n  <script src="index.ts">\n  <\/script>\n</body>\n\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({
        dependencies: {},
        devDependencies: { typescript: '^4.0.0' },
        main: '/index.ts',
      }),
    },
  }),
  main: '/index.ts',
  environment: 'parcel',
}
var VUE_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.vue': {
      code: "<template>\n  <h1>Hello {{ msg }}</h1>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst msg = ref('world');\n<\/script>",
    },
    '/src/main.js': {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css";

createApp(App).mount('#app')
`,
    },
    '/public/index.html': {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`,
    },
    '/package.json': {
      code: JSON.stringify({
        name: 'vue3',
        version: '0.1.0',
        private: true,
        main: '/src/main.js',
        scripts: {
          serve: 'vue-cli-service serve',
          build: 'vue-cli-service build',
        },
        dependencies: { 'core-js': '^3.26.1', vue: '^3.2.45' },
        devDependencies: {
          '@vue/cli-plugin-babel': '^5.0.8',
          '@vue/cli-service': '^5.0.8',
        },
      }),
    },
  },
  main: '/src/App.vue',
  environment: 'vue-cli',
}
var VUE_TS_TEMPLATE = {
  files: {
    '/src/styles.css': commonFiles['/styles.css'],
    '/src/App.vue': {
      code: `<template>
  <h1>Hello {{ msg }}</h1>
</template>

<script setup lang="ts">
import { ref } from 'vue';
const msg = ref<string>('world');
<\/script>`,
    },
    '/src/main.ts': {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css";

createApp(App).mount('#app')
`,
    },
    '/src/shims-vue.d.ts':
      '/* eslint-disable */\ndeclare module "*.vue" {\n  import type { DefineComponent } from "vue";\n  const component: DefineComponent<{}, {}, any>;\n  export default component;\n}',
    '/public/index.html': {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`,
    },
    '/package.json': {
      code: JSON.stringify({
        name: 'vue3-ts',
        version: '0.1.0',
        private: true,
        main: '/src/main.ts',
        scripts: {
          serve: 'vue-cli-service serve',
          build: 'vue-cli-service build',
        },
        dependencies: { 'core-js': '^3.26.1', vue: '^3.2.45' },
        devDependencies: {
          '@vue/cli-plugin-babel': '^5.0.8',
          '@vue/cli-plugin-typescript': '^5.0.8',
          '@vue/cli-service': '^5.0.8',
          typescript: '^4.9.3',
        },
      }),
    },
    '/tsconfig.json': {
      code: JSON.stringify({
        compilerOptions: {
          target: 'esnext',
          module: 'esnext',
          strict: true,
          jsx: 'preserve',
          moduleResolution: 'node',
          experimentalDecorators: true,
          skipLibCheck: true,
          esModuleInterop: true,
          allowSyntheticDefaultImports: true,
          forceConsistentCasingInFileNames: true,
          useDefineForClassFields: true,
          sourceMap: false,
          baseUrl: '.',
          types: ['webpack-env'],
          paths: { '@/*': ['src/*'] },
          lib: ['esnext', 'dom', 'dom.iterable', 'scripthost'],
        },
        include: [
          'src/**/*.ts',
          'src/**/*.tsx',
          'src/**/*.vue',
          'tests/**/*.ts',
          'tests/**/*.tsx',
        ],
        exclude: ['node_modules'],
      }),
    },
  },
  main: '/src/App.vue',
  environment: 'vue-cli',
}
var STATIC_TEMPLATE = {
  files: __assign2(__assign2({}, commonFiles), {
    '/index.html': {
      code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n  <link rel="stylesheet" href="/styles.css" />\n</head>\n\n<body>\n  <h1>Hello world</h1>\n</body>\n\n</html>',
    },
    '/package.json': {
      code: JSON.stringify({ dependencies: {}, main: '/index.html' }),
    },
  }),
  main: '/index.html',
  environment: 'static',
}
var SANDBOX_TEMPLATES = {
  static: STATIC_TEMPLATE,
  angular: ANGULAR_TEMPLATE,
  react: REACT_TEMPLATE,
  'react-ts': REACT_TYPESCRIPT_TEMPLATE,
  solid: SOLID_TEMPLATE,
  svelte: SVELTE_TEMPLATE,
  'test-ts': TEST_TYPESCRIPT_TEMPLATE,
  'vanilla-ts': VANILLA_TYPESCRIPT_TEMPLATE,
  vanilla: VANILLA_TEMPLATE,
  vue: VUE_TEMPLATE,
  'vue-ts': VUE_TS_TEMPLATE,
  node: NODE_TEMPLATE,
  nextjs: NEXTJS_TEMPLATE,
  vite: VITE_TEMPLATE,
  'vite-react': VITE_REACT_TEMPLATE,
  'vite-react-ts': VITE_REACT_TS_TEMPLATE,
  'vite-preact': VITE_PREACT_TEMPLATE,
  'vite-preact-ts': VITE_PREACT_TS_TEMPLATE,
  'vite-vue': VITE_VUE_TEMPLATE,
  'vite-vue-ts': VITE_VUE_TS_TEMPLATE,
  'vite-svelte': VITE_SVELTE_TEMPLATE,
  'vite-svelte-ts': VITE_SVELTE_TS_TEMPLATE,
  astro: ASTRO_TEMPLATE,
}
var getSandpackStateFromProps = function (props) {
  var _a22, _b22, _c2, _d, _e, _f
  var normalizedFilesPath = normalizePath(props.files)
  var projectSetup = combineTemplateFilesToSetup({
    template: props.template,
    customSetup: props.customSetup,
    files: normalizedFilesPath,
  })
  var visibleFiles = normalizePath(
    (_b22 =
      (_a22 = props.options) === null || _a22 === void 0
        ? void 0
        : _a22.visibleFiles) !== null && _b22 !== void 0
      ? _b22
      : [],
  )
  var activeFile = (
    (_c2 = props.options) === null || _c2 === void 0
      ? void 0
      : _c2.activeFile
  )
    ? resolveFile(
        (_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile,
        projectSetup.files,
      )
    : void 0
  if (visibleFiles.length === 0 && normalizedFilesPath) {
    Object.keys(normalizedFilesPath).forEach(function (filePath) {
      var file = normalizedFilesPath[filePath]
      if (typeof file === 'string') {
        visibleFiles.push(filePath)
        return
      }
      if (!activeFile && file.active) {
        activeFile = filePath
        if (file.hidden === true) {
          visibleFiles.push(filePath)
        }
      }
      if (!file.hidden) {
        visibleFiles.push(filePath)
      }
    })
  }
  if (visibleFiles.length === 0) {
    visibleFiles = [projectSetup.main]
  }
  if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {
    projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files)
  }
  if (!activeFile && projectSetup.main) {
    activeFile = projectSetup.main
  }
  if (!activeFile || !projectSetup.files[activeFile]) {
    activeFile = visibleFiles[0]
  }
  if (!visibleFiles.includes(activeFile)) {
    visibleFiles.push(activeFile)
  }
  var files = addPackageJSONIfNeeded(
    projectSetup.files,
    (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {},
    (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {},
    projectSetup.entry,
  )
  var existOpenPath = visibleFiles.filter(function (path) {
    return files[path]
  })
  return {
    visibleFiles: existOpenPath,
    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
    activeFile,
    files,
    environment: projectSetup.environment,
    shouldUpdatePreview: true,
  }
}
var resolveFile = function (path, files) {
  var normalizedFilesPath = normalizePath(files)
  var normalizedPath = normalizePath(path)
  if (normalizedPath in normalizedFilesPath) {
    return normalizedPath
  }
  if (!path) {
    return null
  }
  var resolvedPath = null
  var index = 0
  var strategies = ['.js', '.jsx', '.ts', '.tsx']
  while (!resolvedPath && index < strategies.length) {
    var removeExtension = normalizedPath.split('.')[0]
    var attemptPath = ''.concat(removeExtension).concat(strategies[index])
    if (normalizedFilesPath[attemptPath] !== void 0) {
      resolvedPath = attemptPath
    }
    index++
  }
  return resolvedPath
}
var combineTemplateFilesToSetup = function (_a22) {
  var files = _a22.files,
    template = _a22.template,
    customSetup = _a22.customSetup
  if (!template) {
    if (!customSetup) {
      var defaultTemplate = SANDBOX_TEMPLATES.vanilla
      return __assign2(__assign2({}, defaultTemplate), {
        files: __assign2(
          __assign2({}, defaultTemplate.files),
          convertedFilesToBundlerFiles(files),
        ),
      })
    }
    if (!files || Object.keys(files).length === 0) {
      throw new Error(
        '[sandpack-react]: without a template, you must pass at least one file',
      )
    }
    return __assign2(__assign2({}, customSetup), {
      files: convertedFilesToBundlerFiles(files),
    })
  }
  var baseTemplate = SANDBOX_TEMPLATES[template]
  if (!baseTemplate) {
    throw new Error(
      '[sandpack-react]: invalid template "'.concat(template, '" provided'),
    )
  }
  if (!customSetup && !files) {
    return baseTemplate
  }
  return {
    /**
     * The input setup might have files in the simple form Record<string, string>
     * so we convert them to the sandbox template format
     */
    files: convertedFilesToBundlerFiles(
      __assign2(__assign2({}, baseTemplate.files), files),
    ),
    /**
     * Merge template dependencies and user custom dependencies.
     * As a rule, the custom dependencies must overwrite the template ones.
     */
    dependencies: __assign2(
      __assign2({}, baseTemplate.dependencies),
      customSetup === null || customSetup === void 0
        ? void 0
        : customSetup.dependencies,
    ),
    devDependencies: __assign2(
      __assign2({}, baseTemplate.devDependencies),
      customSetup === null || customSetup === void 0
        ? void 0
        : customSetup.devDependencies,
    ),
    entry: normalizePath(
      customSetup === null || customSetup === void 0
        ? void 0
        : customSetup.entry,
    ),
    main: baseTemplate.main,
    environment:
      (customSetup === null || customSetup === void 0
        ? void 0
        : customSetup.environment) || baseTemplate.environment,
  }
}
var convertedFilesToBundlerFiles = function (files) {
  if (!files) return {}
  return Object.keys(files).reduce(function (acc, key) {
    if (typeof files[key] === 'string') {
      acc[key] = { code: files[key] }
    } else {
      acc[key] = files[key]
    }
    return acc
  }, {})
}
var useAppState = function (props, files) {
  var _a22 = useState3({ editorState: 'pristine' }),
    state = _a22[0],
    setState = _a22[1]
  var originalStateFromProps = getSandpackStateFromProps(props)
  var editorState = dequal2(originalStateFromProps.files, files)
    ? 'pristine'
    : 'dirty'
  if (editorState !== state.editorState) {
    setState(function (prev) {
      return __assign2(__assign2({}, prev), { editorState })
    })
  }
  return state
}
var useSandpackId = function () {
  if (typeof useId === 'function') {
    return useId()
  } else {
    return generateRandomId2()
  }
}
var MAX_ID_LENGTH = 9
var sandpackClientVersion = '2.19.8'
var useAsyncSandpackId = function (files) {
  if (typeof useId === 'function') {
    var reactDomId_1 = useId()
    return function () {
      return __awaiter2(void 0, void 0, void 0, function () {
        var allCode, sha
        return __generator2(this, function (_a22) {
          switch (_a22.label) {
            case 0:
              allCode = Object.entries(files)
                .map(function (path, code) {
                  return path + '|' + code
                })
                .join('|||')
              return [
                4,
                generateShortId(allCode + reactDomId_1 + sandpackClientVersion),
              ]
            case 1:
              sha = _a22.sent()
              return [
                2,
                ensureLength(
                  sha.replace(/:/g, 'sp').replace(/[^a-zA-Z]/g, ''),
                  MAX_ID_LENGTH,
                ),
              ]
          }
        })
      })
    }
  } else {
    return function () {
      return ensureLength(generateRandomId2(), MAX_ID_LENGTH)
    }
  }
}
function ensureLength(str, length) {
  if (str.length > length) {
    return str.slice(0, length)
  } else {
    return str.padEnd(length, 's')
  }
}
function generateShortId(input) {
  return __awaiter2(this, void 0, void 0, function () {
    var encoder, data, hashBuffer, hashArray
    return __generator2(this, function (_a22) {
      switch (_a22.label) {
        case 0:
          encoder = new TextEncoder()
          data = encoder.encode(input)
          return [4, crypto.subtle.digest('SHA-256', data)]
        case 1:
          hashBuffer = _a22.sent()
          hashArray = Array.from(new Uint8Array(hashBuffer))
          return [2, btoa(String.fromCharCode.apply(String, hashArray))]
      }
    })
  })
}
var BUNDLER_TIMEOUT = 4e4
var useClient = function (_a22, filesState) {
  var _b22, _c2, _d
  var options = _a22.options,
    customSetup = _a22.customSetup,
    teamId = _a22.teamId,
    sandboxId = _a22.sandboxId
  options !== null && options !== void 0 ? options : (options = {})
  customSetup !== null && customSetup !== void 0
    ? customSetup
    : (customSetup = {})
  var initModeFromProps =
    (options === null || options === void 0 ? void 0 : options.initMode) ||
    'lazy'
  var _e = useState3({
      startRoute:
        options === null || options === void 0 ? void 0 : options.startRoute,
      bundlerState: void 0,
      error: null,
      initMode: initModeFromProps,
      reactDevTools: void 0,
      status: (
        (_b22 =
          options === null || options === void 0 ? void 0 : options.autorun) !==
          null && _b22 !== void 0
          ? _b22
          : true
      )
        ? 'initial'
        : 'idle',
    }),
    state = _e[0],
    setState = _e[1]
  var intersectionObserverCallback = useRef2()
  var intersectionObserver = useRef2(null)
  var lazyAnchorRef = useRef2(null)
  var registeredIframes = useRef2({})
  var clients = useRef2({})
  var timeoutHook = useRef2(null)
  var unsubscribeClientListeners = useRef2({})
  var unsubscribe = useRef2()
  var queuedListeners = useRef2({ global: {} })
  var debounceHook = useRef2()
  var prevEnvironment = useRef2(filesState.environment)
  var asyncSandpackId = useAsyncSandpackId(filesState.files)
  var createClient = useCallback2(
    function (iframe, clientId, clientPropsOverride) {
      return __awaiter2(void 0, void 0, void 0, function () {
        var timeOut,
          shouldSetTimeout,
          getStableServiceWorkerId,
          client,
          _a3,
          _b3,
          globalListeners
        var _c3
        var _d2, _e2, _f
        return __generator2(this, function (_g) {
          switch (_g.label) {
            case 0:
              if (clients.current[clientId]) {
                clients.current[clientId].destroy()
              }
              options !== null && options !== void 0 ? options : (options = {})
              customSetup !== null && customSetup !== void 0
                ? customSetup
                : (customSetup = {})
              timeOut =
                (_d2 =
                  options === null || options === void 0
                    ? void 0
                    : options.bundlerTimeOut) !== null && _d2 !== void 0
                  ? _d2
                  : BUNDLER_TIMEOUT
              if (timeoutHook.current) {
                clearTimeout(timeoutHook.current)
              }
              shouldSetTimeout = typeof unsubscribe.current !== 'function'
              if (shouldSetTimeout) {
                timeoutHook.current = setTimeout(function () {
                  unregisterAllClients()
                  setState(function (prev) {
                    return __assign2(__assign2({}, prev), {
                      status: 'timeout',
                    })
                  })
                }, timeOut)
              }
              getStableServiceWorkerId = function () {
                return __awaiter2(void 0, void 0, void 0, function () {
                  var key, fixedId
                  return __generator2(this, function (_a4) {
                    switch (_a4.label) {
                      case 0:
                        if (
                          !(options === null || options === void 0
                            ? void 0
                            : options.experimental_enableStableServiceWorkerId)
                        )
                          return [3, 3]
                        key = 'SANDPACK_INTERNAL:URL-CONSISTENT-ID'
                        fixedId = localStorage.getItem(key)
                        if (!!fixedId) return [3, 2]
                        return [4, asyncSandpackId()]
                      case 1:
                        fixedId = _a4.sent()
                        localStorage.setItem(key, fixedId)
                        _a4.label = 2
                      case 2:
                        return [2, fixedId]
                      case 3:
                        return [4, asyncSandpackId()]
                      case 4:
                        return [2, _a4.sent()]
                    }
                  })
                })
              }
              _a3 = loadSandpackClient
              _b3 = [
                iframe,
                {
                  files: filesState.files,
                  template: filesState.environment,
                },
              ]
              _c3 = {
                externalResources: options.externalResources,
                bundlerURL: options.bundlerURL,
                startRoute:
                  (_e2 =
                    clientPropsOverride === null ||
                    clientPropsOverride === void 0
                      ? void 0
                      : clientPropsOverride.startRoute) !== null &&
                  _e2 !== void 0
                    ? _e2
                    : options.startRoute,
                fileResolver: options.fileResolver,
                skipEval:
                  (_f = options.skipEval) !== null && _f !== void 0
                    ? _f
                    : false,
                logLevel: options.logLevel,
                showOpenInCodeSandbox: false,
                showErrorScreen: true,
                showLoadingScreen: false,
                reactDevTools: state.reactDevTools,
                customNpmRegistries:
                  customSetup === null || customSetup === void 0
                    ? void 0
                    : customSetup.npmRegistries,
                teamId,
                experimental_enableServiceWorker: !!(options === null ||
                options === void 0
                  ? void 0
                  : options.experimental_enableServiceWorker),
              }
              return [4, getStableServiceWorkerId()]
            case 1:
              return [
                4,
                _a3.apply(
                  void 0,
                  _b3.concat([
                    ((_c3.experimental_stableServiceWorkerId = _g.sent()),
                    (_c3.sandboxId = sandboxId),
                    _c3),
                  ]),
                ),
              ]
            case 2:
              client = _g.sent()
              if (typeof unsubscribe.current !== 'function') {
                unsubscribe.current = client.listen(handleMessage)
              }
              unsubscribeClientListeners.current[clientId] =
                unsubscribeClientListeners.current[clientId] || {}
              if (queuedListeners.current[clientId]) {
                Object.keys(queuedListeners.current[clientId]).forEach(
                  function (listenerId) {
                    var listener = queuedListeners.current[clientId][listenerId]
                    var unsubscribe2 = client.listen(listener)
                    unsubscribeClientListeners.current[clientId][listenerId] =
                      unsubscribe2
                  },
                )
                queuedListeners.current[clientId] = {}
              }
              globalListeners = Object.entries(queuedListeners.current.global)
              globalListeners.forEach(function (_a4) {
                var listenerId = _a4[0],
                  listener = _a4[1]
                var unsubscribe2 = client.listen(listener)
                unsubscribeClientListeners.current[clientId][listenerId] =
                  unsubscribe2
              })
              clients.current[clientId] = client
              return [2]
          }
        })
      })
    },
    [filesState.environment, filesState.files, state.reactDevTools],
  )
  var unregisterAllClients = useCallback2(function () {
    Object.keys(clients.current).map(unregisterBundler)
    if (typeof unsubscribe.current === 'function') {
      unsubscribe.current()
      unsubscribe.current = void 0
    }
  }, [])
  var runSandpack = useCallback2(
    function () {
      return __awaiter2(void 0, void 0, void 0, function () {
        return __generator2(this, function (_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                Promise.all(
                  Object.entries(registeredIframes.current).map(function (_a4) {
                    var clientId = _a4[0],
                      _b3 = _a4[1],
                      iframe = _b3.iframe,
                      _c3 = _b3.clientPropsOverride,
                      clientPropsOverride = _c3 === void 0 ? {} : _c3
                    return __awaiter2(void 0, void 0, void 0, function () {
                      return __generator2(this, function (_d2) {
                        switch (_d2.label) {
                          case 0:
                            return [
                              4,
                              createClient(
                                iframe,
                                clientId,
                                clientPropsOverride,
                              ),
                            ]
                          case 1:
                            _d2.sent()
                            return [2]
                        }
                      })
                    })
                  }),
                ),
              ]
            case 1:
              _a3.sent()
              setState(function (prev) {
                return __assign2(__assign2({}, prev), {
                  error: null,
                  status: 'running',
                })
              })
              return [2]
          }
        })
      })
    },
    [createClient],
  )
  intersectionObserverCallback.current = function (entries2) {
    if (
      entries2.some(function (entry2) {
        return entry2.isIntersecting
      })
    ) {
      runSandpack()
    } else {
      unregisterAllClients()
    }
  }
  var initializeSandpackIframe = useCallback2(
    function () {
      var _a3, _b3, _c3
      var autorun =
        (_a3 =
          options === null || options === void 0 ? void 0 : options.autorun) !==
          null && _a3 !== void 0
          ? _a3
          : true
      if (!autorun) {
        return
      }
      var observerOptions =
        (_b3 =
          options === null || options === void 0
            ? void 0
            : options.initModeObserverOptions) !== null && _b3 !== void 0
          ? _b3
          : { rootMargin: '1000px 0px' }
      if (intersectionObserver.current && lazyAnchorRef.current) {
        ;(_c3 = intersectionObserver.current) === null || _c3 === void 0
          ? void 0
          : _c3.unobserve(lazyAnchorRef.current)
      }
      if (lazyAnchorRef.current && state.initMode === 'lazy') {
        intersectionObserver.current = new IntersectionObserver(function (
          entries2,
        ) {
          var _a4, _b4
          if (
            entries2.some(function (entry2) {
              return entry2.isIntersecting
            })
          ) {
            if (
              entries2.some(function (entry2) {
                return entry2.isIntersecting
              }) &&
              lazyAnchorRef.current
            ) {
              ;(_a4 = intersectionObserverCallback.current) === null ||
              _a4 === void 0
                ? void 0
                : _a4.call(intersectionObserverCallback, entries2)
              ;(_b4 = intersectionObserver.current) === null || _b4 === void 0
                ? void 0
                : _b4.unobserve(lazyAnchorRef.current)
            }
          }
        }, observerOptions)
        intersectionObserver.current.observe(lazyAnchorRef.current)
      } else if (lazyAnchorRef.current && state.initMode === 'user-visible') {
        intersectionObserver.current = new IntersectionObserver(function (
          entries2,
        ) {
          var _a4
          ;(_a4 = intersectionObserverCallback.current) === null ||
          _a4 === void 0
            ? void 0
            : _a4.call(intersectionObserverCallback, entries2)
        }, observerOptions)
        intersectionObserver.current.observe(lazyAnchorRef.current)
      } else {
        runSandpack()
      }
    },
    [
      options === null || options === void 0 ? void 0 : options.autorun,
      options === null || options === void 0
        ? void 0
        : options.initModeObserverOptions,
      runSandpack,
      state.initMode,
      unregisterAllClients,
    ],
  )
  var registerBundler = useCallback2(
    function (iframe, clientId, clientPropsOverride) {
      return __awaiter2(void 0, void 0, void 0, function () {
        return __generator2(this, function (_a3) {
          switch (_a3.label) {
            case 0:
              registeredIframes.current[clientId] = {
                iframe,
                clientPropsOverride,
              }
              if (!(state.status === 'running')) return [3, 2]
              return [4, createClient(iframe, clientId, clientPropsOverride)]
            case 1:
              _a3.sent()
              _a3.label = 2
            case 2:
              return [2]
          }
        })
      })
    },
    [createClient, state.status],
  )
  var unregisterBundler = function (clientId) {
    var _a3, _b3
    var client = clients.current[clientId]
    if (client) {
      client.destroy()
      ;(_a3 = client.iframe.contentWindow) === null || _a3 === void 0
        ? void 0
        : _a3.location.replace('about:blank')
      client.iframe.removeAttribute('src')
      delete clients.current[clientId]
    } else {
      delete registeredIframes.current[clientId]
    }
    if (timeoutHook.current) {
      clearTimeout(timeoutHook.current)
    }
    var unsubscribeQueuedClients = Object.values(
      (_b3 = unsubscribeClientListeners.current[clientId]) !== null &&
        _b3 !== void 0
        ? _b3
        : {},
    )
    unsubscribeQueuedClients.forEach(function (listenerOfClient) {
      var listenerFunctions = Object.values(listenerOfClient)
      listenerFunctions.forEach(function (unsubscribe2) {
        return unsubscribe2()
      })
    })
    var status = Object.keys(clients.current).length > 0 ? 'running' : 'idle'
    setState(function (prev) {
      return __assign2(__assign2({}, prev), { status })
    })
  }
  var handleMessage = function (msg) {
    if (msg.type === 'start') {
      setState(function (prev) {
        return __assign2(__assign2({}, prev), { error: null })
      })
    } else if (msg.type === 'state') {
      setState(function (prev) {
        return __assign2(__assign2({}, prev), {
          bundlerState: msg.state,
        })
      })
    } else if (
      (msg.type === 'done' && !msg.compilatonError) ||
      msg.type === 'connected'
    ) {
      if (timeoutHook.current) {
        clearTimeout(timeoutHook.current)
      }
      setState(function (prev) {
        return __assign2(__assign2({}, prev), { error: null })
      })
    } else if (msg.type === 'action' && msg.action === 'show-error') {
      if (timeoutHook.current) {
        clearTimeout(timeoutHook.current)
      }
      setState(function (prev) {
        return __assign2(__assign2({}, prev), {
          error: extractErrorDetails(msg),
        })
      })
    } else if (
      msg.type === 'action' &&
      msg.action === 'notification' &&
      msg.notificationType === 'error'
    ) {
      setState(function (prev) {
        return __assign2(__assign2({}, prev), {
          error: { message: msg.title },
        })
      })
    }
  }
  var registerReactDevTools = function (value) {
    setState(function (prev) {
      return __assign2(__assign2({}, prev), { reactDevTools: value })
    })
  }
  var recompileMode =
    (_c2 =
      options === null || options === void 0
        ? void 0
        : options.recompileMode) !== null && _c2 !== void 0
      ? _c2
      : 'delayed'
  var recompileDelay =
    (_d =
      options === null || options === void 0
        ? void 0
        : options.recompileDelay) !== null && _d !== void 0
      ? _d
      : 200
  var dispatchMessage = function (message, clientId) {
    if (state.status !== 'running') {
      console.warn(
        '[sandpack-react]: dispatch cannot be called while in idle mode',
      )
      return
    }
    if (clientId) {
      clients.current[clientId].dispatch(message)
    } else {
      Object.values(clients.current).forEach(function (client) {
        client.dispatch(message)
      })
    }
  }
  var addListener = function (listener, clientId) {
    if (clientId) {
      if (clients.current[clientId]) {
        var unsubscribeListener = clients.current[clientId].listen(listener)
        return unsubscribeListener
      } else {
        var listenerId_1 = generateRandomId2()
        queuedListeners.current[clientId] =
          queuedListeners.current[clientId] || {}
        unsubscribeClientListeners.current[clientId] =
          unsubscribeClientListeners.current[clientId] || {}
        queuedListeners.current[clientId][listenerId_1] = listener
        var unsubscribeListener = function () {
          if (queuedListeners.current[clientId][listenerId_1]) {
            delete queuedListeners.current[clientId][listenerId_1]
          } else if (
            unsubscribeClientListeners.current[clientId][listenerId_1]
          ) {
            unsubscribeClientListeners.current[clientId][listenerId_1]()
            delete unsubscribeClientListeners.current[clientId][listenerId_1]
          }
        }
        return unsubscribeListener
      }
    } else {
      var listenerId_2 = generateRandomId2()
      queuedListeners.current.global[listenerId_2] = listener
      var clientsList = Object.values(clients.current)
      var currentClientUnsubscribeListeners_1 = clientsList.map(
        function (client) {
          return client.listen(listener)
        },
      )
      var unsubscribeListener = function () {
        currentClientUnsubscribeListeners_1.forEach(function (unsubscribe2) {
          return unsubscribe2()
        })
        delete queuedListeners.current.global[listenerId_2]
        Object.values(unsubscribeClientListeners.current).forEach(
          function (client) {
            var _a3
            ;(_a3 =
              client === null || client === void 0
                ? void 0
                : client[listenerId_2]) === null || _a3 === void 0
              ? void 0
              : _a3.call(client)
          },
        )
      }
      return unsubscribeListener
    }
  }
  useEffect3(
    function watchFileChanges() {
      if (state.status !== 'running' || !filesState.shouldUpdatePreview) {
        return
      }
      if (prevEnvironment.current !== filesState.environment) {
        prevEnvironment.current = filesState.environment
        Object.entries(clients.current).forEach(function (_a3) {
          var key = _a3[0],
            client = _a3[1]
          registerBundler(client.iframe, key)
        })
      }
      if (recompileMode === 'immediate') {
        Object.values(clients.current).forEach(function (client) {
          if (client.status === 'done') {
            client.updateSandbox({
              files: filesState.files,
              template: filesState.environment,
            })
          }
        })
      }
      if (recompileMode === 'delayed') {
        if (typeof window === 'undefined') return
        window.clearTimeout(debounceHook.current)
        debounceHook.current = window.setTimeout(function () {
          Object.values(clients.current).forEach(function (client) {
            if (client.status === 'done') {
              client.updateSandbox({
                files: filesState.files,
                template: filesState.environment,
              })
            }
          })
        }, recompileDelay)
      }
      return function () {
        window.clearTimeout(debounceHook.current)
      }
    },
    [
      filesState.files,
      filesState.environment,
      filesState.shouldUpdatePreview,
      recompileDelay,
      recompileMode,
      registerBundler,
      state.status,
    ],
  )
  useEffect3(
    function watchInitMode() {
      if (initModeFromProps !== state.initMode) {
        setState(function (prev) {
          return __assign2(__assign2({}, prev), {
            initMode: initModeFromProps,
          })
        })
        initializeSandpackIframe()
      }
    },
    [initModeFromProps, initializeSandpackIframe, state.initMode],
  )
  useEffect3(function () {
    return function unmountClient() {
      if (typeof unsubscribe.current === 'function') {
        unsubscribe.current()
      }
      if (timeoutHook.current) {
        clearTimeout(timeoutHook.current)
      }
      if (debounceHook.current) {
        clearTimeout(debounceHook.current)
      }
      if (intersectionObserver.current) {
        intersectionObserver.current.disconnect()
      }
    }
  }, [])
  return [
    state,
    {
      clients: clients.current,
      initializeSandpackIframe,
      runSandpack,
      registerBundler,
      unregisterBundler,
      registerReactDevTools,
      addListener,
      dispatchMessage,
      lazyAnchorRef,
      unsubscribeClientListenersRef: unsubscribeClientListeners,
      queuedListenersRef: queuedListeners,
    },
  ]
}
var useFiles = function (props) {
  var originalStateFromProps = getSandpackStateFromProps(props)
  var _a22 = useState3(originalStateFromProps),
    state = _a22[0],
    setState = _a22[1]
  var isMountedRef = useRef2(false)
  useEffect3(
    function () {
      if (isMountedRef.current) {
        setState(getSandpackStateFromProps(props))
      } else {
        isMountedRef.current = true
      }
    },
    [props.files, props.customSetup, props.template],
  )
  var updateFile = function (pathOrFiles, code, shouldUpdatePreview) {
    if (shouldUpdatePreview === void 0) {
      shouldUpdatePreview = true
    }
    setState(function (prev) {
      var _a3
      var files = prev.files
      if (typeof pathOrFiles === 'string' && typeof code === 'string') {
        files = __assign2(
          __assign2({}, files),
          ((_a3 = {}),
          (_a3[pathOrFiles] = __assign2(__assign2({}, files[pathOrFiles]), {
            code,
          })),
          _a3),
        )
      } else if (typeof pathOrFiles === 'object') {
        files = __assign2(
          __assign2({}, files),
          convertedFilesToBundlerFiles(pathOrFiles),
        )
      }
      return __assign2(__assign2({}, prev), {
        files: normalizePath(files),
        shouldUpdatePreview,
      })
    })
  }
  var operations = {
    openFile: function (path) {
      setState(function (_a3) {
        var visibleFiles = _a3.visibleFiles,
          rest = __rest(_a3, ['visibleFiles'])
        var newPaths = visibleFiles.includes(path)
          ? visibleFiles
          : __spreadArray2(
              __spreadArray2([], visibleFiles, true),
              [path],
              false,
            )
        return __assign2(__assign2({}, rest), {
          activeFile: path,
          visibleFiles: newPaths,
        })
      })
    },
    resetFile: function (path) {
      setState(function (prevState) {
        var _a3
        return __assign2(__assign2({}, prevState), {
          files: __assign2(
            __assign2({}, prevState.files),
            ((_a3 = {}), (_a3[path] = originalStateFromProps.files[path]), _a3),
          ),
        })
      })
    },
    resetAllFiles: function () {
      setState(function (prev) {
        return __assign2(__assign2({}, prev), {
          files: originalStateFromProps.files,
        })
      })
    },
    setActiveFile: function (activeFile) {
      if (state.files[activeFile]) {
        setState(function (prev) {
          return __assign2(__assign2({}, prev), { activeFile })
        })
      }
    },
    updateCurrentFile: function (code, shouldUpdatePreview) {
      if (shouldUpdatePreview === void 0) {
        shouldUpdatePreview = true
      }
      updateFile(state.activeFile, code, shouldUpdatePreview)
    },
    updateFile,
    addFile: updateFile,
    closeFile: function (path) {
      if (state.visibleFiles.length === 1) {
        return
      }
      setState(function (_a3) {
        var visibleFiles = _a3.visibleFiles,
          activeFile = _a3.activeFile,
          prev = __rest(_a3, ['visibleFiles', 'activeFile'])
        var indexOfRemovedPath = visibleFiles.indexOf(path)
        var newPaths = visibleFiles.filter(function (openPath) {
          return openPath !== path
        })
        return __assign2(__assign2({}, prev), {
          activeFile:
            path === activeFile
              ? indexOfRemovedPath === 0
                ? visibleFiles[1]
                : visibleFiles[indexOfRemovedPath - 1]
              : activeFile,
          visibleFiles: newPaths,
        })
      })
    },
    deleteFile: function (path, shouldUpdatePreview) {
      if (shouldUpdatePreview === void 0) {
        shouldUpdatePreview = true
      }
      setState(function (_a3) {
        var visibleFiles = _a3.visibleFiles,
          files = _a3.files,
          activeFile = _a3.activeFile,
          rest = __rest(_a3, ['visibleFiles', 'files', 'activeFile'])
        var newFiles = __assign2({}, files)
        delete newFiles[path]
        var remainingVisibleFiles = visibleFiles.filter(function (openPath) {
          return openPath !== path
        })
        var deletedLastVisibleFile = remainingVisibleFiles.length === 0
        if (deletedLastVisibleFile) {
          var nextFile = Object.keys(files)[Object.keys(files).length - 1]
          return __assign2(__assign2({}, rest), {
            visibleFiles: [nextFile],
            activeFile: nextFile,
            files: newFiles,
            shouldUpdatePreview,
          })
        }
        return __assign2(__assign2({}, rest), {
          visibleFiles: remainingVisibleFiles,
          activeFile:
            path === activeFile
              ? remainingVisibleFiles[remainingVisibleFiles.length - 1]
              : activeFile,
          files: newFiles,
          shouldUpdatePreview,
        })
      })
    },
  }
  return [
    __assign2(__assign2({}, state), {
      visibleFilesFromProps: originalStateFromProps.visibleFiles,
    }),
    operations,
  ]
}
var Sandpack$1 = /* @__PURE__ */ React3.createContext(null)
var SandpackProvider = function (props) {
  var _a22, _b22, _c2
  var children = props.children,
    options = props.options,
    style = props.style,
    className = props.className,
    theme = props.theme
  var _d = useFiles(props),
    fileState = _d[0],
    fileOperations = _d[1]
  var _e = useClient(props, fileState),
    clientState = _e[0],
    _f = _e[1],
    dispatchMessage = _f.dispatchMessage,
    addListener = _f.addListener,
    clientOperations = __rest(_f, ['dispatchMessage', 'addListener'])
  var appState = useAppState(props, fileState.files)
  React3.useEffect(function () {
    clientOperations.initializeSandpackIframe()
  }, [])
  return jsx(Sandpack$1.Provider, {
    value: __assign2(
      __assign2(
        __assign2(
          __assign2(__assign2(__assign2({}, fileState), clientState), appState),
          fileOperations,
        ),
        clientOperations,
      ),
      {
        autoReload:
          (_b22 =
            (_a22 = props.options) === null || _a22 === void 0
              ? void 0
              : _a22.autoReload) !== null && _b22 !== void 0
            ? _b22
            : true,
        teamId: props === null || props === void 0 ? void 0 : props.teamId,
        exportOptions:
          (_c2 =
            props === null || props === void 0 ? void 0 : props.customSetup) ===
            null || _c2 === void 0
            ? void 0
            : _c2.exportOptions,
        listen: addListener,
        dispatch: dispatchMessage,
      },
    ),
    children: jsx(ClassNamesProvider, {
      classes:
        options === null || options === void 0 ? void 0 : options.classes,
      children: jsx(SandpackThemeProvider, {
        className,
        style,
        theme,
        children,
      }),
    }),
  })
}
var SandpackConsumer = Sandpack$1.Consumer
function useSandpack() {
  var sandpack = React3.useContext(Sandpack$1)
  if (sandpack === null) {
    throw new Error(
      '[sandpack-react]: "useSandpack" must be wrapped by a "SandpackProvider"',
    )
  }
  var dispatch = sandpack.dispatch,
    listen = sandpack.listen,
    rest = __rest(sandpack, ['dispatch', 'listen'])
  return { sandpack: __assign2({}, rest), dispatch, listen }
}
var useActiveCode = function () {
  var _a22, _b22, _c2
  var sandpack = useSandpack().sandpack
  return {
    code:
      (_a22 = sandpack.files[sandpack.activeFile]) === null || _a22 === void 0
        ? void 0
        : _a22.code,
    readOnly:
      (_c2 =
        (_b22 = sandpack.files[sandpack.activeFile]) === null || _b22 === void 0
          ? void 0
          : _b22.readOnly) !== null && _c2 !== void 0
        ? _c2
        : false,
    updateCode: sandpack.updateCurrentFile,
  }
}
var _a$8
var _b$2
var _c
var iconStandaloneClassName = css2({ svg: { margin: 'auto' } })
var buttonClassName = css2(
  ((_a$8 = {
    appearance: 'none',
    outline: 'none',
    display: 'flex',
    alignItems: 'center',
    fontSize: 'inherit',
    fontFamily: 'inherit',
    backgroundColor: 'transparent',
    transition: 'color $default, background $default',
    cursor: 'pointer',
    color: '$colors$clickable',
    border: 0,
    textDecoration: 'none',
    '&:disabled': { color: '$colors$disabled' },
    "&:hover:not(:disabled,[data-active='true'])": {
      color: '$colors$hover',
    },
    '&[data-active="true"]': { color: '$colors$accent' },
    svg: { minWidth: '$space$4', width: '$space$4', height: '$space$4' },
  }),
  (_a$8['&.'.concat(iconStandaloneClassName)] = {
    padding: '$space$1',
    height: '$space$7',
    display: 'flex',
  }),
  (_a$8['&.'.concat(iconStandaloneClassName, '&:not(:has(span))')] = {
    width: '$space$7',
  }),
  (_a$8['&.'.concat(iconStandaloneClassName, '&:has(svg + span)')] = {
    paddingRight: '$space$3',
    paddingLeft: '$space$2',
    gap: '$space$1',
  }),
  _a$8),
)
var roundedButtonClassName = css2({
  backgroundColor: '$colors$surface2',
  borderRadius: '99999px',
  border: '1px solid $colors$surface3',
  '&[data-active="true"]': {
    color: '$colors$surface1',
    background: '$colors$accent',
  },
  "&:hover:not(:disabled,[data-active='true'])": {
    backgroundColor: '$colors$surface3',
  },
})
var iconClassName = css2({ padding: 0 })
var fadeIn = keyframes({ '0%': { opacity: 0 }, '100%': { opacity: 1 } })
var absoluteClassName = css2({
  position: 'absolute',
  bottom: '0',
  left: '0',
  right: '0',
  top: '0',
  margin: '0',
  overflow: 'auto',
  height: '100%',
  zIndex: '$top',
})
var errorClassName = css2(
  ((_b$2 = {
    whiteSpace: 'pre-wrap',
    padding: '$space$10',
    backgroundColor: '$colors$surface1',
    display: 'flex',
    gap: '$space$2',
    flexDirection: 'column',
  }),
  (_b$2['.'.concat(buttonClassName)] = {
    width: 'auto',
    gap: '$space$2',
    padding: '0 $space$3 0 $space$2',
    marginTop: '$space$1',
  }),
  (_b$2.variants = {
    solidBg: { true: { backgroundColor: '$colors$errorSurface' } },
  }),
  _b$2),
)
var errorBundlerClassName = css2(
  ((_c = { padding: '$space$10', backgroundColor: '$colors$surface1' }),
  (_c['.'.concat(buttonClassName)] = {
    marginTop: '$space$6',
    width: 'auto',
    gap: '$space$2',
    padding: '0 $space$3 0 $space$2',
  }),
  _c),
)
var errorMessageClassName = css2({
  animation: ''.concat(fadeIn, ' 150ms ease'),
  color: '$colors$error',
  display: 'flex',
  flexDirection: 'column',
  gap: '$space$3',
  variants: { errorCode: { true: { fontFamily: '$font$mono' } } },
  a: { color: 'inherit' },
  p: { margin: 0 },
})
var _a$7
var tabsClassName = css2({
  borderBottom: '1px solid $colors$surface2',
  background: '$colors$surface1',
})
var tabsScrollableClassName = css2({
  padding: '0 $space$2',
  overflow: 'auto',
  display: 'flex',
  flexWrap: 'nowrap',
  alignItems: 'stretch',
  minHeight: '40px',
  marginBottom: '-1px',
})
var tabContainer = css2({
  display: 'flex',
  alignItems: 'center',
  outline: 'none',
  position: 'relative',
  paddingRight: '20px',
  margin: '1px 0',
  '&:has(button:focus)': { outline: '$colors$accent auto 1px' },
})
var closeButtonClassName = css2({
  padding: '0 $space$1 0 $space$1',
  borderRadius: '$border$radius',
  marginLeft: '$space$1',
  width: '$space$5',
  visibility: 'hidden',
  cursor: 'pointer',
  position: 'absolute',
  right: '0px',
  svg: {
    width: '$space$3',
    height: '$space$3',
    display: 'block',
    position: 'relative',
    top: 1,
  },
})
var tabButton = css2(
  ((_a$7 = {
    padding: '0 $space$2',
    height: '$layout$headerHeight',
    whiteSpace: 'nowrap',
    '&:focus': { outline: 'none' },
  }),
  (_a$7['&:hover ~ .'.concat(closeButtonClassName)] = {
    visibility: 'visible',
  }),
  _a$7),
)
var FileTabs = function (_a22) {
  var closableTabs = _a22.closableTabs,
    className = _a22.className,
    activeFileUniqueId = _a22.activeFileUniqueId,
    props = __rest(_a22, ['closableTabs', 'className', 'activeFileUniqueId'])
  var sandpack = useSandpack().sandpack
  var classNames = useClassNames()
  var activeFile = sandpack.activeFile,
    visibleFiles = sandpack.visibleFiles,
    setActiveFile = sandpack.setActiveFile
  var _b22 = React3.useState(null),
    hoveredIndex = _b22[0],
    setIsHoveredIndex = _b22[1]
  var getTriggerText = function (currentPath) {
    var documentFileName = getFileName(currentPath)
    var pathsWithDuplicateFileNames = visibleFiles.reduce(function (
      prev,
      curr,
    ) {
      if (curr === currentPath) {
        return prev
      }
      var fileName = getFileName(curr)
      if (fileName === documentFileName) {
        prev.push(curr)
        return prev
      }
      return prev
    }, [])
    if (pathsWithDuplicateFileNames.length === 0) {
      return documentFileName
    } else {
      return calculateNearestUniquePath(
        currentPath,
        pathsWithDuplicateFileNames,
      )
    }
  }
  var onKeyDown = function (_a3) {
    var _b3, _c2, _d, _e
    var e2 = _a3.e,
      index = _a3.index
    var target = e2.currentTarget
    switch (e2.key) {
      case 'ArrowLeft':
        {
          var leftSibling = target.previousElementSibling
          if (leftSibling) {
            ;(_b3 = leftSibling.querySelector('button')) === null ||
            _b3 === void 0
              ? void 0
              : _b3.focus()
            setActiveFile(visibleFiles[index - 1])
          }
        }
        break
      case 'ArrowRight':
        {
          var rightSibling = target.nextElementSibling
          if (rightSibling) {
            ;(_c2 = rightSibling.querySelector('button')) === null ||
            _c2 === void 0
              ? void 0
              : _c2.focus()
            setActiveFile(visibleFiles[index + 1])
          }
        }
        break
      case 'Home': {
        var parent_1 = target.parentElement
        var firstChild = parent_1.firstElementChild
        ;(_d = firstChild.querySelector('button')) === null || _d === void 0
          ? void 0
          : _d.focus()
        setActiveFile(visibleFiles[0])
        break
      }
      case 'End': {
        var parent_2 = target.parentElement
        var lastChild = parent_2.lastElementChild
        ;(_e = lastChild.querySelector('button')) === null || _e === void 0
          ? void 0
          : _e.focus()
        setActiveFile(visibleFiles[-1])
        break
      }
    }
  }
  return jsx(
    'div',
    __assign2(
      {
        className: classNames('tabs', [tabsClassName, className]),
        translate: 'no',
      },
      props,
      {
        children: jsx('div', {
          'aria-label': 'Select active file',
          className: classNames('tabs-scrollable-container', [
            tabsScrollableClassName,
          ]),
          role: 'tablist',
          children: visibleFiles.map(function (filePath, index) {
            return jsxs(
              'div',
              {
                'aria-controls': ''
                  .concat(filePath, '-')
                  .concat(activeFileUniqueId, '-tab-panel'),
                'aria-selected': filePath === activeFile,
                className: classNames('tab-container', [tabContainer]),
                onKeyDown: function (e2) {
                  return onKeyDown({ e: e2, index })
                },
                onMouseEnter: function () {
                  return setIsHoveredIndex(index)
                },
                onMouseLeave: function () {
                  return setIsHoveredIndex(null)
                },
                role: 'tab',
                children: [
                  jsx('button', {
                    className: classNames('tab-button', [
                      buttonClassName,
                      tabButton,
                    ]),
                    'data-active': filePath === activeFile,
                    id: ''
                      .concat(filePath, '-')
                      .concat(activeFileUniqueId, '-tab'),
                    onClick: function () {
                      return setActiveFile(filePath)
                    },
                    tabIndex: filePath === activeFile ? 0 : -1,
                    title: filePath,
                    type: 'button',
                    children: getTriggerText(filePath),
                  }),
                  closableTabs &&
                    visibleFiles.length > 1 &&
                    jsx('span', {
                      className: classNames('close-button', [
                        closeButtonClassName,
                      ]),
                      onClick: function (ev) {
                        ev.stopPropagation()
                        sandpack.closeFile(filePath)
                      },
                      style: {
                        visibility:
                          filePath === activeFile || hoveredIndex === index
                            ? 'visible'
                            : 'hidden',
                      },
                      tabIndex: filePath === activeFile ? 0 : -1,
                      children: jsx(CloseIcon, {}),
                    }),
                ],
              },
              filePath,
            )
          }),
        }),
      },
    ),
  )
}
var RoundedButton = function (_a22) {
  var onClick = _a22.onClick,
    className = _a22.className,
    children = _a22.children
  var classNames = useClassNames()
  return jsx('button', {
    className: classNames('button', [
      classNames('icon-standalone'),
      buttonClassName,
      iconStandaloneClassName,
      roundedButtonClassName,
      className,
    ]),
    onClick,
    type: 'button',
    children,
  })
}
var runButtonClassName = css2({
  position: 'absolute',
  bottom: '$space$2',
  right: '$space$2',
  paddingRight: '$space$3',
})
var RunButton$1 = function (_a22) {
  _a22.className
  var onClick = _a22.onClick,
    props = __rest(_a22, ['className', 'onClick'])
  var sandpack = useSandpack().sandpack
  return jsxs(
    RoundedButton,
    __assign2(
      {
        className: runButtonClassName.toString(),
        onClick: function (event) {
          sandpack.runSandpack()
          onClick === null || onClick === void 0 ? void 0 : onClick(event)
        },
      },
      props,
      { children: [jsx(RunIcon, {}), jsx('span', { children: 'Run' })] },
    ),
  )
}
var _a$6
var stackClassName = css2(
  ((_a$6 = {
    display: 'flex',
    flexDirection: 'column',
    width: '100%',
    position: 'relative',
    backgroundColor: '$colors$surface1',
    gap: 1,
  }),
  (_a$6['&:has(.'.concat(THEME_PREFIX, '-stack)')] = {
    backgroundColor: '$colors$surface2',
  }),
  _a$6),
)
var SandpackStack = function (_a22) {
  var className = _a22.className,
    props = __rest(_a22, ['className'])
  var classNames = useClassNames()
  return jsx(
    'div',
    __assign2(
      { className: classNames('stack', [stackClassName, className]) },
      props,
    ),
  )
}
var useSandpackTheme = function () {
  var _a22 = React3.useContext(SandpackThemeContext),
    theme = _a22.theme,
    id = _a22.id,
    mode = _a22.mode
  return { theme, themeId: id, themeMode: mode }
}
var shallowEqual = function (a2, b2) {
  if (a2.length !== b2.length) return false
  var result = true
  for (var index = 0; index < a2.length; index++) {
    if (a2[index] !== b2[index]) {
      result = false
      break
    }
  }
  return result
}
var getCodeMirrorPosition = function (doc, _a22) {
  var line = _a22.line,
    column = _a22.column
  return (
    doc.line(line).from +
    (column !== null && column !== void 0 ? column : 0) -
    1
  )
}
var getEditorTheme = function () {
  return EditorView.theme({
    '&': {
      backgroundColor: 'var(--'.concat(THEME_PREFIX, '-colors-surface1)'),
      color: 'var(--'.concat(THEME_PREFIX, '-syntax-color-plain)'),
      height: '100%',
    },
    '.cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket':
      {
        color: 'inherit',
        backgroundColor: 'rgba(128,128,128,.25)',
        backgroundBlendMode: 'difference',
      },
    '&.cm-editor.cm-focused': { outline: 'none' },
    '& .cm-activeLine': { backgroundColor: 'transparent' },
    '&.cm-editor.cm-focused .cm-activeLine': {
      backgroundColor: 'var(--'.concat(THEME_PREFIX, '-colors-surface3)'),
      borderRadius: 'var(--'.concat(THEME_PREFIX, '-border-radius)'),
    },
    '.cm-errorLine': {
      backgroundColor: 'var(--'.concat(THEME_PREFIX, '-colors-errorSurface)'),
      borderRadius: 'var(--'.concat(THEME_PREFIX, '-border-radius)'),
    },
    '.cm-content': {
      caretColor: 'var(--'.concat(THEME_PREFIX, '-colors-accent)'),
      padding: '0 var(--'.concat(THEME_PREFIX, '-space-4)'),
    },
    '.cm-scroller': {
      fontFamily: 'var(--'.concat(THEME_PREFIX, '-font-mono)'),
      lineHeight: 'var(--'.concat(THEME_PREFIX, '-font-lineHeight)'),
    },
    '.cm-gutters': {
      backgroundColor: 'var(--'.concat(THEME_PREFIX, '-colors-surface1)'),
      color: 'var(--'.concat(THEME_PREFIX, '-colors-disabled)'),
      border: 'none',
      paddingLeft: 'var(--'.concat(THEME_PREFIX, '-space-1)'),
    },
    '.cm-gutter.cm-lineNumbers': { fontSize: '.6em' },
    '.cm-lineNumbers .cm-gutterElement': {
      lineHeight: 'var(--'.concat(THEME_PREFIX, '-font-lineHeight)'),
      minWidth: 'var(--'.concat(THEME_PREFIX, '-space-5)'),
    },
    '.cm-content .cm-line': {
      paddingLeft: 'var(--'.concat(THEME_PREFIX, '-space-1)'),
    },
    '.cm-content.cm-readonly .cm-line': { paddingLeft: 0 },
  })
}
var classNameToken = function (name) {
  return ''.concat(THEME_PREFIX, '-syntax-').concat(name)
}
var styleTokens = function () {
  var syntaxHighLightTokens = [
    'string',
    'plain',
    'comment',
    'keyword',
    'definition',
    'punctuation',
    'property',
    'tag',
    'static',
  ]
  return syntaxHighLightTokens.reduce(function (acc, token) {
    var _a22
    return __assign2(
      __assign2({}, acc),
      ((_a22 = {}),
      (_a22['.'.concat(classNameToken(token))] = {
        color: '$syntax$color$'.concat(token),
        fontStyle: '$syntax$fontStyle$'.concat(token),
      }),
      _a22),
    )
  }, {})
}
var getSyntaxHighlight = function (theme) {
  return HighlightStyle.define([
    { tag: tags.link, textDecoration: 'underline' },
    { tag: tags.emphasis, fontStyle: 'italic' },
    { tag: tags.strong, fontWeight: 'bold' },
    { tag: tags.keyword, class: classNameToken('keyword') },
    {
      tag: [tags.atom, tags.number, tags.bool],
      class: classNameToken('static'),
    },
    { tag: tags.variableName, class: classNameToken('plain') },
    {
      // Standard tags, e.g <h1 />
      tag: tags.standard(tags.tagName),
      class: classNameToken('tag'),
    },
    {
      tag: [
        // Highlight function call
        tags.function(tags.variableName),
        // Highlight function definition differently (eg: functional component def in React)
        tags.definition(tags.function(tags.variableName)),
        // "Custom tags", meaning React component
        tags.tagName,
      ],
      class: classNameToken('definition'),
    },
    { tag: tags.propertyName, class: classNameToken('property') },
    {
      tag: [tags.literal, tags.inserted],
      class: classNameToken(theme.syntax.string ? 'string' : 'static'),
    },
    { tag: tags.punctuation, class: classNameToken('punctuation') },
    { tag: [tags.comment, tags.quote], class: classNameToken('comment') },
  ])
}
var getLanguageFromFile = function (filePath, fileType, additionalLanguages) {
  if (!filePath && !fileType) return 'javascript'
  var extension = fileType
  if (!extension && filePath) {
    var extensionDotIndex = filePath.lastIndexOf('.')
    extension = filePath.slice(extensionDotIndex + 1)
  }
  for (
    var _i2 = 0, additionalLanguages_1 = additionalLanguages;
    _i2 < additionalLanguages_1.length;
    _i2++
  ) {
    var additionalLanguage = additionalLanguages_1[_i2]
    if (
      extension === additionalLanguage.name ||
      additionalLanguage.extensions.includes(extension || '')
    ) {
      return additionalLanguage.name
    }
  }
  switch (extension) {
    case 'ts':
    case 'tsx':
      return 'typescript'
    case 'html':
    case 'svelte':
    case 'vue':
    case 'astro':
      return 'html'
    case 'css':
    case 'less':
    case 'scss':
      return 'css'
    case 'js':
    case 'jsx':
    case 'json':
    default:
      return 'javascript'
  }
}
var getCodeMirrorLanguage = function (extension, additionalLanguages) {
  var options = {
    javascript: javascript({ jsx: true, typescript: false }),
    typescript: javascript({ jsx: true, typescript: true }),
    html: html(),
    css: css(),
  }
  for (
    var _i2 = 0, additionalLanguages_2 = additionalLanguages;
    _i2 < additionalLanguages_2.length;
    _i2++
  ) {
    var additionalLanguage = additionalLanguages_2[_i2]
    if (extension === additionalLanguage.name) {
      return additionalLanguage.language
    }
  }
  return options[extension]
}
var useCombinedRefs = function () {
  var refs = []
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    refs[_i2] = arguments[_i2]
  }
  return React3.useCallback(
    function (element) {
      return refs.forEach(function (ref) {
        if (!ref) {
          return
        }
        if (typeof ref === 'function') {
          return ref(element)
        }
        ref.current = element
      })
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs,
  )
}
function highlightDecorators(positions) {
  return ViewPlugin.fromClass(
    /** @class */
    (function () {
      function class_1(view) {
        this.decorations = this.getDecoration(view)
      }
      class_1.prototype.update = function (update) {
        return
      }
      class_1.prototype.getDecoration = function (view) {
        if (!positions) return Decoration.none
        var rangesDecorators = positions.map(function (item) {
          var _a22, _b22, _c2
          var lineDeco2 = Decoration.line({
            attributes: {
              class:
                (_a22 = item.className) !== null && _a22 !== void 0 ? _a22 : '',
            },
          })
          var markDeco = Decoration.mark({
            class:
              (_b22 = item.className) !== null && _b22 !== void 0 ? _b22 : '',
            attributes:
              (_c2 = item.elementAttributes) !== null && _c2 !== void 0
                ? _c2
                : void 0,
          })
          var positionLineStart =
            getCodeMirrorPosition(view.state.doc, {
              line: item.line,
              column: item.startColumn,
            }) + 1
          if (item.startColumn && item.endColumn) {
            var positionLineEnd =
              getCodeMirrorPosition(view.state.doc, {
                line: item.line,
                column: item.endColumn,
              }) + 1
            return markDeco.range(positionLineStart, positionLineEnd)
          }
          return lineDeco2.range(positionLineStart)
        })
        return Decoration.set(rangesDecorators)
      }
      return class_1
    })(),
    {
      decorations: function (v2) {
        return v2.decorations
      },
    },
  )
}
function highlightInlineError() {
  return activeLineHighlighter
}
var lineDeco = Decoration.line({ attributes: { class: 'cm-errorLine' } })
var activeLineHighlighter = ViewPlugin.fromClass(
  /** @class */
  (function () {
    function class_1() {
      this.decorations = Decoration.none
    }
    class_1.prototype.update = function (update) {
      var _this = this
      update.transactions.forEach(function (trans) {
        var errorValue = trans.annotation('show-error')
        if (errorValue !== void 0) {
          var position =
            getCodeMirrorPosition(update.view.state.doc, {
              line: errorValue,
            }) + 1
          _this.decorations = Decoration.set([lineDeco.range(position)])
        } else if (trans.annotation('remove-errors')) {
          _this.decorations = Decoration.none
        }
      })
    }
    return class_1
  })(),
  {
    decorations: function (v2) {
      return v2.decorations
    },
  },
)
var _a$5
var _b$1
var placeholderClassName = css2({
  margin: '0',
  display: 'block',
  fontFamily: '$font$mono',
  fontSize: '$font$size',
  color: '$syntax$color$plain',
  lineHeight: '$font$lineHeight',
})
var tokensClassName = css2(styleTokens())
var editorClassName = css2(
  ((_a$5 = {
    flex: 1,
    position: 'relative',
    overflow: 'auto',
    background: '$colors$surface1',
    '.cm-scroller': { padding: '$space$4 0' },
  }),
  (_a$5['.'.concat(placeholderClassName)] = { padding: '$space$4 0' }),
  (_a$5['@media screen and (max-width: 768px)'] = {
    '@supports (-webkit-overflow-scrolling: touch)': {
      '.cm-content': { fontSize: '16px' },
    },
  }),
  _a$5),
)
var cmClassName = css2({ margin: '0', outline: 'none', height: '100%' })
var readOnlyClassName = css2(
  ((_b$1 = {
    fontFamily: '$font$mono',
    fontSize: '0.8em',
    position: 'absolute',
    right: '$space$2',
    bottom: '$space$2',
    zIndex: '$top',
    color: '$colors$clickable',
    backgroundColor: '$colors$surface2',
    borderRadius: '99999px',
    padding: 'calc($space$1 / 2) $space$2',
  }),
  (_b$1['& + .'.concat(buttonClassName)] = { right: 'calc($space$11 * 2)' }),
  _b$1),
)
var useSyntaxHighlight = function (_a22) {
  var langSupport = _a22.langSupport,
    highlightTheme = _a22.highlightTheme,
    _b22 = _a22.code,
    code = _b22 === void 0 ? '' : _b22
  var tree = langSupport.language.parser.parse(code)
  var offSet = 0
  var codeElementsRender = []
  var addElement = function (to, className) {
    if (to > offSet) {
      var children = code.slice(offSet, to)
      codeElementsRender.push(
        className
          ? /* @__PURE__ */ createElement2('span', {
              children,
              className,
              key: ''.concat(to).concat(offSet),
            })
          : children,
      )
      offSet = to
    }
  }
  highlightTree(tree, highlightTheme, function (from, to, className) {
    addElement(from, '')
    addElement(to, className)
  })
  if (
    offSet < code.length &&
    (code === null || code === void 0 ? void 0 : code.includes('\n'))
  ) {
    codeElementsRender.push('\n\n')
  }
  return codeElementsRender
}
var CodeMirror = /* @__PURE__ */ React3.forwardRef(function (_a22, ref) {
  var _b22 = _a22.code,
    code = _b22 === void 0 ? '' : _b22,
    filePath = _a22.filePath,
    fileType = _a22.fileType,
    onCodeUpdate = _a22.onCodeUpdate,
    _c2 = _a22.showLineNumbers,
    showLineNumbers = _c2 === void 0 ? false : _c2,
    _d = _a22.showInlineErrors,
    showInlineErrors = _d === void 0 ? false : _d,
    _e = _a22.wrapContent,
    wrapContent = _e === void 0 ? false : _e,
    _f = _a22.editorState,
    editorState = _f === void 0 ? 'pristine' : _f,
    _g = _a22.readOnly,
    readOnly = _g === void 0 ? false : _g,
    _h = _a22.showReadOnly,
    showReadOnly = _h === void 0 ? true : _h,
    decorators = _a22.decorators,
    _j = _a22.initMode,
    initMode = _j === void 0 ? 'lazy' : _j,
    _k = _a22.extensions,
    extensions2 = _k === void 0 ? [] : _k,
    _l = _a22.extensionsKeymap,
    extensionsKeymap = _l === void 0 ? [] : _l,
    _m = _a22.additionalLanguages,
    additionalLanguages = _m === void 0 ? [] : _m
  var wrapper = React3.useRef(null)
  var combinedRef = useCombinedRefs(wrapper, ref)
  var cmView = React3.useRef()
  var _o = useSandpackTheme(),
    theme = _o.theme,
    themeId = _o.themeId
  var _p = React3.useState(code),
    internalCode = _p[0],
    setInternalCode = _p[1]
  var _q = React3.useState(initMode === 'immediate'),
    shouldInitEditor = _q[0],
    setShouldInitEditor = _q[1]
  var classNames = useClassNames()
  var _r = useSandpack(),
    listen = _r.listen,
    autoReload = _r.sandpack.autoReload
  var prevExtension = React3.useRef([])
  var prevExtensionKeymap = React3.useRef([])
  var isIntersecting = module_default2(wrapper, {
    rootMargin: '600px 0px',
    threshold: 0.2,
  }).isIntersecting
  React3.useImperativeHandle(ref, function () {
    return {
      getCodemirror: function () {
        return cmView.current
      },
    }
  })
  React3.useEffect(
    function () {
      var mode = initMode === 'lazy' || initMode === 'user-visible'
      if (mode && isIntersecting) {
        setShouldInitEditor(true)
      }
    },
    [initMode, isIntersecting],
  )
  var languageExtension = getLanguageFromFile(
    filePath,
    fileType,
    additionalLanguages,
  )
  var langSupport = getCodeMirrorLanguage(
    languageExtension,
    additionalLanguages,
  )
  var highlightTheme = getSyntaxHighlight(theme)
  var syntaxHighlightRender = useSyntaxHighlight({
    langSupport,
    highlightTheme,
    code,
  })
  var sortedDecorators = React3.useMemo(
    function () {
      return decorators
        ? decorators.sort(function (d1, d2) {
            return d1.line - d2.line
          })
        : decorators
    },
    [decorators],
  )
  var useStaticReadOnly =
    readOnly &&
    (decorators === null || decorators === void 0
      ? void 0
      : decorators.length) === 0
  React3.useEffect(
    function () {
      if (!wrapper.current || !shouldInitEditor || useStaticReadOnly) {
        return
      }
      var parentDiv = wrapper.current
      var existingPlaceholder = parentDiv.querySelector('.sp-pre-placeholder')
      if (existingPlaceholder) {
        parentDiv.removeChild(existingPlaceholder)
      }
      var view = new EditorView({
        doc: code,
        extensions: [],
        parent: parentDiv,
      })
      view.contentDOM.setAttribute('data-gramm', 'false')
      view.contentDOM.setAttribute('data-lt-active', 'false')
      view.contentDOM.setAttribute(
        'aria-label',
        filePath
          ? 'Code Editor for '.concat(getFileName(filePath))
          : 'Code Editor',
      )
      view.contentDOM.setAttribute('tabIndex', '-1')
      cmView.current = view
      return function () {
        var _a3
        ;(_a3 = cmView.current) === null || _a3 === void 0
          ? void 0
          : _a3.destroy()
      }
    },
    [shouldInitEditor, readOnly, useStaticReadOnly],
  )
  React3.useEffect(
    function () {
      if (useStaticReadOnly) {
        return
      }
      if (cmView.current) {
        var customCommandsKeymap = [
          {
            key: 'Tab',
            run: function (view) {
              var _a3, _b3
              indentMore(view)
              var customKey = extensionsKeymap.find(function (_a4) {
                var key = _a4.key
                return key === 'Tab'
              })
              return (_b3 =
                (_a3 =
                  customKey === null || customKey === void 0
                    ? void 0
                    : customKey.run) === null || _a3 === void 0
                  ? void 0
                  : _a3.call(customKey, view)) !== null && _b3 !== void 0
                ? _b3
                : true
            },
          },
          {
            key: 'Shift-Tab',
            run: function (view) {
              var _a3, _b3
              indentLess({
                state: view.state,
                dispatch: view.dispatch,
              })
              var customKey = extensionsKeymap.find(function (_a4) {
                var key = _a4.key
                return key === 'Shift-Tab'
              })
              return (_b3 =
                (_a3 =
                  customKey === null || customKey === void 0
                    ? void 0
                    : customKey.run) === null || _a3 === void 0
                  ? void 0
                  : _a3.call(customKey, view)) !== null && _b3 !== void 0
                ? _b3
                : true
            },
          },
          {
            key: 'Escape',
            run: function () {
              if (readOnly) return true
              if (wrapper.current) {
                wrapper.current.focus()
              }
              return true
            },
          },
          { key: 'mod-Backspace', run: deleteGroupBackward },
        ]
        var extensionList = __spreadArray2(
          __spreadArray2(
            [highlightSpecialChars(), history2(), closeBrackets()],
            extensions2,
            true,
          ),
          [
            keymap.of(
              __spreadArray2(
                __spreadArray2(
                  __spreadArray2(
                    __spreadArray2(
                      __spreadArray2([], closeBracketsKeymap, true),
                      defaultKeymap,
                      true,
                    ),
                    historyKeymap,
                    true,
                  ),
                  customCommandsKeymap,
                  true,
                ),
                extensionsKeymap,
                true,
              ),
            ),
            langSupport,
            getEditorTheme(),
            syntaxHighlighting(highlightTheme),
            EditorView.updateListener.of(function (update) {
              if (update.docChanged) {
                var newCode = update.state.doc.toString()
                setInternalCode(newCode)
                onCodeUpdate === null || onCodeUpdate === void 0
                  ? void 0
                  : onCodeUpdate(newCode)
              }
            }),
          ],
          false,
        )
        if (readOnly) {
          extensionList.push(EditorState.readOnly.of(true))
          extensionList.push(EditorView.editable.of(false))
        } else {
          extensionList.push(bracketMatching())
          extensionList.push(highlightActiveLine())
        }
        if (sortedDecorators) {
          extensionList.push(highlightDecorators(sortedDecorators))
        }
        if (wrapContent) {
          extensionList.push(EditorView.lineWrapping)
        }
        if (showLineNumbers) {
          extensionList.push(lineNumbers())
        }
        if (showInlineErrors) {
          extensionList.push(highlightInlineError())
        }
        cmView.current.dispatch({
          effects: StateEffect.reconfigure.of(extensionList),
        })
      }
    },
    [
      shouldInitEditor,
      sortedDecorators,
      showLineNumbers,
      wrapContent,
      themeId,
      readOnly,
      useStaticReadOnly,
      autoReload,
    ],
  )
  React3.useEffect(
    function applyExtensions() {
      var view = cmView.current
      var dependenciesAreDiff =
        !shallowEqual(extensions2, prevExtension.current) ||
        !shallowEqual(extensionsKeymap, prevExtensionKeymap.current)
      if (view && dependenciesAreDiff) {
        view.dispatch({
          effects: StateEffect.appendConfig.of(extensions2),
        })
        view.dispatch({
          effects: StateEffect.appendConfig.of(
            keymap.of(__spreadArray2([], extensionsKeymap, true)),
          ),
        })
        prevExtension.current = extensions2
        prevExtensionKeymap.current = extensionsKeymap
      }
    },
    [extensions2, extensionsKeymap],
  )
  React3.useEffect(function () {
    if (
      cmView.current &&
      editorState === 'dirty' &&
      window.matchMedia('(min-width: 768px)').matches
    ) {
      cmView.current.contentDOM.focus()
    }
  }, [])
  React3.useEffect(
    function () {
      if (cmView.current && typeof code === 'string' && code !== internalCode) {
        var view = cmView.current
        var selection = view.state.selection.ranges.some(function (_a3) {
          var to = _a3.to,
            from = _a3.from
          return to > code.length || from > code.length
        })
          ? EditorSelection.cursor(code.length)
          : view.state.selection
        var changes = {
          from: 0,
          to: view.state.doc.length,
          insert: code,
        }
        view.dispatch({ changes, selection })
      }
    },
    [code],
  )
  React3.useEffect(
    function messageToInlineError() {
      if (!showInlineErrors) return
      var unsubscribe = listen(function (message) {
        var view = cmView.current
        if (message.type === 'success') {
          view === null || view === void 0
            ? void 0
            : view.dispatch({
                // @ts-ignore
                annotations: [new Annotation('remove-errors', true)],
              })
        } else if (
          message.type === 'action' &&
          message.action === 'show-error' &&
          message.path === filePath &&
          message.line
        ) {
          view === null || view === void 0
            ? void 0
            : view.dispatch({
                // @ts-ignore
                annotations: [new Annotation('show-error', message.line)],
              })
        }
      })
      return function () {
        return unsubscribe()
      }
    },
    [listen, showInlineErrors],
  )
  var handleContainerKeyDown = function (evt) {
    if (evt.key === 'Enter' && cmView.current) {
      evt.preventDefault()
      cmView.current.contentDOM.focus()
    }
  }
  var gutterLineOffset = function () {
    var offset = 4
    if (showLineNumbers) {
      offset += 6
    }
    if (!readOnly) {
      offset += 1
    }
    return 'var(--'.concat(THEME_PREFIX, '-space-').concat(offset, ')')
  }
  if (useStaticReadOnly) {
    return jsxs(Fragment, {
      children: [
        jsx('pre', {
          ref: combinedRef,
          className: classNames('cm', [
            classNames(editorState),
            classNames(languageExtension),
            cmClassName,
            tokensClassName,
          ]),
          translate: 'no',
          children: jsx('code', {
            className: classNames('pre-placeholder', [placeholderClassName]),
            style: { marginLeft: gutterLineOffset() },
            children: syntaxHighlightRender,
          }),
        }),
        readOnly &&
          showReadOnly &&
          jsx(
            'span',
            __assign2(
              {
                className: classNames('read-only', [readOnlyClassName]),
              },
              {},
              { children: 'Read-only' },
            ),
          ),
      ],
    })
  }
  return jsx('div', {
    ref: combinedRef,
    'aria-autocomplete': 'list',
    'aria-label': filePath
      ? 'Code Editor for '.concat(getFileName(filePath))
      : 'Code Editor',
    'aria-multiline': 'true',
    className: classNames('cm', [
      classNames(editorState),
      classNames(languageExtension),
      cmClassName,
      tokensClassName,
    ]),
    onKeyDown: handleContainerKeyDown,
    role: 'textbox',
    tabIndex: 0,
    translate: 'no',
    suppressHydrationWarning: true,
    children: jsx('pre', {
      className: classNames('pre-placeholder', [placeholderClassName]),
      style: { marginLeft: gutterLineOffset() },
      children: syntaxHighlightRender,
    }),
  })
})
var SandpackCodeEditor = /* @__PURE__ */ forwardRef2(function (_a22, ref) {
  var showTabs = _a22.showTabs,
    _b22 = _a22.showLineNumbers,
    showLineNumbers = _b22 === void 0 ? false : _b22,
    _c2 = _a22.showInlineErrors,
    showInlineErrors = _c2 === void 0 ? false : _c2,
    _d = _a22.showRunButton,
    showRunButton = _d === void 0 ? true : _d,
    _e = _a22.wrapContent,
    wrapContent = _e === void 0 ? false : _e,
    _f = _a22.closableTabs,
    closableTabs = _f === void 0 ? false : _f,
    initMode = _a22.initMode,
    extensions2 = _a22.extensions,
    extensionsKeymap = _a22.extensionsKeymap,
    readOnly = _a22.readOnly,
    showReadOnly = _a22.showReadOnly,
    additionalLanguages = _a22.additionalLanguages,
    className = _a22.className,
    props = __rest(_a22, [
      'showTabs',
      'showLineNumbers',
      'showInlineErrors',
      'showRunButton',
      'wrapContent',
      'closableTabs',
      'initMode',
      'extensions',
      'extensionsKeymap',
      'readOnly',
      'showReadOnly',
      'additionalLanguages',
      'className',
    ])
  var sandpack = useSandpack().sandpack
  var _g = useActiveCode(),
    code = _g.code,
    updateCode = _g.updateCode,
    readOnlyFile = _g.readOnly
  var activeFile = sandpack.activeFile,
    status = sandpack.status,
    editorState = sandpack.editorState
  var shouldShowTabs =
    showTabs !== null && showTabs !== void 0
      ? showTabs
      : sandpack.visibleFiles.length > 1
  var classNames = useClassNames()
  var handleCodeUpdate = function (newCode, shouldUpdatePreview) {
    if (shouldUpdatePreview === void 0) {
      shouldUpdatePreview = true
    }
    updateCode(newCode, shouldUpdatePreview)
  }
  var activeFileUniqueId = useSandpackId()
  return jsxs(
    SandpackStack,
    __assign2({ className: classNames('editor', [className]) }, props, {
      children: [
        shouldShowTabs && jsx(FileTabs, { activeFileUniqueId, closableTabs }),
        jsxs('div', {
          'aria-labelledby': ''
            .concat(activeFile, '-')
            .concat(activeFileUniqueId, '-tab'),
          className: classNames('code-editor', [editorClassName]),
          id: ''
            .concat(activeFile, '-')
            .concat(activeFileUniqueId, '-tab-panel'),
          role: 'tabpanel',
          children: [
            jsx(
              CodeMirror,
              {
                ref,
                additionalLanguages,
                code,
                editorState,
                extensions: extensions2,
                extensionsKeymap,
                filePath: activeFile,
                initMode: initMode || sandpack.initMode,
                onCodeUpdate: function (newCode) {
                  var _a3
                  return handleCodeUpdate(
                    newCode,
                    (_a3 = sandpack.autoReload) !== null && _a3 !== void 0
                      ? _a3
                      : true,
                  )
                },
                readOnly: readOnly || readOnlyFile,
                showInlineErrors,
                showLineNumbers,
                showReadOnly,
                wrapContent,
              },
              activeFile,
            ),
            showRunButton && (!sandpack.autoReload || status === 'idle')
              ? jsx(RunButton$1, {})
              : null,
          ],
        }),
      ],
    }),
  )
})
var _a$4
var _b2
var layoutClassName = css2(
  ((_a$4 = {
    border: '1px solid $colors$surface2',
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'stretch',
    borderRadius: '$border$radius',
    overflow: 'hidden',
    position: 'relative',
    backgroundColor: '$colors$surface2',
    gap: 1,
  }),
  (_a$4['> .'.concat(stackClassName)] = {
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: '0',
    height: '$layout$height',
    overflow: 'hidden',
    '@media print': { height: 'auto', display: 'block' },
    '@media screen and (max-width: 768px)':
      ((_b2 = {}),
      (_b2[
        '&:not(.'
          .concat(THEME_PREFIX, '-preview, .')
          .concat(THEME_PREFIX, '-editor, .')
          .concat(THEME_PREFIX, '-preset-column)')
      ] = { height: 'calc($layout$height / 2)' }),
      (_b2.minWidth = '100%;'),
      _b2),
  }),
  (_a$4['> .'.concat(THEME_PREFIX, '-file-explorer')] = {
    flex: 0.2,
    minWidth: 200,
    '@media screen and (max-width: 768px)': { flex: 1 },
  }),
  _a$4),
)
var SandpackLayout = /* @__PURE__ */ React3.forwardRef(function (_a22, ref) {
  var children = _a22.children,
    className = _a22.className,
    props = __rest(_a22, ['children', 'className'])
  var sandpack = useSandpack().sandpack
  var classNames = useClassNames()
  var combinedRef = useCombinedRefs(sandpack.lazyAnchorRef, ref)
  return jsx(
    'div',
    __assign2(
      {
        ref: combinedRef,
        className: classNames('layout', [layoutClassName, className]),
      },
      props,
      { children },
    ),
  )
})
var MAX_MESSAGE_COUNT$1 = 400 * 2
var consoleItemClassName$1 = css2({
  width: '100%',
  padding: '$space$3 $space$2',
  fontSize: '.85em',
  position: 'relative',
  whiteSpace: 'pre',
  '&:not(:first-child):after': {
    content: '',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 1,
    background: '$colors$surface3',
  },
})
var _a$3
var cubeClassName = css2({
  transform: 'translate(-4px, 9px) scale(0.13, 0.13)',
  '*': { position: 'absolute', width: '96px', height: '96px' },
})
var wrapperClassName$2 = css2(
  ((_a$3 = {
    position: 'absolute',
    right: '$space$2',
    bottom: '$space$2',
    zIndex: '$top',
    width: '32px',
    height: '32px',
    borderRadius: '$border$radius',
  }),
  (_a$3['.'.concat(cubeClassName)] = { display: 'flex' }),
  (_a$3['.sp-button.'.concat(buttonClassName)] = { display: 'none' }),
  (_a$3['&:hover .sp-button.'.concat(buttonClassName)] = { display: 'flex' }),
  (_a$3['&:hover .sp-button.'.concat(buttonClassName, ' > span')] = {
    display: 'none',
  }),
  (_a$3['&:hover .'.concat(cubeClassName)] = { display: 'none' }),
  _a$3),
)
var cubeRotate = keyframes({
  '0%': { transform: 'rotateX(-25.5deg) rotateY(45deg)' },
  '100%': { transform: 'rotateX(-25.5deg) rotateY(405deg)' },
})
var sidesClassNames = css2({
  animation: ''.concat(cubeRotate, ' 1s linear infinite'),
  animationFillMode: 'forwards',
  transformStyle: 'preserve-3d',
  transform: 'rotateX(-25.5deg) rotateY(45deg)',
  '*': {
    border: '10px solid $colors$clickable',
    borderRadius: '8px',
    background: '$colors$surface1',
  },
  '.top': {
    transform: 'rotateX(90deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
  '.bottom': {
    transform: 'rotateX(-90deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
  '.front': {
    transform: 'rotateY(0deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
  '.back': {
    transform: 'rotateY(-180deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
  '.left': {
    transform: 'rotateY(-90deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
  '.right': {
    transform: 'rotateY(90deg) translateZ(44px)',
    transformOrigin: '50% 50%',
  },
})
var loadingClassName = css2({ backgroundColor: '$colors$surface1' })
var stdoutPreview = css2({
  position: 'absolute',
  left: 0,
  right: 0,
  bottom: '$space$8',
  overflow: 'auto',
  opacity: 0.5,
  overflowX: 'hidden',
})
var progressClassName$1 = css2({
  position: 'absolute',
  left: '$space$5',
  bottom: '$space$4',
  zIndex: '$top',
  color: '$colors$clickable',
  animation: ''.concat(fadeIn, ' 150ms ease'),
  fontFamily: '$font$mono',
  fontSize: '.8em',
  width: '75%',
  p: {
    whiteSpace: 'nowrap',
    margin: 0,
    textOverflow: 'ellipsis',
    overflow: 'hidden',
  },
})
var progressClassName = css2({
  position: 'absolute',
  left: '$space$5',
  bottom: '$space$4',
  zIndex: '$top',
  color: '$colors$clickable',
  animation: ''.concat(fadeIn, ' 150ms ease'),
  fontFamily: '$font$mono',
  fontSize: '.8em',
  width: '75%',
  p: {
    whiteSpace: 'nowrap',
    margin: 0,
    textOverflow: 'ellipsis',
    overflow: 'hidden',
  },
})
var explorerClassName = css2({
  borderRadius: '0',
  width: '100%',
  padding: 0,
  marginBottom: '$space$2',
  span: {
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
  },
  svg: { marginRight: '$space$1' },
})
var fileExplorerClassName = css2({
  padding: '$space$3',
  overflow: 'auto',
  height: '100%',
})
var navigatorClassName = css2({
  display: 'flex',
  alignItems: 'center',
  height: '$layout$headerHeight',
  borderBottom: '1px solid $colors$surface2',
  padding: '$space$3 $space$2',
  background: '$colors$surface1',
})
var inputClassName = css2({
  backgroundColor: '$colors$surface2',
  color: '$colors$clickable',
  padding: '$space$1 $space$3',
  borderRadius: '99999px',
  border: '1px solid $colors$surface2',
  height: '24px',
  lineHeight: '24px',
  fontSize: 'inherit',
  outline: 'none',
  flex: 1,
  marginLeft: '$space$4',
  width: '0',
  transition: 'background $transitions$default',
  '&:hover': { backgroundColor: '$colors$surface3' },
  '&:focus': {
    backgroundColor: '$surface1',
    border: '1px solid $colors$accent',
    color: '$colors$base',
  },
})
var _a$2
var previewClassName = css2(
  ((_a$2 = {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    background: 'white',
    overflow: 'auto',
    position: 'relative',
  }),
  (_a$2['.'.concat(THEME_PREFIX, '-bridge-frame')] = {
    border: 0,
    position: 'absolute',
    left: '$space$2',
    bottom: '$space$2',
    zIndex: '$top',
    height: 12,
    width: '30%',
    mixBlendMode: 'multiply',
    pointerEvents: 'none',
  }),
  _a$2),
)
var previewIframe = css2({
  border: '0',
  outline: '0',
  width: '100%',
  height: '100%',
  minHeight: '160px',
  maxHeight: '2000px',
  flex: 1,
})
var previewActionsClassName$1 = css2({
  display: 'flex',
  position: 'absolute',
  bottom: '$space$2',
  right: '$space$2',
  zIndex: '$overlay',
  gap: '$space$2',
})
var _a$12
var transpiledCodeClassName = css2(
  ((_a$12 = {
    display: 'flex',
    flexDirection: 'column',
    width: '100%',
    position: 'relative',
    overflow: 'auto',
    minHeight: '160px',
    flex: 1,
  }),
  (_a$12['.'.concat(THEME_PREFIX, '-stack')] = { height: '100%' }),
  _a$12),
)
var wrapperClassName$1 = css2({
  justifyContent: 'space-between',
  borderBottom: '1px solid $colors$surface2',
  padding: '0 $space$2',
  fontFamily: '$font$mono',
  height: '$layout$headerHeight',
  minHeight: '$layout$headerHeight',
  overflowX: 'auto',
  whiteSpace: 'nowrap',
})
var flexClassName$1 = css2({
  display: 'flex',
  flexDirection: 'row',
  alignItems: 'center',
  gap: '$space$2',
})
var color = css2({
  variants: {
    status: {
      pass: { color: 'var(--test-pass)' },
      fail: { color: 'var(--test-fail)' },
      skip: { color: 'var(--test-skip)' },
      title: { color: 'var(--test-title)' },
    },
  },
})
var passTextClassName = color({ status: 'pass' })
var failTextClassName = color({ status: 'fail' })
var skipTextClassName = color({ status: 'skip' })
var titleTextClassName = color({ status: 'title' })
var background = css2({
  variants: {
    status: {
      pass: { background: 'var(--test-pass)', color: '$colors$surface1' },
      fail: { background: 'var(--test-fail)', color: '$colors$surface1' },
      run: { background: 'var(--test-run)', color: '$colors$surface1' },
    },
  },
})
var runBackgroundClassName = background({ status: 'run' })
var passBackgroundClassName = background({ status: 'pass' })
var failBackgroundClassName = background({ status: 'fail' })
var testContainerClassName = css2({ marginLeft: '$space$4' })
var containerClassName$4 = css2({
  marginBottom: '$space$2',
  color: '$colors$clickable',
})
var testClassName = css2({ marginBottom: '$space$2', color: '$colors$hover' })
var durationClassName = css2({ marginLeft: '$space$2' })
var gapRightClassName = css2({ marginRight: '$space$2' })
var nameClassName = css2({ color: '$colors$hover', marginBottom: '$space$2' })
var containerClassName$3 = css2({ marginLeft: '$space$4' })
var containerClassName$2 = css2({
  color: '$colors$hover',
  fontSize: '$font$size',
  padding: '$space$2',
  whiteSpace: 'pre-wrap',
})
var fileContainer = css2({
  display: 'flex',
  flexDirection: 'row',
  alignItems: 'center',
  marginBottom: '$space$2',
})
var gapBottomClassName$1 = css2({ marginBottom: '$space$2' })
var failTestClassName = css2({ fontWeight: 'bold' })
var labelClassName$1 = css2({ borderRadius: 'calc($border$radius / 2)' })
var specLabelClassName = css2({
  padding: '$space$1 $space$2',
  fontFamily: '$font$mono',
  textTransform: 'uppercase',
  marginRight: '$space$2',
})
var filePathButtonClassName = css2({
  fontFamily: '$font$mono',
  cursor: 'pointer',
  display: 'inline-block',
})
var filePathClassName = css2({
  color: '$colors$clickable',
  textDecorationStyle: 'dotted',
  textDecorationLine: 'underline',
})
var fileNameClassName = css2({
  color: '$colors$hover',
  fontWeight: 'bold',
  textDecorationStyle: 'dotted',
  textDecorationLine: 'underline',
})
var gapBottomClassName = css2({ marginBottom: '$space$2' })
var labelClassName = css2({
  fontWeight: 'bold',
  color: '$colors$hover',
  whiteSpace: 'pre-wrap',
})
var containerClassName$1 = css2({
  fontWeight: 'bold',
  color: '$colors$clickable',
})
var previewActionsClassName = css2({
  display: 'flex',
  position: 'absolute',
  bottom: '$space$2',
  right: '$space$2',
  zIndex: '$overlay',
  '> *': { marginLeft: '$space$2' },
})
var containerClassName = css2({
  padding: '$space$4',
  height: '100%',
  overflow: 'auto',
  display: 'flex',
  flexDirection: 'column',
  position: 'relative',
  fontFamily: '$font$mono',
})
var fileErrorContainerClassName = css2({
  fontWeight: 'bold',
  color: '$colors$base',
})
var MAX_KEYS = 400
var MAX_MESSAGE_COUNT = MAX_KEYS * 2
var GLOBAL = (function getGlobal() {
  if (typeof globalThis !== 'undefined') return globalThis
  if (typeof window !== 'undefined') return window
  if (typeof globalThis !== 'undefined') return globalThis
  if (typeof self !== 'undefined') return self
  throw Error('Unable to locate global object')
})()
var Arithmetic
;(function (Arithmetic2) {
  Arithmetic2[(Arithmetic2['infinity'] = 0)] = 'infinity'
  Arithmetic2[(Arithmetic2['minusInfinity'] = 1)] = 'minusInfinity'
  Arithmetic2[(Arithmetic2['minusZero'] = 2)] = 'minusZero'
})(Arithmetic || (Arithmetic = {}))
var _a2
var consoleItemClassName = css2(
  ((_a2 = {
    width: '100%',
    padding: '$space$3 $space$2',
    fontSize: '.8em',
    position: 'relative',
    '&:not(:first-child):after': {
      content: '',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: 1,
      background: '$colors$surface3',
    },
    /**
     * Editor reset
     */
    '.sp-cm': { padding: 0 },
    '.cm-editor': { background: 'none' },
    '.cm-content': { padding: 0 },
  }),
  (_a2['.'.concat(THEME_PREFIX, '-pre-placeholder')] = {
    margin: '0 !important',
    fontSize: '1em',
  }),
  (_a2.variants = {
    variant: {
      error: {
        color: '$colors$error',
        background: '$colors$errorSurface',
        '&:not(:first-child):after': {
          background: '$colors$error',
          opacity: 0.07,
        },
      },
      warning: {
        color: '$colors$warning',
        background: '$colors$warningSurface',
        '&:not(:first-child):after': {
          background: '$colors$warning',
          opacity: 0.07,
        },
      },
      clear: { fontStyle: 'italic' },
      info: {},
    },
  }),
  _a2),
)
var wrapperClassName = css2({
  justifyContent: 'space-between',
  borderBottom: '1px solid $colors$surface2',
  padding: '0 $space$2',
  fontFamily: '$font$mono',
  height: '$layout$headerHeight',
  minHeight: '$layout$headerHeight',
  overflowX: 'auto',
  whiteSpace: 'nowrap',
})
var flexClassName = css2({
  display: 'flex',
  flexDirection: 'row',
  alignItems: 'center',
  gap: '$space$2',
})
var dragHandler = css2({
  position: 'absolute',
  zIndex: '$top',
  variants: {
    direction: {
      vertical: { right: 0, left: 0, height: 10, cursor: 'ns-resize' },
      horizontal: { top: 0, bottom: 0, width: 10, cursor: 'ew-resize' },
    },
  },
  '@media screen and (max-width: 768px)': { display: 'none' },
})
var buttonCounter = css2({
  position: 'relative',
  strong: {
    background: '$colors$clickable',
    color: '$colors$surface1',
    minWidth: 12,
    height: 12,
    padding: '0 2px',
    borderRadius: 12,
    fontSize: 8,
    lineHeight: '12px',
    position: 'absolute',
    top: 0,
    right: 0,
    fontWeight: 'normal',
  },
})
var consoleWrapper = css2({ width: '100%', overflow: 'hidden' })
var rtlLayoutClassName = css2({
  flexDirection: 'row-reverse',
  '@media screen and (max-width: 768px)': {
    flexFlow: 'wrap-reverse !important',
    flexDirection: 'initial',
  },
})

// /:https://framerusercontent.com/modules/pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js
import { addPropertyControls, ControlType, withCSS } from 'unframer'

// /:https://framerusercontent.com/modules/wOI0XDWuPNeaYuatKp4b/ezOdeUpHBrE7fwL9evTL/browser.js
var __unframerNavigator = typeof window !== 'undefined' ? navigator : void 0
var Browser
;(function (Browser2) {
  var isBrowser = (Browser2.isBrowser = () => typeof window === 'object')
  var isTouch = (Browser2.isTouch = () =>
    'ontouchstart' in window || __unframerNavigator.maxTouchPoints > 0)
  var isChrome = (Browser2.isChrome = () =>
    __unframerNavigator.userAgent.toLowerCase().includes('chrome/'))
  var isWebKit = (Browser2.isWebKit = () =>
    __unframerNavigator.userAgent.toLowerCase().includes('applewebkit/'))
  var isSafari = (Browser2.isSafari = () => isWebKit() && !isChrome())
  var isSafariDesktop = (Browser2.isSafariDesktop = () =>
    isSafari() && !isTouch())
  var isWindows = (Browser2.isWindows = () =>
    /Win/.test(__unframerNavigator.platform))
  var isMacOS = (Browser2.isMacOS = () =>
    /Mac/.test(__unframerNavigator.platform))
})(Browser || (Browser = {}))

// /:https://framerusercontent.com/modules/19BkzxjVBT3VP0Ykl3DY/3DPoanIA3vfPHW40mbKX/types.js
var supportedLanguages = [
  'Angular',
  'C',
  'C#',
  'C++',
  'CSS',
  'Go',
  'Haskell',
  'HTML',
  'Java',
  'JavaScript',
  'JSX',
  'Julia',
  'Kotlin',
  'Less',
  'Lua',
  'Markdown',
  'MATLAB',
  'Nginx',
  'Objective-C',
  'Perl',
  'PHP',
  'Python',
  'Ruby',
  'Rust',
  'Scala',
  'SCSS',
  'Shell',
  'SQL',
  'Swift',
  'TSX',
  'TypeScript',
  'Vue',
  'YAML',
]

// /:https://framerusercontent.com/modules/HpmklHRFex5a5HMDftQo/5VVfjnRHGJM1T33zb1N5/SuspenseValue.js
var SuspenseValue = class {
  read() {
    const status = this.status
    if (status) {
      switch (status.type) {
        // If the promise is still pending we need to suspend again.
        case 'pending':
          throw status.promise
        // If the promise is fulfilled we can return the value
        // synchronously.
        case 'fulfilled':
          return status.value
        // If the promise was rejected we can throw the error so we can
        // catch it with an ErrorBoundary in an ancestor.
        case 'rejected':
          throw status.reason
      }
    }
    const promise = this.resolver().then(
      (value) => {
        this.status = { type: 'fulfilled', value }
      },
      (reason) => {
        this.status = { type: 'rejected', reason }
      },
    )
    this.status = { type: 'pending', promise }
    throw promise
  }
  constructor(resolver) {
    this.resolver = resolver
  }
}

// /:https://framerusercontent.com/modules/IdMJ4CymCWCh4cOBkZlb/eelWnWuz7D3MwsDAYYYK/utils.js
import { Color, RenderTarget, clampRGB } from 'unframer'
import { useState as useState4, useMemo as useMemo2 } from 'react'
function getFileExtensions(language) {
  switch (language) {
    case 'JavaScript':
      return ['js']
    case 'JSX':
      return ['jsx']
    case 'TypeScript':
      return ['ts']
    case 'TSX':
      return ['tsx']
    case 'CSS':
      return ['css']
    case 'SCSS':
      return ['scss']
    case 'Less':
      return ['less']
    case 'HTML':
      return ['html', 'htm']
    case 'Angular':
      return ['ts']
    case 'C':
      return ['c']
    case 'C#':
      return ['cs']
    case 'C++':
      return ['cpp', 'cxx', 'cc', 'h', 'hpp']
    case 'Go':
      return ['go']
    case 'Haskell':
      return ['hs']
    case 'Java':
      return ['java']
    case 'Julia':
      return ['jl']
    case 'Kotlin':
      return ['kt', 'kts']
    case 'Lua':
      return ['lua']
    case 'Markdown':
      return ['md']
    case 'MATLAB':
      return ['m']
    case 'Nginx':
      return ['conf']
    case 'Objective-C':
      return ['m', 'mm']
    case 'Perl':
      return ['pl']
    case 'PHP':
      return ['php', 'php4', 'php5', 'phtml']
    case 'Python':
      return ['py']
    case 'Ruby':
      return ['rb']
    case 'Rust':
      return ['rs']
    case 'Scala':
      return ['scala']
    case 'Shell':
      return ['sh']
    case 'SQL':
      return ['sql']
    case 'Swift':
      return ['swift']
    case 'Vue':
      return ['vue']
    case 'YAML':
      return ['yaml', 'yml']
    default:
      return []
  }
}
function useBorder(props, collapseEqualBorders = true) {
  const style = {}
  const {
    borderWidth = 0,
    borderColor = 'unset',
    borderStyle = 'none',
    borderBottomWidth = 0,
    borderLeftWidth = 0,
    borderRightWidth = 0,
    borderTopWidth = 0,
  } = normalizeBorderProperties(props)
  const isMixedBorderWidth =
    borderTopWidth !== borderBottomWidth ||
    borderTopWidth !== borderLeftWidth ||
    borderTopWidth !== borderRightWidth
  let borderTop
  let borderBottom
  let borderLeft
  let borderRight
  if (!isMixedBorderWidth) {
    borderTop = borderBottom = borderLeft = borderRight = borderWidth
  } else {
    borderTop = borderTopWidth
    borderRight = borderRightWidth
    borderBottom = borderBottomWidth
    borderLeft = borderLeftWidth
  }
  if (
    collapseEqualBorders &&
    borderTop === borderBottom &&
    borderTop === borderLeft &&
    borderTop === borderRight
  ) {
    style.border = `${borderTop}px ${borderStyle} ${borderColor}`
  } else {
    style.borderStyle = borderStyle
    style.borderColor = borderColor
    style.borderTopWidth = `${borderTop}px`
    style.borderBottomWidth = `${borderBottom}px`
    style.borderLeftWidth = `${borderLeft}px`
    style.borderRightWidth = `${borderRight}px`
  }
  return style
}
function normalizeBorderProperties(border) {
  const normalizedProps = {
    borderWidth: border.borderWidth,
    borderColor: border.borderColor,
    borderStyle: border.borderStyle,
  }
  if (
    'borderBottomWidth' in border ||
    'borderLeftWidth' in border ||
    'borderRightWidth' in border ||
    'borderTopWidth' in border
  ) {
    normalizedProps.borderBottomWidth = border.borderBottomWidth
    normalizedProps.borderLeftWidth = border.borderLeftWidth
    normalizedProps.borderRightWidth = border.borderRightWidth
    normalizedProps.borderTopWidth = border.borderTopWidth
  } else if (
    'borderWidthBottom' in border ||
    'borderWidthLeft' in border ||
    'borderWidthRight' in border ||
    'borderWidthTop' in border
  ) {
    normalizedProps.borderBottomWidth = border.borderWidthBottom
    normalizedProps.borderLeftWidth = border.borderWidthLeft
    normalizedProps.borderRightWidth = border.borderWidthRight
    normalizedProps.borderTopWidth = border.borderWidthTop
  }
  return normalizedProps
}
var groupsRegex = /[A-Z]{2,}|[A-Z][a-z]+|[a-z]+|[A-Z]|\d+/gu
function capitalizeFirstLetter(value) {
  return value.charAt(0).toUpperCase() + value.slice(1)
}
function titleCase(value) {
  const groups = value.match(groupsRegex) || []
  return groups.map(capitalizeFirstLetter).join(' ')
}
function useRadius(props) {
  const {
    borderRadius,
    isMixedBorderRadius,
    topLeftRadius,
    topRightRadius,
    bottomRightRadius,
    bottomLeftRadius,
  } = props
  const radiusValue = useMemo2(
    () =>
      isMixedBorderRadius
        ? `${topLeftRadius}px ${topRightRadius}px ${bottomRightRadius}px ${bottomLeftRadius}px`
        : `${borderRadius}px`,
    [
      borderRadius,
      isMixedBorderRadius,
      topLeftRadius,
      topRightRadius,
      bottomRightRadius,
      bottomLeftRadius,
    ],
  )
  return radiusValue
}
function usePadding(props) {
  const {
    padding,
    paddingBottom,
    paddingLeft,
    paddingPerSide,
    paddingRight,
    paddingTop,
  } = props
  const paddingValue = useMemo2(
    () =>
      paddingPerSide
        ? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
        : `${padding}px`,
    [
      padding,
      paddingBottom,
      paddingLeft,
      paddingPerSide,
      paddingRight,
      paddingTop,
    ],
  )
  return paddingValue
}
function useIsOnCanvas() {
  const [onCanvas] = useState4(
    () => RenderTarget.current() === RenderTarget.canvas,
  )
  return onCanvas
}
function isObject(value) {
  return value !== null && typeof value === 'object'
}
function isDarkColor2(color2) {
  let r3 = 0
  let g2 = 0
  let b2 = 0
  if (color2.startsWith('#')) {
    if (color2.length < 7) {
      return true
    }
    r3 = parseInt(color2.substr(1, 2), 16)
    g2 = parseInt(color2.substr(3, 2), 16)
    b2 = parseInt(color2.substr(5, 2), 16)
  } else {
    color2 = Color.isP3String(color2) ? clampRGB(color2) : color2
    const rgbValues = color2
      .replace('rgb(', '')
      .replace('rgba(', '')
      .replace(')', '')
      .split(',')
    if (rgbValues.length < 3) {
      return true
    }
    r3 = parseInt(rgbValues[0], 10)
    g2 = parseInt(rgbValues[1], 10)
    b2 = parseInt(rgbValues[2], 10)
  }
  const yiq = (r3 * 299 + g2 * 587 + b2 * 114) / 1e3
  return yiq < 128
}

// /:https://framerusercontent.com/modules/DyzTKdNCsRH8nvz08sNT/1bZkTPmppsxNhQB2wWTJ/useLanguageAsync.js
var angular2 = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_angular-632LPODK.js')
  return language.angular()
})
var cpp = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_cpp-O3PA5PVM.js')
  return language.cpp()
})
var java = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_java-6BLMZAC3.js')
  return language.java()
})
var markdown = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_markdown-YOVINULI.js')
  return language.markdown()
})
var php = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_php-YM6UWJSA.js')
  return language.php()
})
var python = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_python-ININRB5D.js')
  return language.python()
})
var rust = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_rust-XAUGFWTO.js')
  return language.rust()
})
var sql = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_sql-UCLQKKKL.js')
  return language.sql()
})
var vue = new SuspenseValue(async () => {
  const language = await import('./codemirror_lang_vue-C7DFWAXI.js')
  return language.vue()
})
var scala = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_clike-ARRIUV2U.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.scala))
})
var c2 = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_clike-ARRIUV2U.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.c))
})
var csharp = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_clike-ARRIUV2U.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.csharp))
})
var kotlin = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_clike-ARRIUV2U.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.kotlin))
})
var objectiveC = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_clike-ARRIUV2U.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.objectiveC))
})
var go = new SuspenseValue(async () => {
  const language = await import('./codemirror_legacy_modes_mode_go-HKDL7657.js')
  return new LanguageSupport(StreamLanguage.define(language.go))
})
var haskell = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_haskell-ABI2SUWQ.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.haskell))
})
var julia = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_julia-BJUXIFFD.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.julia))
})
var lua = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_lua-KKAYNKZO.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.lua))
})
var nginx = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_nginx-275HNMLF.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.nginx))
})
var octave = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_octave-OJIOKWQ6.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.octave))
})
var perl = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_perl-COA3GSH2.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.perl))
})
var ruby = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_ruby-QYQDNWUM.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.ruby))
})
var shell = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_shell-DMEVYPT4.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.shell))
})
var swift = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_swift-XOW3XLBD.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.swift))
})
var yaml = new SuspenseValue(async () => {
  const language = await import(
    './codemirror_legacy_modes_mode_yaml-COX3VY5N.js'
  )
  return new LanguageSupport(StreamLanguage.define(language.yaml))
})
function useLanguageAsync(name) {
  switch (name) {
    case 'Angular':
      return {
        name: 'angular',
        extensions: getFileExtensions(name),
        language: angular2.read(),
      }
    case 'C++':
      return {
        name: 'cpp',
        extensions: getFileExtensions(name),
        language: cpp.read(),
      }
    case 'Java':
      return {
        name: 'java',
        extensions: getFileExtensions(name),
        language: java.read(),
      }
    case 'Markdown':
      return {
        name: 'markdown',
        extensions: getFileExtensions(name),
        language: markdown.read(),
      }
    case 'PHP':
      return {
        name: 'php',
        extensions: getFileExtensions(name),
        language: php.read(),
      }
    case 'Python':
      return {
        name: 'python',
        extensions: getFileExtensions(name),
        language: python.read(),
      }
    case 'Rust':
      return {
        name: 'rust',
        extensions: getFileExtensions(name),
        language: rust.read(),
      }
    case 'SQL':
      return {
        name: 'sql',
        extensions: getFileExtensions(name),
        language: sql.read(),
      }
    case 'Vue':
      return {
        name: 'vue',
        extensions: getFileExtensions(name),
        language: vue.read(),
      }
    case 'C':
      return {
        name: 'c',
        extensions: getFileExtensions(name),
        language: c2.read(),
      }
    case 'C#':
      return {
        name: 'csharp',
        extensions: getFileExtensions(name),
        language: csharp.read(),
      }
    case 'Objective-C':
      return {
        name: 'objectiveC',
        extensions: getFileExtensions(name),
        language: objectiveC.read(),
      }
    case 'Kotlin':
      return {
        name: 'kotlin',
        extensions: getFileExtensions(name),
        language: kotlin.read(),
      }
    case 'Scala':
      return {
        name: 'scala',
        extensions: getFileExtensions(name),
        language: scala.read(),
      }
    case 'Go':
      return {
        name: 'go',
        extensions: getFileExtensions(name),
        language: go.read(),
      }
    case 'Haskell':
      return {
        name: 'haskell',
        extensions: getFileExtensions(name),
        language: haskell.read(),
      }
    case 'Julia':
      return {
        name: 'julia',
        extensions: getFileExtensions(name),
        language: julia.read(),
      }
    case 'Lua':
      return {
        name: 'lua',
        extensions: getFileExtensions(name),
        language: lua.read(),
      }
    case 'Nginx':
      return {
        name: 'nginx',
        extensions: getFileExtensions(name),
        language: nginx.read(),
      }
    case 'MATLAB':
      return {
        name: 'octave',
        extensions: getFileExtensions(name),
        language: octave.read(),
      }
    case 'Perl':
      return {
        name: 'perl',
        extensions: getFileExtensions(name),
        language: perl.read(),
      }
    case 'Ruby':
      return {
        name: 'ruby',
        extensions: getFileExtensions(name),
        language: ruby.read(),
      }
    case 'Shell':
      return {
        name: 'shell',
        extensions: getFileExtensions(name),
        language: shell.read(),
      }
    case 'Swift':
      return {
        name: 'swift',
        extensions: getFileExtensions(name),
        language: swift.read(),
      }
    case 'YAML':
      return {
        name: 'yaml',
        extensions: getFileExtensions(name),
        language: yaml.read(),
      }
  }
}

// /:https://framerusercontent.com/modules/c4BjG1nmVImY1EzTuV13/B7rGpsdWsN6NgevmHZzi/codesandbox_sandpack_themes.js
var amethyst = {
  colors: {
    surface1: '#000000',
    surface2: '#0a0a23',
    surface3: '#3b3b4f',
    clickable: '#dfdfe2',
    base: '#ffffff',
    disabled: '#858591',
    hover: '#ffffff',
    accent: '#a26cd6',
    error: '#ffffff',
    errorSurface: '#3b3b4f',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#858591', fontStyle: 'italic' },
    keyword: '#a26cdd',
    tag: '#f07178',
    punctuation: '#99c9ff',
    definition: '#ffffff',
    property: '#99c9ff',
    static: '#f78c6c',
    string: '#57d1b7',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '12px',
    lineHeight: '18px',
  },
}
var aquaBlue = {
  colors: {
    surface1: '#f8f9fb',
    surface2: '#EBEDF0',
    surface3: '#e4e7eb',
    clickable: '#737373',
    base: '#323232',
    disabled: '#C5C5C5',
    hover: '#1f2933',
    accent: '#2e7692',
  },
  syntax: {
    plain: '#1F2933',
    comment: { color: '#A7B6C2', fontStyle: 'italic' },
    keyword: '#1A56DB',
    tag: '#1A56DB',
    punctuation: '#394b59',
    definition: '#A23DAD',
    property: '#2e7692',
    static: '#1A56DB',
    string: '#1992D4',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var atomDark = {
  colors: {
    surface1: '#282c34',
    surface2: '#21252b',
    surface3: '#2c313c',
    clickable: '#a8b1c2',
    base: '#a8b1c2',
    disabled: '#4d4d4d',
    hover: '#e8effc',
    accent: '#c678dd',
    error: '#e06c75',
    errorSurface: '#ffeceb',
  },
  syntax: {
    plain: '#a8b1c2',
    comment: { color: '#757575', fontStyle: 'italic' },
    keyword: '#c678dd',
    tag: '#e06c75',
    punctuation: '#a8b1c2',
    definition: '#62aeef',
    property: '#d19a66',
    static: '#a8b1c2',
    string: '#98c379',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var cobalt2 = {
  colors: {
    surface1: '#193549',
    surface2: '#0d3a58',
    surface3: '#1f4662',
    clickable: '#aaaaaa',
    base: '#ffffff',
    disabled: '#C5C5C5',
    hover: '#ffffff',
    accent: '#ffc600',
    error: '#a22929',
    errorSurface: '#0d3a58',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#0088ff', fontStyle: 'italic' },
    keyword: '#ff9d00',
    tag: '#9effff',
    punctuation: '#e1efff',
    definition: '#ffc600',
    property: '#ffc600',
    static: '#ffee80',
    string: '#a5ff90',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Operator Mono", "Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var cyberpunk = {
  colors: {
    surface1: '#051c30',
    surface2: '#042f40',
    surface3: '#042f40',
    clickable: '#aaaaaa',
    base: '#ffffff',
    disabled: '#C5C5C5',
    hover: '#ffffff',
    accent: '#fdf500',
    error: '#ff003c',
    errorSurface: '#051c30',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#1ac5b0', fontStyle: 'italic' },
    keyword: '#fdf500',
    tag: '#ffc600',
    punctuation: '#afd7fa',
    definition: '#ffc600',
    property: '#fdf500',
    static: '#e455ae',
    string: '#37ebf3',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var dracula = {
  colors: {
    surface1: '#282a36',
    surface2: '#44475a',
    surface3: '#44475a',
    clickable: '#6272a4',
    base: '#f8f8f2',
    disabled: '#6272a4',
    hover: '#f8f8f2',
    accent: '#bd93f9',
    error: '#f8f8f2',
    errorSurface: '#44475a',
  },
  syntax: {
    plain: '#f8f8f2',
    comment: { color: '#6272a4', fontStyle: 'italic' },
    keyword: '#ff79c6',
    tag: '#ff79c6',
    punctuation: '#ff79c6',
    definition: '#f8f8f2',
    property: '#50fa7b',
    static: '#bd93f9',
    string: '#f1fa8c',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var freeCodeCampDark = {
  colors: {
    surface1: '#2a2a40',
    surface2: '#0a0a23',
    surface3: '#3b3b4f',
    clickable: '#dfdfe2',
    base: '#ffffff',
    disabled: '#858591',
    hover: '#ffffff',
    accent: '#dbb8ff',
    error: '#ffffff',
    errorSurface: '#3b3b4f',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#858591', fontStyle: 'italic' },
    keyword: '#dbb8ff',
    tag: '#f07178',
    punctuation: '#99c9ff',
    definition: '#ffffff',
    property: '#99c9ff',
    static: '#f78c6c',
    string: '#acd157',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var githubLight = {
  colors: {
    surface1: '#ffffff',
    surface2: '#F3F3F3',
    surface3: '#f5f5f5',
    clickable: '#959da5',
    base: '#24292e',
    disabled: '#d1d4d8',
    hover: '#24292e',
    accent: '#24292e',
  },
  syntax: {
    keyword: '#d73a49',
    property: '#005cc5',
    plain: '#24292e',
    static: '#032f62',
    string: '#032f62',
    definition: '#6f42c1',
    punctuation: '#24292e',
    tag: '#22863a',
    comment: { color: '#6a737d', fontStyle: 'normal' },
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var levelUp = {
  colors: {
    surface1: '#191324',
    surface2: '#261e33',
    surface3: '#524763',
    clickable: '#aaaaaa',
    base: '#ffffff',
    disabled: '#aaaaaa',
    hover: '#ffffff',
    accent: '#82d8d8',
    error: '#e54b4b',
    errorSurface: '#191324',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#82d8d8', fontStyle: 'italic' },
    keyword: '#e54b4b',
    tag: '#ff26be',
    punctuation: '#9588aa',
    definition: '#82d8d8',
    property: '#82d8d8',
    static: '#82d8d8',
    string: '#a8fe39',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"MonoLisa", "Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var monokaiPro = {
  colors: {
    surface1: '#2D2A2E',
    surface2: '#444344',
    surface3: '#484747',
    clickable: '#939293',
    base: '#C1C0C1',
    disabled: '#444344',
    hover: '#FCFCFA',
    accent: '#FFD866',
    error: '#ffcdca',
    errorSurface: '#c24038',
  },
  syntax: {
    plain: 'rgb(252, 252, 250)',
    comment: { color: '#757575', fontStyle: 'italic' },
    keyword: 'rgb(255, 97, 136)',
    tag: 'rgb(120, 220, 232)',
    punctuation: 'rgb(147, 146, 147)',
    definition: 'rgb(169, 220, 118)',
    property: { color: 'rgb(120, 220, 232)', fontStyle: 'italic' },
    static: 'rgb(171, 157, 242)',
    string: 'rgb(255, 216, 102)',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var neoCyan = {
  colors: {
    surface1: '#2b3935',
    surface2: '#191324',
    surface3: '#524763',
    clickable: '#aaaaaa',
    base: '#ffffff',
    disabled: '#aaaaaa',
    hover: '#ffffff',
    accent: '#82d8d8',
    error: '#e54b4b',
    errorSurface: '#191324',
  },
  syntax: {
    plain: '#ffffff',
    comment: { color: '#82d8d8', fontStyle: 'italic' },
    keyword: '#e54b4b',
    tag: '#ff26be',
    punctuation: '#9588aa',
    definition: '#82d8d8',
    property: '#82d8d8',
    static: '#82d8d8',
    string: '#a8fe39',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"MonoLisa", "Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '12px',
    lineHeight: '18px',
  },
}
var nightOwl = {
  colors: {
    surface1: '#011627',
    surface2: '#243b4c',
    surface3: '#112331',
    clickable: '#6988a1',
    base: '#808080',
    disabled: '#4D4D4D',
    hover: '#c5e4fd',
    accent: '#c5e4fd',
    error: '#ffcdca',
    errorSurface: '#811e18',
  },
  syntax: {
    plain: '#d6deeb',
    comment: { color: '#999999', fontStyle: 'italic' },
    keyword: { color: '#c792ea', fontStyle: 'italic' },
    tag: '#7fdbca',
    punctuation: '#7fdbca',
    definition: '#82aaff',
    property: { color: '#addb67', fontStyle: 'italic' },
    static: '#f78c6c',
    string: '#ecc48d',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}
var sandpackDark = {
  colors: {
    surface1: '#151515',
    surface2: '#252525',
    surface3: '#2F2F2F',
    clickable: '#999999',
    base: '#808080',
    disabled: '#4D4D4D',
    hover: '#C5C5C5',
    accent: '#90e86f',
    error: '#E1CFF8',
    errorSurface: '#b08df8',
  },
  syntax: {
    plain: '#f0fdaf',
    comment: { color: '#757575', fontStyle: 'italic' },
    keyword: '#e5fd78',
    tag: '#f0fdaf',
    punctuation: '#ffffff',
    definition: '#eeeeee',
    property: '#90e86f',
    static: '#ffffff',
    string: '#dafecf',
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: '13px',
    lineHeight: '20px',
  },
}

// /:https://framerusercontent.com/modules/HdJmYu90NFzknVhsFw9C/pDjf2L2dKqeDsbErAmV0/theming.js
import { clampRGB as clampRGB2 } from 'unframer'
var magic = {
  colors: {
    surface1: '#f6f6f8',
    surface2: '#f6f6f8',
    surface3: '#f6f6f8',
    clickable: '#808080',
    base: '#323232',
    disabled: '#C5C5C5',
    hover: '#4D4D4D',
    accent: '#ffa600',
    error: '#ff453a',
    errorSurface: '#ffeceb',
  },
  syntax: {
    plain: '#151515',
    comment: { color: '#cacacd', fontStyle: 'italic' },
    keyword: '#ffa600',
    tag: '#ff9a4d',
    punctuation: '#ffb3b3',
    definition: '#ff6f00',
    property: '#9900ff',
    static: '#FF453A',
    string: '#f53524',
  },
  font: {
    body: '"Roboto Mono", monospace',
    mono: '"Roboto Mono", monospace',
    size: '14px',
    lineHeight: '24px',
  },
}
var atomLight = {
  colors: { surface1: '#fafafa' },
  syntax: {
    plain: '#383a42',
    comment: { color: '#a0a1a7', fontStyle: 'italic' },
    keyword: '#a626a4',
    tag: '#e45649',
    punctuation: '#383a42',
    definition: '#c18401',
    property: '#4078f2',
    static: '#986801',
    string: '#50a14f',
  },
}
var framerLight = {
  colors: {
    surface1: '#fafafa',
    surface2: '#eeeeee',
    surface3: '#f3f3f3',
    clickable: '#808080',
    base: '#323232',
    disabled: '#c5c5c5',
    hover: '#4d4d4d',
    accent: '#0099ff',
    error: '#ff3366',
    errorSurface: '#ffe0e8',
  },
  syntax: {
    plain: '#666666',
    comment: { color: '#bbbbbb', fontStyle: 'italic' },
    keyword: '#0099ff',
    tag: '#0099ff',
    punctuation: '#bbbbbb',
    definition: '#FFAA00',
    property: '#33cccc',
    static: '#ff8866',
    string: '#8855ff',
  },
}
var framerDark = {
  colors: {
    surface1: '#161820',
    surface2: '#252525',
    surface3: '#2f2f2f',
    clickable: '#999999',
    base: '#d92121',
    disabled: '#4d4d4d',
    hover: '#c5c5c5',
    accent: '#0099ff',
    error: '#ff3366',
    errorSurface: '#ffe0e8',
  },
  syntax: {
    plain: '#eeeeee',
    comment: { color: '#666666', fontStyle: 'italic' },
    keyword: '#00BBFF',
    tag: '#00BBFF',
    punctuation: '#999999',
    definition: '#ffcc66',
    property: '#77dddd',
    static: '#ff8866',
    string: '#bb88ff',
  },
}
var ayuLight = {
  colors: { surface1: '#fafafa' },
  syntax: {
    comment: { color: 'aaaeb1', fontStyle: 'italic' },
    definition: '#3b9ee6',
    keyword: '#fa8e3e',
    plain: '#5c6166',
    property: '#f2ae49',
    punctuation: '#5c6167',
    static: '#a37acc',
    string: '#87b300',
    tag: '#56b4d5',
  },
}
var ayuDark = {
  colors: { surface1: '#0c1017' },
  syntax: {
    comment: { color: '#646a72', fontStyle: 'italic' },
    definition: '#5ac2ff',
    keyword: '#ff9040',
    plain: '#bfbdb6',
    property: '#ffb454',
    punctuation: '#bfbdb6',
    static: '#d2a6ff',
    string: '#80d962',
    tag: '#3bbae7',
  },
}
var sandpackLight = {
  colors: {
    surface1: '#ffffff',
    surface2: '#EFEFEF',
    surface3: '#F3F3F3',
    disabled: '#C5C5C5',
    base: '#323232',
    clickable: '#808080',
    hover: '#4D4D4D',
    accent: '#3973E0',
    error: '#EA3323',
    errorSurface: '#FCF1F0',
    warning: '#6A4516',
    warningSurface: '#FEF2C0',
  },
  syntax: {
    plain: '#151515',
    comment: { color: '#999', fontStyle: 'italic' },
    keyword: '#7C5AE3',
    tag: '#0971F1',
    punctuation: '#3B3B3B',
    definition: '#85A600',
    property: '#3B3B3B',
    static: '#3B3B3B',
    string: '#2E6BD0',
  },
}
var githubDark = {
  colors: { ...framerDark.colors, surface1: '#0d1117' },
  syntax: {
    comment: { color: '#8b949e', fontStyle: 'italic' },
    definition: '#d2a8ff',
    keyword: '#ff7b72',
    plain: '#e6edf3',
    property: '#79c0ff',
    punctuation: '#e6edf3',
    static: '#7ee787',
    string: '#a5d6ff',
    tag: '#7ee787',
  },
}
var themeKeys = [
  'amethyst',
  'aquaBlue',
  'atomDark',
  'atomLight',
  'ayuDark',
  'ayuLight',
  'cobalt2',
  'cyberpunk',
  'dracula',
  'framerDark',
  'framerLight',
  'freeCodeCamp',
  'githubDark',
  'githubLight',
  'levelUp',
  'monokaiPro',
  'magic',
  'neoCyan',
  'nightOwl',
  'sandpackDark',
  'sandpackLight',
]
var themes = {
  amethyst,
  aquaBlue,
  atomDark,
  atomLight,
  ayuDark,
  ayuLight,
  cobalt2,
  cyberpunk,
  dracula,
  framerDark,
  framerLight,
  freeCodeCamp: freeCodeCampDark,
  githubDark,
  githubLight,
  levelUp,
  monokaiPro,
  magic,
  neoCyan,
  nightOwl,
  sandpackDark,
  sandpackLight,
}
var lightThemeVariables = `
/* Colors */
--cb-colors-surface1: var(--cb-colors-surface1-light);
--cb-colors-surface2: var(--cb-colors-surface2-light);
--cb-colors-surface3: var(--cb-colors-surface3-light);
--cb-colors-disabled: var(--cb-colors-disabled-light);
--cb-colors-base: var(--cb-colors-base-light);
--cb-colors-clickable: var(--cb-colors-clickable-light);
--cb-colors-hover: var(--cb-colors-hover-light);
--cb-colors-accent: var(--cb-colors-accent-light);
--cb-colors-error: var(--cb-colors-error-light);
--cb-colors-errorSurface: var(--cb-colors-errorSurface-light);
--cb-colors-warning: var(--cb-colors-warning-light);
--cb-colors-warningSurface: var(--cb-colors-warningSurface-light);

/* Syntax */
--cb-syntax-color-plain: var(--cb-syntax-color-plain-light);
--cb-syntax-color-comment: var(--cb-syntax-color-comment-light);
--cb-syntax-color-keyword: var(--cb-syntax-color-keyword-light);
--cb-syntax-color-definition: var(--cb-syntax-color-definition-light);
--cb-syntax-color-punctuation: var(--cb-syntax-color-punctuation-light);
--cb-syntax-color-property: var(--cb-syntax-color-property-light);
--cb-syntax-color-tag: var(--cb-syntax-color-tag-light);
--cb-syntax-color-static: var(--cb-syntax-color-static-light);
--cb-syntax-color-string: var(--cb-syntax-color-string-light);

/* Other */
--cb-color-scheme: var(--cb-color-scheme-light);
`
var darkThemeVariables = `
/* Colors */
--cb-colors-surface1: var(--cb-colors-surface1-dark);
--cb-colors-surface2: var(--cb-colors-surface2-dark);
--cb-colors-surface3: var(--cb-colors-surface3-dark);
--cb-colors-disabled: var(--cb-colors-disabled-dark);
--cb-colors-base: var(--cb-colors-base-dark);
--cb-colors-clickable: var(--cb-colors-clickable-dark);
--cb-colors-hover: var(--cb-colors-hover-dark);
--cb-colors-accent: var(--cb-colors-accent-dark);
--cb-colors-error: var(--cb-colors-error-dark);
--cb-colors-errorSurface: var(--cb-colors-errorSurface-dark);
--cb-colors-warning: var(--cb-colors-warning-dark);
--cb-colors-warningSurface: var(--cb-colors-warningSurface-dark);

/* Syntax */
--cb-syntax-color-plain: var(--cb-syntax-color-plain-dark);
--cb-syntax-color-comment: var(--cb-syntax-color-comment-dark);
--cb-syntax-color-keyword: var(--cb-syntax-color-keyword-dark);
--cb-syntax-color-definition: var(--cb-syntax-color-definition-dark);
--cb-syntax-color-punctuation: var(--cb-syntax-color-punctuation-dark);
--cb-syntax-color-property: var(--cb-syntax-color-property-dark);
--cb-syntax-color-tag: var(--cb-syntax-color-tag-dark);
--cb-syntax-color-static: var(--cb-syntax-color-static-dark);
--cb-syntax-color-string: var(--cb-syntax-color-string-dark);

/* Other */
--cb-color-scheme: var(--cb-color-scheme-dark);
`
function getVariableTheme(font) {
  return {
    colors: {
      surface1: 'var(--cb-colors-surface1)',
      surface2: 'var(--cb-colors-surface2)',
      surface3: 'var(--cb-colors-surface3)',
      disabled: 'var(--cb-colors-disabled)',
      base: 'var(--cb-colors-base)',
      clickable: 'var(--cb-colors-clickable)',
      hover: 'var(--cb-colors-hover)',
      accent: 'var(--cb-colors-accent)',
      error: 'var(--cb-colors-error)',
      errorSurface: 'var(--cb-colors-errorSurface)',
      warning: 'var(--cb-colors-warning)',
      warningSurface: 'var(--cb-colors-warningSurface)',
    },
    syntax: {
      plain: { color: 'var(--cb-syntax-color-plain)' },
      comment: { color: 'var(--cb-syntax-color-comment)' },
      keyword: { color: 'var(--cb-syntax-color-keyword)' },
      definition: { color: 'var(--cb-syntax-color-definition)' },
      punctuation: { color: 'var(--cb-syntax-color-punctuation)' },
      property: { color: 'var(--cb-syntax-color-property)' },
      tag: { color: 'var(--cb-syntax-color-tag)' },
      static: { color: 'var(--cb-syntax-color-static)' },
      string: { color: 'var(--cb-syntax-color-string)' },
    },
    font: {
      body: 'sans-serif',
      mono: font.fontFamily ?? 'monospace',
      size: font.fontSize,
      lineHeight: font.lineHeight,
    },
  }
}
function getVariablesForTheme(theme, background2, mode) {
  const result = {}
  const { colors, syntax } = themes[theme] || {}
  if (isObject(colors)) {
    for (const name in colors) {
      const value = colors[name]
      result[`--cb-colors-${name}-${mode}`] = value
    }
  }
  if (isObject(syntax)) {
    for (const name in syntax) {
      const value = syntax[name]
      if (isObject(value)) {
        for (const style in value) {
          result[`--cb-syntax-${style}-${name}-${mode}`] = value[style]
        }
      } else {
        result[`--cb-syntax-color-${name}-${mode}`] = value
      }
    }
  }
  if (background2) {
    result[`--cb-colors-surface1-${mode}`] =
      `var(--cb-custom-background, ${background2})`
    result['--cb-background-rgb'] = clampRGB2(background2)
  } else {
    background2 = result[`--cb-colors-surface1-${mode}`]
  }
  result[`--cb-color-scheme-${mode}`] = isDarkColor2(background2)
    ? 'dark'
    : 'light'
  return result
}

// /:https://framerusercontent.com/modules/pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js
var DEFAULT_CODE = `// Paste a code snippet
import { motion } from "framer-motion";

function Component() {
    return (
        <motion.div
            transition={{ ease: "linear" }}
            animate={{ rotate: 360, scale: 2 }}
        />
    );
}`
var wrapperClassName2 = 'framer-cb'
var css3 = [
  `
.${wrapperClassName2} .sp-pre-placeholder {
    padding: var(--cb-padding) !important;
    margin: 0 !important;
    width: max-content;
}
    `,
  `
.${wrapperClassName2} .cm-scroller {
    display: unset !important;
    padding: 0 !important;
}
    `,
  `
.${wrapperClassName2} .cm-content {
    padding: var(--cb-padding) !important;
    width: max-content;
}
    `,
  `
.${wrapperClassName2} .sp-wrapper {
    color-scheme: var(--cb-color-scheme, inherit);
}
    `,
  // This override rules to fix font-size on mobile safari.
  // .cm-content is rendered with js enabled
  // .sp-pre-placeholder is rendered in no-js mode (SSG output)
  `
@media screen and (max-width: 768px) {
    @supports (-webkit-overflow-scrolling: touch) {
        .cb-code-editor .cm-content,
        .cb-code-editor .sp-pre-placeholder {
            font-size: var(--sp-font-size, inherit);
            -webkit-text-size-adjust: 100%;
        }
    }
}
`,
  // Override the 50% height on small screens
  `
@media screen and (max-width: 768px) {
    .${wrapperClassName2} .sp-editor-viewer.sp-stack {
        height: 100%;
    }
}
`,
  // Light mode
  `
.${wrapperClassName2} {
    ${lightThemeVariables}
}
    `,
  `
body[data-framer-theme="dark"] .${wrapperClassName2} {
    ${darkThemeVariables}
}
    `,
  `
@media (prefers-color-scheme: dark) {
    body:not([data-framer-theme]) .${wrapperClassName2} {
        ${darkThemeVariables}
    }
}
    `,
  `
@supports not (color(display-p3 1 1 1)) {
    --cb-custom-background: var(--cb-background-rgb)
}
    `,
].map((rule) => rule.trim())
var CodeBlock = withCSS(function CodeBlock2(props) {
  const {
    code,
    themeMode,
    theme,
    lightTheme,
    darkTheme,
    style,
    language,
    font,
    border,
    background: background2,
  } = props
  const variableTheme = getVariableTheme(font)
  const lightThemeVariables2 = getVariablesForTheme(
    themeMode === 'Dynamic' ? lightTheme : theme,
    background2,
    'light',
  )
  const darkThemeVariables2 = getVariablesForTheme(
    themeMode === 'Dynamic' ? darkTheme : theme,
    background2,
    'dark',
  )
  const additionalLanguage = useLanguageAsync(language)
  const extension = getFileExtensions(language)[0]
  const onCanvas = useIsOnCanvas()
  const borderStyles = useBorder(border || {}, false)
  const borderRadius = useRadius(props)
  const hasBorderRadius =
    borderRadius !== '0px 0px 0px 0px' && borderRadius !== '0px'
  const fileName = `example.${extension}`
  const padding = usePadding(props)
  return /* @__PURE__ */ _jsxs(motion.div, {
    className: wrapperClassName2,
    whileHover: 'visible',
    style: {
      ...lightThemeVariables2,
      ...darkThemeVariables2,
      position: 'relative',
      width: '100%',
      height: '100%',
    },
    children: [
      /* @__PURE__ */ _jsx(SandpackProvider, {
        options: { classes: { 'sp-code-editor': 'cb-code-editor' } },
        theme: variableTheme,
        files: { [fileName]: code },
        customSetup: { entry: fileName },
        style: { height: '100%' },
        children: /* @__PURE__ */ _jsx(SandpackLayout, {
          style: {
            height: '100%',
            // make sure the codeblock doesnt grow beyond
            // the height of its contents
            '--sp-layout-height': '100%',
            // set the variables for padding we use in the overrides
            '--cb-padding': `${padding}`,
            ...borderStyles,
            // match editor background color to make borders visually blend with the editor:
            backgroundColor: 'var(--sp-colors-surface1)',
            borderRadius,
            transform:
              // Safari sometimes struggles to render border-radius:
              // - on the canvas when changing from 0 to any other value
              // - or when rendering an iframe
              hasBorderRadius && onCanvas ? 'translateZ(0.000001px)' : 'unset',
            overflow: 'hidden',
          },
          children: /* @__PURE__ */ _jsx(SandpackCodeEditor, {
            style: {
              letterSpacing: font.letterSpacing,
              fontStyle: font.fontStyle,
              fontWeight: font.fontWeight,
            },
            readOnly: true,
            showReadOnly: false,
            additionalLanguages: additionalLanguage
              ? [additionalLanguage]
              : void 0,
          }),
        }),
      }),
      /* @__PURE__ */ _jsx(SandpackStyles, {}),
    ],
  })
}, css3)
var stdin_default = CodeBlock
function SandpackStyles() {
  return /* @__PURE__ */ _jsx(_Fragment, {
    children:
      !Browser.isBrowser() &&
      /* @__PURE__ */ _jsx('style', {
        'data-framer-css-ssr': true,
        dangerouslySetInnerHTML: { __html: getCssText() },
      }),
  })
}
var themeNames = themeKeys.map(titleCase)
addPropertyControls(CodeBlock, {
  code: {
    type: ControlType.String,
    title: 'Code',
    displayTextArea: true,
    defaultValue: DEFAULT_CODE,
  },
  themeMode: {
    type: ControlType.Enum,
    title: 'Theme',
    displaySegmentedControl: true,
    options: ['Static', 'Dynamic'],
    defaultValue: 'Static',
  },
  theme: {
    type: ControlType.Enum,
    title: ' ',
    options: [...themeKeys],
    optionTitles: themeNames,
    defaultValue: 'framerDark',
    hidden: ({ themeMode }) => themeMode !== 'Static',
  },
  lightTheme: {
    type: ControlType.Enum,
    title: 'Light',
    options: [...themeKeys],
    optionTitles: themeNames,
    defaultValue: 'framerLight',
    hidden: ({ themeMode }) => themeMode !== 'Dynamic',
  },
  darkTheme: {
    type: ControlType.Enum,
    title: 'Dark',
    options: [...themeKeys],
    optionTitles: themeNames,
    defaultValue: 'framerDark',
    hidden: ({ themeMode }) => themeMode !== 'Dynamic',
  },
  language: {
    type: ControlType.Enum,
    title: 'Language',
    options: [...supportedLanguages],
    defaultValue: 'JSX',
  },
  font: {
    // @ts-ignore: Internal API
    type: ControlType.Font,
    controls: 'extended',
    displayFontSize: true,
    displayTextAlignment: false,
    defaultFontType: 'monospace',
    defaultValue: { fontSize: 14, lineHeight: '1.5em' },
  },
  background: { title: 'Fill', type: ControlType.Color, optional: true },
  border: { type: ControlType.Border, optional: true },
  borderRadius: {
    title: 'Radius',
    type: ControlType.FusedNumber,
    toggleKey: 'isMixedBorderRadius',
    toggleTitles: ['Radius', 'Radius per corner'],
    valueKeys: [
      'topLeftRadius',
      'topRightRadius',
      'bottomRightRadius',
      'bottomLeftRadius',
    ],
    valueLabels: ['TL', 'TR', 'BR', 'BL'],
    min: 0,
    defaultValue: 15,
  },
  padding: {
    title: 'Padding',
    type: ControlType.FusedNumber,
    toggleKey: 'paddingPerSide',
    toggleTitles: ['Padding', 'Padding per side'],
    valueKeys: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
    valueLabels: ['T', 'R', 'B', 'L'],
    min: 0,
    defaultValue: 30,
  },
})
CodeBlock.displayName = 'Code Block'

// /:https://framerusercontent.com/modules/jyf9CHwKjeFqcEaDuO4g/wQHwKQ0C4mIQM5sy0tx7/U6USRjo97-2.js
var richText = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h2', { children: 'The need for speed' }),
    /* @__PURE__ */ e('p', {
      children:
        'In 2025, website visitors expect instant results. If your homepage takes longer than a second to load, you\u2019re losing potential customers. Research shows that a 1-second delay in load time can reduce conversions by up to 20%. With the rise of mobile browsing and global audiences, speed is no longer a luxury\u2014it\u2019s a necessity.',
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          '\u201CA fast website isn\u2019t just a nice-to-have. It\u2019s the difference between gaining a customer and losing one.\u201D',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'SEO and business impact' }),
    /* @__PURE__ */ e('p', {
      children:
        'Google now ranks sites based on performance metrics like Core Web Vitals. Faster sites see higher search rankings, reduced bounce rates, and longer session times. A speedy website isn\u2019t just good for users\u2014it\u2019s essential for business growth.',
    }),
    /* @__PURE__ */ e('h3', { children: 'Performance vs. Results table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Metric',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Slow site',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Fast site',
                    }),
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Avg. load time',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '3,2 s',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '0,9 s',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Bounce rate',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '58%',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '29%',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Conversion rate',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '1,3%',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '2,6%',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Google ranking',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Page 2',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Page 1',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('h3', { children: 'Actionable tips' }),
    /* @__PURE__ */ e('p', {
      children:
        'Implementing website speed improvements doesn\u2019t have to be overwhelming. By focusing on a few high-impact strategies, you can dramatically boost your site\u2019s performance and deliver a better experience for every visitor. Start with these proven, actionable tips to see immediate results:',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ i2('p', {
            children: [
              'Compress and convert images to next-gen formats (',
              /* @__PURE__ */ e('code', { children: 'WebP' }),
              ', ',
              /* @__PURE__ */ e('code', { children: 'AVIF' }),
              ')',
            ],
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Minify JavaScript, CSS, and HTML',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Use a global CDN for rapid content delivery',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Enable browser caching and GZIP compression',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h3', { children: 'Example: Code minification' }),
    /* @__PURE__ */ e('div', {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%' },
      children: /* @__PURE__ */ e(r2, {
        componentIdentifier:
          'module:pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js:default',
        children: (i22) =>
          /* @__PURE__ */ e(stdin_default, {
            ...i22,
            code: '// Before minification\nfunction greet(name) {\n    console.log("Hello, " + name + "!");\n}\n\n// After minification\nfunction greet(n){console.log("Hello, "+n+"!");}',
            language: 'JSX',
          }),
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'Why Jet?' }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet makes all these optimizations automatic. With one click, your site is faster, your SEO improves, and your users stay happy.',
    }),
  ],
})
var richText1 = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h2', { children: 'Why images matter' }),
    /* @__PURE__ */ e('p', {
      children:
        'Images account for more than half of the average web page\u2019s weight. If your images aren\u2019t optimized, even the most beautiful site can feel slow and unresponsive. Uncompressed, outdated formats and oversized files are the most common culprits behind sluggish load times.',
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'Jet\u2019s image optimization dropped our homepage load time by 1,5 seconds\u2014no manual work needed.',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'The hidden cost of slow images' }),
    /* @__PURE__ */ e('p', {
      children:
        'A slow-loading image can cost you more than just a few seconds\u2014it can cost you sales, users, and search rankings. According to recent studies, 39% of users will stop engaging with a website if images take too long to load. That\u2019s why modern image optimization isn\u2019t just a technical detail\u2014it\u2019s a business priority.',
    }),
    /* @__PURE__ */ e('h3', { children: 'Image formats table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Format',
                    }),
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Size (KB)',
                    }),
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Quaity',
                    }),
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'JPEG',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '120',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Good',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'PNG',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '180',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Excellent',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'WebP',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '60',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Excellent',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'AVIF',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '45',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Excellent',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'Jet\u2019s image optimization dropped our homepage load time by 1,5 seconds\u2014no manual work needed.',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'Actionable tips' }),
    /* @__PURE__ */ e('p', {
      children:
        'Optimizing your site\u2019s images doesn\u2019t have to be complicated. By following a few best practices, you can drastically improve your load times and user experience. Here\u2019s where to start:',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Compress and convert images to next-gen formats (WebP, AVIF)',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Use responsive image sizes for different devices',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Implement lazy loading for images below the fold',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Serve images through a CDN for instant global delivery',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h3', { children: 'Example: Lazy loading' }),
    /* @__PURE__ */ e('div', {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%' },
      children: /* @__PURE__ */ e(r2, {
        componentIdentifier:
          'module:pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js:default',
        children: (i22) =>
          /* @__PURE__ */ e(stdin_default, {
            ...i22,
            code: '<img src="photo.webp" loading="lazy" alt="Optimized photo">',
            language: 'JSX',
          }),
      }),
    }),
    /* @__PURE__ */ e('h3', { children: "Jet's approach" }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet handles all of this behind the scenes. Upload your images and let Jet do the rest\u2014no plugins, no manual work.',
    }),
  ],
})
var richText2 = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h2', { children: 'The challenge' }),
    /* @__PURE__ */ e('p', {
      children:
        'Our client, a growing e-commerce brand, faced high bounce rates and abandoned carts due to slow page loads. Every second counted, especially on mobile, where users are even less forgiving of delays. Despite investing in high-quality products and marketing, the site\u2019s sluggish performance was costing them sales and damaging their reputation.',
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'We knew speed was important, but we didn\u2019t realize just how much revenue we were leaving on the table until we saw the numbers.',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'Diagnosing the bottlenecks' }),
    /* @__PURE__ */ e('p', {
      children: 'A performance audit revealed several issues:',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Large, uncompressed images were slowing down key landing pages.',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Bloated JavaScript and CSS files increased load times, especially for returning visitors.',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'The lack of a global CDN meant international shoppers experienced even longer delays.',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'No real-time monitoring made it hard to spot and fix slowdowns quickly.',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h2', { children: 'Implementing Jet' }),
    /* @__PURE__ */ e('p', {
      children:
        'After onboarding with Jet, the transformation was immediate and measurable. With just a few clicks, Jet\u2019s optimization suite went to work:',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Automatic image optimization\u2029\u2029',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Code minification\u2029\u2029',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'CDN integration',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Real-time performance monitoring',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h3', { children: 'Conversion impact table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Metric',
                    }),
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'Before Jet',
                    }),
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: /* @__PURE__ */ e('strong', {
                      children: 'After Jet',
                    }),
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Avg. Load Time (s)',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '2,8',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '0,8',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Conversion Rate',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '1,8%',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '2,4%',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Bounce Rate',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '44%',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '27%',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'Jet\u2019s one-click optimization turned our sluggish site into a conversion machine.',
      }),
    }),
    /* @__PURE__ */ e('h3', {
      children: 'Example: Real-time Monitoring Code',
    }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet\u2019s real-time monitoring is as simple as adding a single script tag to your site. This snippet gives you live insights into your performance and alerts you if anything slows down:',
    }),
    /* @__PURE__ */ e('div', {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%' },
      children: /* @__PURE__ */ e(r2, {
        componentIdentifier:
          'module:pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js:default',
        children: (i22) =>
          /* @__PURE__ */ e(stdin_default, {
            ...i22,
            code: '// Jet real-time monitoring snippet\n<script src="https://cdn.jet.com/monitor.js"><\/script>',
            language: 'JSX',
          }),
      }),
    }),
    /* @__PURE__ */ e('p', {
      children:
        'With Jet, our client didn\u2019t just speed up their website\u2014they unlocked higher conversions, happier customers, and sustainable growth.',
    }),
  ],
})
var richText3 = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h2', { children: 'What are core web vitals?' }),
    /* @__PURE__ */ e('p', {
      children:
        'Core Web Vitals are Google\u2019s key metrics for user experience. They measure how quickly your site loads, how soon it becomes interactive, and how stable the layout is as content appears. These three metrics are now critical ranking factors for search engines and a direct reflection of your visitors\u2019 satisfaction.',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Largest Contentful Paint (LCP): Loading performance',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'First Input Delay (FID): Interactivity',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Cumulative Layout Shift (CLS): Visual stability',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'Optimizing for Core Web Vitals isn\u2019t just about SEO\u2014it\u2019s about delivering a world-class experience.',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'Why do Core Web Vitals matter?' }),
    /* @__PURE__ */ e('p', {
      children:
        'A site that excels in Core Web Vitals feels instant and smooth for every user. If your LCP is slow, visitors see a blank or incomplete page. If your FID is high, clicks and taps feel laggy. If CLS is poor, buttons and images jump around, causing frustration and accidental taps. Meeting these benchmarks means your site is fast, interactive, and visually stable\u2014qualities that keep users engaged and coming back.',
    }),
    /* @__PURE__ */ e('h3', { children: 'Core web vitals table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Metric',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Good',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Need Improvement',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Poor',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'LCP',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '\u2264 2,5 s',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '2,5\u20134 s',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '> 4 s',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'FID',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '\u2264 100 ms',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '100\u2013300 ms',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '> 300 ms',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'CLS',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '\u2264 0,1',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '0,1\u20130,25',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: '> 0,25',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('h3', {
      children: 'Actionable tips for better web vitals',
    }),
    /* @__PURE__ */ e('p', {
      children:
        'Improving your Core Web Vitals doesn\u2019t have to be complicated. Here are a few proven strategies that can make a big difference:',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Preload important images and fonts to speed up LCP.',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Minimize third-party scripts and keep JavaScript lean for better FID.',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Reserve space for images and ads to avoid unexpected layout shifts (better CLS).',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children:
              'Use a performance monitoring tool to track these metrics in real time.\xA0',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h3', { children: 'Example: Optimizing LCP' }),
    /* @__PURE__ */ e('div', {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%' },
      children: /* @__PURE__ */ e(r2, {
        componentIdentifier:
          'module:pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js:default',
        children: (i22) =>
          /* @__PURE__ */ e(stdin_default, {
            ...i22,
            code: '<!-- Preload hero image for faster LCP -->\n<link rel="preload" as="image" href="/hero.webp">',
            language: 'JSX',
          }),
      }),
    }),
    /* @__PURE__ */ e('h3', { children: 'How Jet helps' }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet automatically audits your site for these metrics and applies optimizations, so you can focus on content, not code. With Jet, you\u2019ll always know where your site stands\u2014and you\u2019ll have the tools to reach and maintain top scores for a seamless, high-performing user experience. ',
    }),
  ],
})
var richText4 = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h3', { children: 'What is a CDN?' }),
    /* @__PURE__ */ e('p', {
      children:
        'A Content Delivery Network (CDN) is a system of distributed servers that deliver content to users based on their geographic location. Instead of every visitor connecting to a single central server, a CDN ensures that your website\u2019s images, scripts, and other assets are loaded from the server closest to them. This leads to dramatically faster load times, especially for global audiences, and helps your site stay available even during high-traffic events.',
    }),
    /* @__PURE__ */ e('h3', { children: 'Why does your site need a CDN?' }),
    /* @__PURE__ */ e('p', {
      children:
        'Imagine launching a new product and suddenly seeing a massive spike in visitors from around the globe. Without a CDN, your single server can quickly become overloaded, causing slowdowns or even outages. With a CDN, traffic is automatically balanced across many servers, ensuring a smooth and fast experience for everyone. Plus, CDNs add layers of security and redundancy that protect your site from attacks and unexpected failures.\xA0',
    }),
    /* @__PURE__ */ e('h3', { children: 'CDN benefits table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Benefit',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Description',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Speed',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Content loads from the nearest server',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Scalability',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Handles traffic spikes effortlessly',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Security',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'DDoS protection and SSL everywhere',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Reliability',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Redundant nodes keep your site online',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'Jet\u2019s built-in CDN means our site is fast for visitors everywhere, all the time.',
      }),
    }),
    /* @__PURE__ */ e('h3', { children: 'Example: CDN integration code' }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet CDN integration is automatic for all users, but if you ever need to manually serve a script or asset, it\u2019s as easy as adding this snippet:\xA0',
    }),
    /* @__PURE__ */ e('div', {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%' },
      children: /* @__PURE__ */ e(r2, {
        componentIdentifier:
          'module:pVk4QsoHxASnVtUBp6jr/HTBsNkEMAb7TUGaO3DBy/CodeBlock.js:default',
        children: (i22) =>
          /* @__PURE__ */ e(stdin_default, {
            ...i22,
            code: `// Jet CDN integration is automatic, but here's a manual example:
<script src="https://cdn.jet.com/your-site-assets.js"><\/script>`,
            language: 'JSX',
          }),
      }),
    }),
  ],
})
var richText5 = /* @__PURE__ */ i2(t2.Fragment, {
  children: [
    /* @__PURE__ */ e('h2', {
      children: 'The problem with manual optimization',
    }),
    /* @__PURE__ */ e('p', {
      children:
        'Traditional website optimization is a never-ending cycle of plugin updates, manual code tweaks, and troubleshooting conflicts. Each improvement\u2014whether it\u2019s compressing images, minifying scripts, or configuring a CDN\u2014often requires a different tool, a new workflow, and hours of research. For many site owners, this means less time spent creating content or serving customers, and more time fighting technical fires.',
    }),
    /* @__PURE__ */ e('h3', {
      children: 'The hidden costs of manual work',
    }),
    /* @__PURE__ */ e('p', {
      children:
        'Manual optimization isn\u2019t just time-consuming; it\u2019s easy to make mistakes or miss critical improvements. Outdated plugins can introduce security risks, and even a small misconfiguration can tank your site\u2019s performance or break key features. Plus, with every update, there\u2019s the risk of something else going wrong.',
    }),
    /* @__PURE__ */ e('h2', { children: 'Jet\u2019s Solution' }),
    /* @__PURE__ */ e('p', {
      children:
        'Jet takes the pain out of performance. Instead of juggling a dozen tools and processes, Jet automates every step: ',
    }),
    /* @__PURE__ */ i2('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Asset minification',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Image compression',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', { children: 'CDN setup' }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Real-time performance monitoring',
          }),
        }),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'Issue alerts',
          }),
        }),
      ],
    }),
    /* @__PURE__ */ e('h3', { children: 'Manual vs. Jet Table' }),
    /* @__PURE__ */ e('figure', {
      className: 'framer-table-wrapper',
      children: /* @__PURE__ */ e('table', {
        children: /* @__PURE__ */ i2('tbody', {
          children: [
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Task',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Manual Approach',
                  }),
                }),
                /* @__PURE__ */ e('th', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'With Jet',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Image compression',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Multiple plugins/tools',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Automatic',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Code minification',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Manual build steps',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Automatic',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'CDN configuration',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Advanced setup',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'One click',
                  }),
                }),
              ],
            }),
            /* @__PURE__ */ i2('tr', {
              children: [
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Monitoring',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Third-party scripts',
                  }),
                }),
                /* @__PURE__ */ e('td', {
                  children: /* @__PURE__ */ e('p', {
                    children: 'Built-in',
                  }),
                }),
              ],
            }),
          ],
        }),
      }),
    }),
    /* @__PURE__ */ e('blockquote', {
      children: /* @__PURE__ */ e('p', {
        children:
          'With Jet, I spend less time fixing and more time creating. Everything just works.',
      }),
    }),
    /* @__PURE__ */ e('h2', { children: 'The Jet difference' }),
    /* @__PURE__ */ e('p', {
      children:
        'With Jet, optimization is no longer a burden. You get all the benefits of a fast, secure, and scalable site\u2014without the technical headaches. That means more time for your business, your team, and your creativity.',
    }),
  ],
})
var __FramerMetadata__ = {
  exports: {
    richText4: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    richText2: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    richText: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    richText1: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    richText5: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    richText3: {
      type: 'variable',
      annotations: { framerContractVersion: '1' },
    },
    __FramerMetadata__: { type: 'variable' },
  },
}
export {
  __FramerMetadata__,
  richText,
  richText1,
  richText2,
  richText3,
  richText4,
  richText5,
}
/*! Bundled license information:

static-browser-server/out/lib/main.js:
  (*! Bundled license information:
  
  mime-db/index.js:
    (*!
     * mime-db
     * Copyright(c) 2014 Jonathan Ong
     * Copyright(c) 2015-2022 Douglas Christopher Wilson
     * MIT Licensed
     *)
  *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
