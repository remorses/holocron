// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6ea1ba37e05fac32 "Fumabase website, made from Aset", do not edit manually */
'use client'

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Light Arrow' | 'Orange' | 'Border' | 'Light Arrow - L' | 'Orange - L' | 'Border - L' | 'Light Arrow - Phone' | 'Border - Phone' | 'Orange - Phone' // Variant
 * title?: string // Title
 * buttonLink?: string // Button Link
 * newTab?: boolean // New Tab
 * click?: Function // Click
}} Props

 */
import { stdin_default } from '../chunks/chunk-IETFVNRG.js'
import '../chunks/chunk-BTSBQWPZ.js'
import '../chunks/chunk-EWWPQ2JC.js'
import { routes } from '../chunks/chunk-75FLX355.js'

// virtual:component/button
import { Fragment } from 'react'
import { ContextProviders } from 'unframer'
import { WithFramerBreakpoints } from 'unframer'
import { jsx } from 'react/jsx-runtime'
var locales = []
var defaultResponsiveVariants = {
  base: 'F7eWAlrXR',
  md: 'dpEXmejGI',
  xl: 'feWXGq4P4',
}
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        '6ea1ba37e05fac32a45356fef8456248177d20a6a62facacd4fc997df2f330fd'
      }
      locale={locale}
      locales={locales}
    >
      {jsx(stdin_default, {
        ...rest,
      })}
    </ContextProviders>
  )
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ButtonFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = '', ...rest }) => {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        '6ea1ba37e05fac32a45356fef8456248177d20a6a62facacd4fc997df2f330fd'
      }
      locale={locale}
      locales={locales}
    >
      <WithFramerBreakpoints
        Component={stdin_default}
        variants={defaultResponsiveVariants}
        {...rest}
      />
    </ContextProviders>
  )
}
Object.assign(ComponentWithRoot, stdin_default)
var button_default = ComponentWithRoot
export { button_default as default }
