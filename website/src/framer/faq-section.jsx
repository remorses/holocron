// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6ea1ba37e05fac32 "Holocron website, made from Aset", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Desktop' | 'Tablet' | 'Phone' // Variant
}} Props

 */
import { stdin_default } from "./chunks/chunk-BV4MQMG4.js";
import "./chunks/chunk-SNH2M5FY.js";
import { className, css, fonts } from "./chunks/chunk-KYATNZPG.js";
import { stdin_default as stdin_default2 } from "./chunks/chunk-EHCTMXQN.js";
import { routes } from "./chunks/chunk-733MZEOY.js";

// virtual:faq-section
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/vsGrSyPjmSu6qtp6KhG2/PWHDotviIDi0QiGjhxpM/qtvfO8YHV.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
	withFX,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var MotionDivWithFX = withFX(motion.div);
var FAQFonts = getFonts(stdin_default);
var SmartComponentScopedContainerWithFX = withFX(SmartComponentScopedContainer);
var GridFonts = getFonts(stdin_default2);
var cycleOrder = ["rmeeJSz78", "XrZxEUAaJ", "EW4AHUAxX"];
var serializationHash = "framer-BU3RA";
var variantClassNames = {
	EW4AHUAxX: "framer-v-x37i1",
	rmeeJSz78: "framer-v-1rbr5xo",
	XrZxEUAaJ: "framer-v-fvebzn",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var animation = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	x: 0,
	y: 50,
};
var transition2 = {
	bounce: 0.1,
	delay: 0,
	duration: 0.8,
	type: "spring",
};
var animation1 = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	x: 0,
	y: 80,
};
var transition3 = {
	damping: 80,
	delay: 0,
	mass: 1,
	stiffness: 400,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	Desktop: "rmeeJSz78",
	Phone: "EW4AHUAxX",
	Tablet: "XrZxEUAaJ",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "rmeeJSz78",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "rmeeJSz78",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.section
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1rbr5xo",
							className2,
							classNames,
						)}
						data-framer-name={"Desktop"}
						layoutDependency={layoutDependency}
						layoutId={"rmeeJSz78"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								EW4AHUAxX: {
									"data-framer-name": "Phone",
								},
								XrZxEUAaJ: {
									"data-framer-name": "Tablet",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-3xiqmp"}
							data-framer-name={"Container"}
							layoutDependency={layoutDependency}
							layoutId={"PwCBXcXVQ"}
						>
							<MotionDivWithFX
								__framer__animate={{
									transition: transition2,
								}}
								__framer__animateOnce={true}
								__framer__enter={animation}
								__framer__styleAppearEffectEnabled={true}
								__framer__threshold={0}
								__perspectiveFX={false}
								__smartComponentFX={true}
								__targetOpacity={1}
								className={"framer-11gl5ow"}
								data-framer-name={"Heading"}
								layoutDependency={layoutDependency}
								layoutId={"yYMJX8gF_"}
								{...addPropertyOverrides(
									{
										EW4AHUAxX: {
											__framer__enter: animation1,
										},
										XrZxEUAaJ: {
											__framer__threshold: 0.5,
										},
									},
									baseVariant,
									gestureVariant,
								)}
							>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-yufxp6"}
									data-framer-name={"FAQ"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"QmbSyYRqH"}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React.Fragment>
										<motion.h2
											className={"framer-styles-preset-163xgy6"}
											data-styles-preset={"EEpMe6lZZ"}
											style={{
												"--framer-text-alignment": "center",
											}}
										>
											{"FAQ"}
										</motion.h2>
									</React.Fragment>
								</RichText>
							</MotionDivWithFX>
							<motion.div
								className={"framer-1c1yyb7"}
								data-framer-name={"List"}
								layoutDependency={layoutDependency}
								layoutId={"rD2bJDy3t"}
								style={{
									borderBottomLeftRadius: 20,
									borderBottomRightRadius: 20,
									borderTopLeftRadius: 20,
									borderTopRightRadius: 20,
								}}
							>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 0}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													0,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													0,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-2kt7vz-container"}
										layoutDependency={layoutDependency}
										layoutId={"LGIjljqLt-container"}
										nodeId={"LGIjljqLt"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
										{...addPropertyOverrides(
											{
												EW4AHUAxX: {
													__framer__threshold: 0.5,
												},
											},
											baseVariant,
											gestureVariant,
										)}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "LGIjljqLt",
											layoutId: "LGIjljqLt",
											lr9MckAMy:
												"Holocron is a hosting and deployment platform built on top of the open source Fumadocs framework. It makes it easy to deploy your documentation website with instant deployments and instant preview using the Holocron dev command.",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S: "How is Holocron different than Fumadocs?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={
										(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 130
									}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													126,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													130,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-sl7xtq-container"}
										layoutDependency={layoutDependency}
										layoutId={"qlcnY0jiN-container"}
										nodeId={"qlcnY0jiN"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "qlcnY0jiN",
											layoutId: "qlcnY0jiN",
											lr9MckAMy:
												"Your content is placed in a GitHub repository as markdown and MDX files. You can also use a Holocron.json file to customize your website\u2014add links, a footer, and colors. For advanced customization, you can edit the fully customizable styles.css file.",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S: "Where is Holocron content hosted?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={
										(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 260
									}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													252,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													260,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-1hn1rsr-container"}
										layoutDependency={layoutDependency}
										layoutId={"Bp7PFXrzD-container"}
										nodeId={"Bp7PFXrzD"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "Bp7PFXrzD",
											layoutId: "Bp7PFXrzD",
											lr9MckAMy:
												"Holocron allows you to fully customize colors using CSS variables in the Holocron.json file. You can also add a custom styles.css file for complete control over your website\u2019s appearance.",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S: "Which colors can I customize in Holocron?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={
										(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 390
									}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													378,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													390,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-p22cp9-container"}
										layoutDependency={layoutDependency}
										layoutId={"vJsYo6GVZ-container"}
										nodeId={"vJsYo6GVZ"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "vJsYo6GVZ",
											layoutId: "vJsYo6GVZ",
											lr9MckAMy:
												"Holocron is simpler to deploy, requiring only one click and can be used by non-technical people. It builds and deploys instantly, regardless of the number of markdown files. Customization is easier and does not require writing code thanks to the Holocron.json file. Holocron also fully integrates with an agent that can write and keep your docs updated for you.",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S:
												"Why should I use Holocron instead of self-hosting Fumadocs?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={
										(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 520
									}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													504,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													520,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-1jqtena-container"}
										layoutDependency={layoutDependency}
										layoutId={"WKntHTHga-container"}
										nodeId={"WKntHTHga"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "WKntHTHga",
											layoutId: "WKntHTHga",
											lr9MckAMy:
												"Holocron is fully open source and has no vendor lock-in. You can later self-deploy your docs using Fumadocs. Shumumabase.",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S:
												"What is the difference between Holocron and Mintlify?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
								<ComponentViewportProvider
									height={116}
									width={`min(${componentViewport?.width || "100vw"} - 200px, 1100px)`}
									y={
										(componentViewport?.y || 0) + 102 + 0 + 0 + 106.2 + 0 + 650
									}
									{...addPropertyOverrides(
										{
											EW4AHUAxX: {
												width: `min(${componentViewport?.width || "100vw"} - 40px, 580px)`,
												y:
													(componentViewport?.y || 0) +
													120 +
													0 +
													0 +
													86.2 +
													0 +
													630,
											},
											XrZxEUAaJ: {
												width: `min(${componentViewport?.width || "100vw"} - 80px, 810px)`,
												y:
													(componentViewport?.y || 0) +
													150 +
													0 +
													0 +
													86.2 +
													0 +
													650,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<SmartComponentScopedContainerWithFX
										__framer__animate={{
											transition: transition3,
										}}
										__framer__animateOnce={true}
										__framer__enter={animation}
										__framer__styleAppearEffectEnabled={true}
										__framer__threshold={0}
										__perspectiveFX={false}
										__smartComponentFX={true}
										__targetOpacity={1}
										className={"framer-6sqcfe-container"}
										layoutDependency={layoutDependency}
										layoutId={"W0OxweZ9I-container"}
										nodeId={"W0OxweZ9I"}
										rendersWithMotion={true}
										scopeId={"qtvfO8YHV"}
									>
										{_jsx(stdin_default, {
											height: "100%",
											id: "W0OxweZ9I",
											layoutId: "W0OxweZ9I",
											lr9MckAMy:
												"Right now Holocron is free. Holocron will add a subscription plan for companies that need more features like ",
											style: {
												width: "100%",
											},
											variant: "G8PiTZbU_",
											width: "100%",
											xyvbwpR7S: "What is the price?",
										})}
									</SmartComponentScopedContainerWithFX>
								</ComponentViewportProvider>
							</motion.div>
						</motion.div>
						<motion.div
							className={"framer-1a5qlxf"}
							data-framer-name={"Grid"}
							layoutDependency={layoutDependency}
							layoutId={"OhYrU06tt"}
						>
							<ComponentViewportProvider
								height={(componentViewport?.height || 749) * 1 * 1}
								width={componentViewport?.width || "100vw"}
								y={(componentViewport?.y || 0) + 0 + 0}
								{...addPropertyOverrides(
									{
										EW4AHUAxX: {
											height: (componentViewport?.height || 824) * 1 * 1,
										},
										XrZxEUAaJ: {
											height: (componentViewport?.height || 747) * 1 * 1,
										},
									},
									baseVariant,
									gestureVariant,
								)}
							>
								<SmartComponentScopedContainer
									className={"framer-kl5dm0-container"}
									layoutDependency={layoutDependency}
									layoutId={"V4zOijVKo-container"}
									nodeId={"V4zOijVKo"}
									rendersWithMotion={true}
									scopeId={"qtvfO8YHV"}
								>
									{_jsx(stdin_default2, {
										height: "100%",
										id: "V4zOijVKo",
										layoutId: "V4zOijVKo",
										style: {
											height: "100%",
											width: "100%",
										},
										variant: "hdexXEO_X",
										width: "100%",
										...addPropertyOverrides(
											{
												EW4AHUAxX: {
													variant: "mWhcw8lXH",
												},
												XrZxEUAaJ: {
													variant: "QYQ1r9X7u",
												},
											},
											baseVariant,
											gestureVariant,
										),
									})}
								</SmartComponentScopedContainer>
							</ComponentViewportProvider>
						</motion.div>
					</motion.section>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-BU3RA.framer-17mvys5, .framer-BU3RA .framer-17mvys5 { display: block; }",
	".framer-BU3RA.framer-1rbr5xo { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 60px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 102px 100px 80px 100px; position: relative; width: 1200px; }",
	".framer-BU3RA .framer-3xiqmp { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 60px; height: min-content; justify-content: flex-start; max-width: 1100px; overflow: visible; padding: 0px; position: relative; width: 100%; z-index: 1; }",
	".framer-BU3RA .framer-11gl5ow { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 8px; height: min-content; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 100%; }",
	".framer-BU3RA .framer-yufxp6 { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	".framer-BU3RA .framer-1c1yyb7 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 14px; height: min-content; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 100%; z-index: 1; }",
	".framer-BU3RA .framer-2kt7vz-container, .framer-BU3RA .framer-sl7xtq-container, .framer-BU3RA .framer-1hn1rsr-container, .framer-BU3RA .framer-p22cp9-container, .framer-BU3RA .framer-1jqtena-container, .framer-BU3RA .framer-6sqcfe-container { flex: none; height: auto; position: relative; width: 100%; }",
	".framer-BU3RA .framer-1a5qlxf { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 100%; justify-content: center; overflow: hidden; padding: 0px; position: absolute; right: 0px; top: 0px; width: 100%; z-index: 0; }",
	".framer-BU3RA .framer-kl5dm0-container { flex: none; height: 100%; left: calc(50.00000000000002% - 100% / 2); position: absolute; top: 0px; width: 100%; z-index: 0; }",
	".framer-BU3RA.framer-v-fvebzn.framer-1rbr5xo { gap: 0px; padding: 150px 40px 50px 40px; width: 810px; }",
	".framer-BU3RA.framer-v-fvebzn .framer-3xiqmp { gap: 40px; max-width: unset; }",
	".framer-BU3RA.framer-v-fvebzn .framer-1c1yyb7 { max-width: 810px; }",
	".framer-BU3RA.framer-v-x37i1.framer-1rbr5xo { gap: 40px; padding: 120px 20px 0px 20px; width: 390px; }",
	".framer-BU3RA.framer-v-x37i1 .framer-3xiqmp { gap: 40px; max-width: 580px; }",
	".framer-BU3RA.framer-v-x37i1 .framer-11gl5ow { gap: 5px; }",
	".framer-BU3RA.framer-v-x37i1 .framer-1c1yyb7 { gap: 10px; }",
	...css,
];
var FramerqtvfO8YHV = withCSS(Component, css2, "framer-BU3RA");
var stdin_default3 = FramerqtvfO8YHV;
FramerqtvfO8YHV.displayName = "FAQ Section";
FramerqtvfO8YHV.defaultProps = {
	height: 749,
	width: 1200,
};
addPropertyControls(FramerqtvfO8YHV, {
	variant: {
		options: ["rmeeJSz78", "XrZxEUAaJ", "EW4AHUAxX"],
		optionTitles: ["Desktop", "Tablet", "Phone"],
		title: "Variant",
		type: ControlType.Enum,
	},
});
addFonts(
	FramerqtvfO8YHV,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...FAQFonts,
		...GridFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:faq-section
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "EW4AHUAxX",
	md: "XrZxEUAaJ",
	xl: "rmeeJSz78",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6ea1ba37e05fac32a45356fef8456248177d20a6a62facacd4fc997df2f330fd"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default3, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders FaqSectionFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6ea1ba37e05fac32a45356fef8456248177d20a6a62facacd4fc997df2f330fd"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default3}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default3);
var faq_section_default = ComponentWithRoot;
export { faq_section_default as default };
